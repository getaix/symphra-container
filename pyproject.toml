[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "symphra-container"
version = "0.1.0"
description = "Enterprise-grade Python dependency injection container with type hints, async support, and circular dependency handling"
readme = "README.md"
requires-python = ">=3.11"
authors = [
    {name = "Your Name", email = "your@email.com"},
]
license = {text = "MIT"}
keywords = [
    "dependency-injection",
    "di",
    "container",
    "ioc",
    "async",
    "type-hints",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
]

dependencies = []

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-asyncio>=0.23",
    "pytest-cov>=4.1",
    "pytest-benchmark>=4.0",
    "mypy>=1.8",
    "ruff>=0.2",
]
docs = [
    "sphinx>=7.0",
    "sphinx-rtd-theme>=2.0",
    "myst-parser>=2.0",
]
async = [
    "aiofiles>=23.2",
]
# Framework integrations (optional)
fastapi = [
    "fastapi>=0.100.0",
]
flask = [
    "flask>=2.3.0",
]
django = [
    "django>=4.0",
]
# Install all framework integrations
frameworks = [
    "fastapi>=0.100.0",
    "flask>=2.3.0",
    "django>=4.0",
    "starlette>=0.35",
    "sqlalchemy>=2.0",
    "pydantic>=2.0",
    "httpx>=0.23",
]
# Install all optional dependencies (excluding frameworks)
all = [
    "aiofiles>=23.2",
]

[project.urls]
Homepage = "https://github.com/getaix/symphra-container"
Documentation = "https://getaix.github.io/symphra-container"
Repository = "https://github.com/getaix/symphra-container.git"
Issues = "https://github.com/getaix/symphra-container/issues"

[tool.hatch.build.targets.wheel]
packages = ["src/symphra_container"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/docs",
    "/README.md",
    "/LICENSE",
    "/CHANGELOG.md",
]

# ============ MyPy Configuration ============
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_unimplemented = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
pretty = true
show_error_codes = true
show_error_context = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_untyped_calls = false

# ============ Ruff Configuration ============
[tool.ruff]
line-length = 120
target-version = "py311"
output-format = "grouped"

[tool.ruff.lint]
# Enable all rule sets
select = [
    "F",      # Pyflakes
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "C90",    # mccabe
    "I",      # isort
    "N",      # pep8-naming
    "D",      # pydocstyle
    "UP",     # pyupgrade
    "YTT",    # flake8-2020
    "ANN",    # flake8-annotations
    "ASYNC",  # flake8-async
    "S",      # flake8-bandit
    "BLE",    # flake8-blind-except
    "FBT",    # flake8-boolean-trap
    "B",      # flake8-bugbear
    "A",      # flake8-builtins
    "COM",    # flake8-commas
    "C4",     # flake8-comprehensions
    "DTZ",    # flake8-datetimez
    "T10",    # flake8-debugger
    "DJ",     # flake8-django
    "EM",     # flake8-errmsg
    "EXE",    # flake8-executable
    "FA",     # flake8-future-annotations
    "ISC",    # flake8-implicit-str-concat
    "ICN",    # flake8-import-conventions
    "G",      # flake8-logging-format
    "INP",    # flake8-no-pep420
    "PIE",    # flake8-pie
    "T20",    # flake8-print
    "PT",     # flake8-pytest-style
    "Q",      # flake8-quotes
    "RSE",    # flake8-raise
    "RET",    # flake8-return
    "SLF",    # flake8-self
    "SLOT",   # flake8-slots
    "SIM",    # flake8-simplify
    "TID",    # flake8-tidy-imports
    "TCH",    # flake8-type-checking
    "INT",    # flake8-gettext
    "ARG",    # flake8-unused-arguments
    "PTH",    # flake8-use-pathlib
    "TD",     # flake8-todos
    "FIX",    # flake8-fixme
    "ERA",    # eradicate
    "PD",     # pandas-vet
    "PL",     # Pylint
    "TRY",    # tryceratops
    "PERF",   # Perflint
    "FURB",   # refurb
    "LOG",    # flake8-logging
    "RUF",    # Ruff-specific rules
]

# Exclude specific rules that might be too strict
ignore = [
    "D100",    # Missing docstring in public module
    "D104",    # Missing docstring in public package
    "S101",    # Use of assert detected
    "D105",    # Missing docstring in magic method
    "PLR0913", # Too many arguments to function definition
    "PLR0914", # Too many local variables
    "T201",    # print found
    "FBT001",  # Boolean-typed positional argument in function definition
    "FBT002",  # Boolean default positional argument in function definition
    "COM812",  # Trailing comma missing
    "ANN401",  # Dynamically typed expressions (Any) - required for DI container
    "TRY300",  # Consider moving statement to else block
    "TRY301",  # Abstract raise to inner function
    "EM101",   # Exception must not use string literal
    "C901",    # Function is too complex
    "PLR0912", # Too many branches
    "PLR0911", # Too many return statements
    "ERA001",  # Found commented-out code
    "PLC0415", # Import should be at top-level
    "SLF001",  # Private member accessed
    "N818",    # Exception name should have Error suffix
]

# Configuration for specific rules
[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # Imported but unused
"tests/**" = [
    "S101",    # Use of assert
    "D100",    # Missing docstring
    "D101",    # Missing docstring in public class
    "D104",    # Missing docstring in package
    "D107",    # Missing docstring in __init__
    "ARG001",  # Unused function argument
    "ARG002",  # Unused method argument
    "ANN001",  # Missing type annotation for function argument
    "ANN201",  # Missing return type annotation for public function
    "ANN202",  # Missing return type annotation for private function
    "PLR2004", # Magic value used in comparison
    "N801",    # Class name should use CapWords convention
    "B023",    # Function definition does not bind loop variable
    "PT011",   # pytest.raises too broad
    "B017",    # Do not assert blind exception
    "E721",    # Use is/is not for type comparisons
    "F821",    # Undefined name (used in tests intentionally)
    "PERF401", # Use list comprehension
]

[tool.ruff.lint.pydocstyle]
convention = "google"  # Use Google-style docstrings

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.isort]
known-first-party = ["symphra_container"]
known-third-party = ["fastapi", "flask", "sqlalchemy", "pydantic"]

# ============ Black Configuration (for reference, Ruff handles formatting) ============
[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"
skip-magic-trailing-comma = false

# ============ Pytest Configuration ============
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
addopts = [
    "--cov=src/symphra_container",
    "--cov-report=html:htmlcov",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=xml",
    "--cov-fail-under=81",  # 排除框架集成后的实际覆盖率目标 (81.55%)
    "-v",
    "--tb=short",
]
filterwarnings = [
    "ignore:Benchmark fixture was not used at all in this test!::pytest_benchmark.logger.PytestBenchmarkWarning",
    "ignore::pytest_benchmark.logger.PytestBenchmarkWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
markers = [
    "asyncio: marks tests as async (deselect with '-m \"not asyncio\"')",
    "integration: marks tests as integration tests",
    "performance: marks tests as performance tests",
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
]

# ============ Coverage Configuration ============
[tool.coverage.run]
branch = true
source = ["src/symphra_container"]
omit = [
    "*/tests/*",
    "*/testing/*",
    "*/__main__.py",
    "*/integrations/*",  # 排除框架集成代码(需要安装可选依赖)
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if False:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@(abc\\.)?abstractmethod",
]
precision = 2
skip_covered = false
skip_empty = true
fail_under = 81.00  # 排除框架集成代码后的实际覆盖率目标 (当前: 81.55%)

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

# ============ Additional Tool Configurations ============

[tool.codespell]
skip = "*.txt,*.md,*.rst,.git,venv"
ignore-words-list = "wich"

[tool.pylint]
max-line-length = 120
disable = [
    "C0114",  # Missing module docstring
    "C0115",  # Missing class docstring
    "C0116",  # Missing function docstring
    "W0212",  # Access to protected member
    "R0913",  # Too many arguments
]
