{"config":{"lang":["en","zh"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"Symphra \u5bb9\u5668","text":"<p>\u4f01\u4e1a\u7ea7 Python \u4f9d\u8d56\u6ce8\u5165\u5bb9\u5668\u3002\u63d0\u4f9b\u9ad8\u6027\u80fd\u3001\u5f3a\u7c7b\u578b\u3001\u5f02\u6b65\u652f\u6301\u4e0e\u53ef\u6269\u5c55\u7684\u62e6\u622a\u5668\u4e0e\u4f5c\u7528\u57df\u7ba1\u7406\u3002</p> <ul> <li>4 \u79cd\u751f\u547d\u5468\u671f\uff1a<code>Singleton</code>\u3001<code>Transient</code>\u3001<code>Scoped</code>\u3001<code>Factory</code></li> <li>\u6df7\u5408\u670d\u52a1\u952e\uff1a\u7c7b\u578b\u4e0e\u5b57\u7b26\u4e32\u952e\u5747\u53ef</li> <li>\u5b8c\u6574\u7c7b\u578b\u63d0\u793a\u4e0e\u6cdb\u578b\u652f\u6301</li> <li>\u540c\u6b65/\u5f02\u6b65\u7edf\u4e00\u89e3\u6790</li> <li>\u62e6\u622a\u5668\u4e0e\u6027\u80fd\u6307\u6807</li> <li>\u5faa\u73af\u4f9d\u8d56\u68c0\u6d4b\u4e0e\u8bca\u65ad\u5de5\u5177</li> </ul>"},{"location":"#_1","title":"\u5feb\u901f\u4f53\u9a8c","text":"<pre><code>from symphra_container import Container, Lifetime\n\nclass UserRepo:\n    def get(self, uid: int) -&gt; dict:\n        return {\"id\": uid, \"name\": \"Alice\"}\n\nclass UserService:\n    def __init__(self, repo: UserRepo):\n        self.repo = repo\n    async def get_user(self, uid: int):\n        return self.repo.get(uid)\n\ncontainer = Container()\ncontainer.register(UserRepo, lifetime=Lifetime.SINGLETON)\ncontainer.register(UserService, lifetime=Lifetime.SCOPED)\n\n# \u89e3\u6790\u670d\u52a1\uff08\u652f\u6301\u540c\u6b65/\u5f02\u6b65\uff09\nservice = container.resolve(UserService)\n</code></pre>"},{"location":"#_2","title":"\u6587\u6863\u5bfc\u822a","text":"<ul> <li>\u4e2d\u6587\u6587\u6863\uff1a\u89c1\u5de6\u4fa7\u300c\u4e2d\u6587\u6587\u6863\u300d\u5206\u7ec4</li> <li>English docs: see the \"English Documentation\" group</li> </ul>"},{"location":"#_3","title":"\u529f\u80fd\u6982\u89c8","text":"<ul> <li>\u670d\u52a1\u6ce8\u518c\u4e0e\u89e3\u6790\uff0c\u81ea\u52a8\u4f9d\u8d56\u6ce8\u5165</li> <li>\u6cdb\u578b\u670d\u52a1\u952e\uff08\u5982 <code>Repository[User]</code> \u4e0e <code>Repository[Order]</code> \u533a\u5206\uff09</li> <li>\u4f5c\u7528\u57df\u7ba1\u7406\u4e0e\u8d44\u6e90\u91ca\u653e</li> <li>\u9519\u8bef\u5904\u7406\u4e0e\u8bca\u65ad\uff08\u4f9d\u8d56\u53ef\u89c6\u5316\u3001\u8c03\u8bd5\u8f93\u51fa\uff09</li> </ul>"},{"location":"#_4","title":"\u7248\u672c\u8bb0\u5f55","text":"<p>\u8bf7\u53c2\u89c1\u300c\u53d8\u66f4\u65e5\u5fd7\u300d\u3002\u5386\u53f2\u7248\u672c\u4ee5 Git \u63d0\u4ea4\u4e3a\u51c6\u3002</p>"},{"location":"en/best-practices/","title":"Best Practices","text":""},{"location":"en/best-practices/#keys","title":"Keys","text":"<ul> <li>Prefer type keys; use string keys for dynamic bindings only</li> <li>Use <code>GenericKey</code> to disambiguate generics</li> </ul>"},{"location":"en/best-practices/#lifetimes","title":"Lifetimes","text":"<ul> <li>Default to <code>TRANSIENT</code> unless stateful or expensive</li> <li>Use <code>SINGLETON</code> for stateless or heavy resources</li> <li>Use <code>SCOPED</code> for request/session-bound dependencies</li> </ul>"},{"location":"en/best-practices/#factories","title":"Factories","text":"<ul> <li>Use factories for resources needing explicit creation/teardown (DB connections)</li> </ul>"},{"location":"en/best-practices/#interceptors-diagnostics","title":"Interceptors &amp; Diagnostics","text":"<ul> <li>Add interceptors for logging, metrics, and error traces</li> <li>Export dependency graphs to review architecture</li> </ul>"},{"location":"en/best-practices/#testing","title":"Testing","text":"<ul> <li>Override registrations in tests via <code>override=True</code></li> <li>Provide fakes/stubs per scope</li> </ul>"},{"location":"en/best-practices/#web-frameworks","title":"Web Frameworks","text":"<ul> <li>Bind a scope per request (FastAPI/Flask/Django integrations)</li> </ul>"},{"location":"en/best-practices/#generics","title":"Generics","text":"<ul> <li>Register concrete implementations with <code>register_generic</code></li> </ul>"},{"location":"en/changelog/","title":"Changelog","text":"<p>Note: The canonical history is the Git log. This page highlights key changes.</p>"},{"location":"en/changelog/#010","title":"0.1.0","text":"<ul> <li>Initial release: container core, lifetime management, constructor injection</li> <li>Generic service keys and interceptor system</li> <li>Diagnostics and visualization tools</li> <li>FastAPI / Flask / Django integrations (optional)</li> </ul>"},{"location":"en/concepts/","title":"Core Concepts","text":""},{"location":"en/concepts/#lifetimes","title":"Lifetimes","text":"<ul> <li><code>SINGLETON</code>: single instance across the app</li> <li><code>TRANSIENT</code>: new instance per resolve</li> <li><code>SCOPED</code>: single instance per scope (e.g., per request)</li> <li><code>FACTORY</code>: created by a factory callable</li> </ul>"},{"location":"en/concepts/#service-keys","title":"Service Keys","text":"<ul> <li>Supports both type keys and string keys</li> <li>Prefer type keys for static safety; use strings for dynamic scenarios</li> </ul>"},{"location":"en/concepts/#constructor-injection","title":"Constructor Injection","text":"<ul> <li>Analyses <code>__init__</code> type hints and injects dependencies (<code>ConstructorInjector</code>)</li> <li>Supports <code>Optional[T]</code> and defaults</li> <li>Supports explicit <code>Injected</code> marker</li> </ul>"},{"location":"en/concepts/#scopes","title":"Scopes","text":"<ul> <li>Use <code>container.create_scope()</code> to create a scope</li> <li><code>SCOPED</code> services are unique within a scope</li> <li>Scope teardown releases resources</li> </ul>"},{"location":"en/concepts/#interceptors","title":"Interceptors","text":"<ul> <li>Hooks for before/after/error to log and collect metrics</li> <li>Can intercept resolution and lifecycle events</li> </ul>"},{"location":"en/concepts/#generics","title":"Generics","text":"<ul> <li><code>GenericKey</code> distinguishes type parameters</li> <li>Bind concrete implementations with <code>register_generic(container, Repository[User], UserRepository)</code></li> </ul>"},{"location":"en/concepts/#circular-dependency-detection","title":"Circular Dependency Detection","text":"<ul> <li>Detects cycles during resolution (<code>CircularDependencyDetector</code>)</li> <li>Diagnostic and visualization utilities help debugging</li> </ul>"},{"location":"en/concepts/#async-support","title":"Async Support","text":"<ul> <li>Unified sync/async resolution; uses <code>asyncio</code> internally when required</li> </ul>"},{"location":"en/concepts/#performance-diagnostics","title":"Performance &amp; Diagnostics","text":"<ul> <li>Built-in metrics and timers; diagnostic report and dependency graph export</li> </ul>"},{"location":"en/faq/","title":"FAQ","text":""},{"location":"en/faq/#servicenotfounderror-on-resolve","title":"ServiceNotFoundError on resolve","text":"<ul> <li>Ensure the type or generic key has been registered</li> <li>For <code>Optional[T]</code>, absence will not raise errors</li> </ul>"},{"location":"en/faq/#how-to-debug-circular-dependencies","title":"How to debug circular dependencies?","text":"<ul> <li>Use diagnostics and dependency graph visualization (<code>visualization</code> module)</li> </ul>"},{"location":"en/faq/#async-services","title":"Async services","text":"<ul> <li>Unified interface supports async; simply <code>await</code> methods as needed</li> </ul>"},{"location":"en/faq/#how-to-mock-in-tests","title":"How to mock in tests?","text":"<ul> <li>Use <code>register(..., override=True)</code> to replace existing registrations</li> </ul>"},{"location":"en/getting-started/","title":"Getting Started","text":"<p>This guide helps you get productive with Symphra Container in minutes.</p>"},{"location":"en/getting-started/#1-create-the-container-and-register-services","title":"1. Create the container and register services","text":"<pre><code>from symphra_container import Container, Lifetime\n\nclass EmailService:\n    def send(self, to: str, text: str):\n        print(f\"send to {to}: {text}\")\n\nclass UserService:\n    def __init__(self, email: EmailService):\n        self.email = email\n    def onboard(self, user_email: str):\n        self.email.send(user_email, \"Welcome!\")\n\ncontainer = Container()\ncontainer.register(EmailService, lifetime=Lifetime.SINGLETON)\ncontainer.register(UserService, lifetime=Lifetime.TRANSIENT)\n</code></pre>"},{"location":"en/getting-started/#2-resolve-services-automatic-di","title":"2. Resolve services (automatic DI)","text":"<pre><code>service = container.resolve(UserService)\nservice.onboard(\"alice@example.com\")\n</code></pre>"},{"location":"en/getting-started/#3-use-scopes-eg-per-web-request","title":"3. Use scopes (e.g., per web request)","text":"<pre><code>with container.create_scope() as scope:\n    scoped_service = scope.resolve(UserService)\n    scoped_service.onboard(\"bob@example.com\")\n</code></pre>"},{"location":"en/getting-started/#4-async-support","title":"4. Async support","text":"<pre><code>import asyncio\n\nclass AsyncRepo:\n    async def get(self, uid: int) -&gt; dict:\n        return {\"id\": uid}\n\nclass AsyncService:\n    def __init__(self, repo: AsyncRepo):\n        self.repo = repo\n    async def fetch(self, uid: int):\n        return await self.repo.get(uid)\n\ncontainer.register(AsyncRepo, lifetime=Lifetime.SINGLETON)\ncontainer.register(AsyncService, lifetime=Lifetime.SCOPED)\n\nasync def main():\n    s = container.resolve(AsyncService)\n    print(await s.fetch(1))\n\nasyncio.run(main())\n</code></pre>"},{"location":"en/getting-started/#5-generic-service-keys","title":"5. Generic service keys","text":"<pre><code>from typing import Generic, TypeVar\nfrom symphra_container.generics import register_generic\n\nT = TypeVar(\"T\")\n\nclass Repository(Generic[T]):\n    def get(self, id: int) -&gt; T: ...\n\nclass User: ...\nclass UserRepository(Repository[User]):\n    def get(self, id: int) -&gt; User: return User()\n\nregister_generic(container, Repository[User], UserRepository)\nuser_repo = container.resolve(Repository[User])\n</code></pre>"},{"location":"en/getting-started/#next-steps","title":"Next steps","text":"<ul> <li>Read \"Installation\" and \"Core Concepts\"</li> <li>See \"API Reference\" for complete interfaces</li> </ul>"},{"location":"en/installation/","title":"Installation","text":"<p>Symphra Container supports pure Python environments with optional framework integrations.</p>"},{"location":"en/installation/#core-library","title":"Core library","text":"<pre><code>pip install symphra-container\n</code></pre>"},{"location":"en/installation/#optional-integrations","title":"Optional integrations","text":"<p>Install extras as needed: <pre><code># FastAPI\npip install symphra-container[fastapi]\n\n# Flask\npip install symphra-container[flask]\n\n# Django\npip install symphra-container[django]\n\n# All integrations\npip install symphra-container[all]\n</code></pre></p>"},{"location":"en/installation/#python-requirements","title":"Python requirements","text":"<ul> <li>Python 3.10+ (3.11/3.12 recommended)</li> </ul>"},{"location":"en/installation/#dependencies","title":"Dependencies","text":"<ul> <li>The core library has no mandatory third-party dependencies</li> <li>Integration modules import lazily and provide friendly errors if frameworks are missing</li> </ul>"},{"location":"en/installation/#verify","title":"Verify","text":"<pre><code>import symphra_container\nprint(symphra_container.__version__)\n</code></pre>"},{"location":"en/testing-guide/","title":"Testing Guide","text":""},{"location":"en/testing-guide/#overview","title":"Overview","text":"<p>Symphra Container follows these testing standards:</p> <ul> <li>Unit test coverage: &gt;= 90%</li> <li>Integration tests: cover framework integrations</li> <li>Performance tests: benchmarks for critical operations</li> <li>Tooling: pytest + pytest-asyncio + pytest-cov</li> </ul>"},{"location":"en/testing-guide/#test-layout","title":"Test Layout","text":"<pre><code>tests/\n\u251c\u2500\u2500 unit/                  # Unit tests\n\u2502   \u251c\u2500\u2500 test_container.py  # Container basics\n\u2502   \u251c\u2500\u2500 test_lifetimes.py  # Lifetime management\n\u2502   \u251c\u2500\u2500 test_injection.py  # Dependency injection\n\u2502   \u251c\u2500\u2500 test_decorators.py # Decorators\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 integration/           # Integration tests\n\u2502   \u251c\u2500\u2500 test_fastapi.py    # FastAPI\n\u2502   \u251c\u2500\u2500 test_flask.py      # Flask\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 performance/           # Performance tests\n\u2502   \u251c\u2500\u2500 test_resolution_speed.py\n\u2502   \u2514\u2500\u2500 ...\n\u2514\u2500\u2500 conftest.py            # Shared fixtures and config\n</code></pre>"},{"location":"en/testing-guide/#quick-start","title":"Quick Start","text":"<ul> <li>Run unit tests: <code>uv run pytest -q tests/unit</code></li> <li>Full test suite with coverage: <code>uv run pytest -q --cov=symphra_container --cov-report=xml</code></li> <li>Specific test file: <code>uv run pytest tests/unit/test_container.py -q</code></li> </ul>"},{"location":"en/testing-guide/#examples","title":"Examples","text":""},{"location":"en/testing-guide/#container-basics","title":"Container basics","text":"<pre><code>import pytest\nfrom symphra_container import Container, Lifetime\n\nclass Service:\n    pass\n\ndef test_lifetime_singleton():\n    container = Container()\n    container.register(Service, lifetime=Lifetime.SINGLETON)\n    s1 = container.resolve(Service)\n    s2 = container.resolve(Service)\n    assert s1 is s2\n</code></pre>"},{"location":"en/testing-guide/#async-factory","title":"Async factory","text":"<pre><code>import pytest\nfrom symphra_container import Container\n\n@pytest.mark.asyncio\nasync def test_async_factory():\n    container = Container()\n\n    async def create_service():\n        return \"async_service\"\n\n    container.register_async_factory(\"service\", create_service)\n    result = await container.resolve_async(\"service\")\n    assert result == \"async_service\"\n</code></pre>"},{"location":"en/testing-guide/#integration-fastapi","title":"Integration (FastAPI)","text":"<pre><code>from fastapi import FastAPI\nfrom fastapi.testclient import TestClient\nfrom symphra_container import Container, Injected\nfrom symphra_container.integrations.fastapi import DIMiddleware\n\napp = FastAPI()\ncontainer = Container()\n\nclass UserService:\n    def get_user(self, user_id: int):\n        return {\"id\": user_id, \"name\": \"Test User\"}\n\ncontainer.register(UserService)\napp.add_middleware(DIMiddleware, container=container)\n\n@app.get(\"/users/{user_id}\")\ndef get_user(user_id: int, service: \"UserService\" = Injected):\n    return service.get_user(user_id)\n\nclient = TestClient(app)\nresp = client.get(\"/users/1\")\nassert resp.status_code == 200\nassert resp.json()[\"id\"] == 1\n</code></pre>"},{"location":"en/guaids/container/","title":"Container","text":""},{"location":"en/guaids/container/#symphra_container.container.Container","title":"<code>symphra_container.container.Container</code>","text":"<p>\u4f9d\u8d56\u6ce8\u5165\u5bb9\u5668.</p> <p>\u6838\u5fc3\u5bb9\u5668\u5b9e\u73b0,\u63d0\u4f9b\u4e86\u5b8c\u6574\u7684\u4f9d\u8d56\u6ce8\u5165\u529f\u80fd: - \u670d\u52a1\u6ce8\u518c\u548c\u89e3\u6790 - 4 \u79cd\u751f\u547d\u5468\u671f\u7ba1\u7406 - \u4f9d\u8d56\u6ce8\u5165 - \u62e6\u622a\u5668\u652f\u6301 - \u4f5c\u7528\u57df\u7ba1\u7406 - \u5faa\u73af\u4f9d\u8d56\u68c0\u6d4b</p> <p>\u5c5e\u6027\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 <code>_registrations</code> <code>dict[ServiceKey, ServiceRegistration]</code> <p>\u670d\u52a1\u6ce8\u518c\u5b57\u5178</p> <code>_lifetime_manager</code> <p>\u751f\u547d\u5468\u671f\u7ba1\u7406\u5668</p> <code>_interceptors</code> <code>dict[str, list[Any]]</code> <p>\u62e6\u622a\u5668\u5b57\u5178</p> <code>_circular_detector</code> <p>\u5faa\u73af\u4f9d\u8d56\u68c0\u6d4b\u5668</p> <code>_performance_metrics</code> <p>\u6027\u80fd\u6307\u6807\u6536\u96c6\u5668</p> <code>_enable_performance_tracking</code> <p>\u662f\u5426\u542f\u7528\u6027\u80fd\u8ddf\u8e2a</p> Source code in <code>src/symphra_container/container.py</code> <pre><code>class Container:\n    \"\"\"\u4f9d\u8d56\u6ce8\u5165\u5bb9\u5668.\n\n    \u6838\u5fc3\u5bb9\u5668\u5b9e\u73b0,\u63d0\u4f9b\u4e86\u5b8c\u6574\u7684\u4f9d\u8d56\u6ce8\u5165\u529f\u80fd:\n    - \u670d\u52a1\u6ce8\u518c\u548c\u89e3\u6790\n    - 4 \u79cd\u751f\u547d\u5468\u671f\u7ba1\u7406\n    - \u4f9d\u8d56\u6ce8\u5165\n    - \u62e6\u622a\u5668\u652f\u6301\n    - \u4f5c\u7528\u57df\u7ba1\u7406\n    - \u5faa\u73af\u4f9d\u8d56\u68c0\u6d4b\n\n    Attributes:\n        _registrations: \u670d\u52a1\u6ce8\u518c\u5b57\u5178\n        _lifetime_manager: \u751f\u547d\u5468\u671f\u7ba1\u7406\u5668\n        _interceptors: \u62e6\u622a\u5668\u5b57\u5178\n        _circular_detector: \u5faa\u73af\u4f9d\u8d56\u68c0\u6d4b\u5668\n        _performance_metrics: \u6027\u80fd\u6307\u6807\u6536\u96c6\u5668\n        _enable_performance_tracking: \u662f\u5426\u542f\u7528\u6027\u80fd\u8ddf\u8e2a\n    \"\"\"\n\n    def __init__(\n        self,\n        enable_auto_wiring: bool = False,\n        strict_mode: bool = False,\n        enable_performance_tracking: bool = False,\n    ) -&gt; None:\n        \"\"\"\u521d\u59cb\u5316\u5bb9\u5668.\n\n        Args:\n            enable_auto_wiring: \u662f\u5426\u542f\u7528\u81ea\u52a8\u88c5\u914d\n            strict_mode: \u662f\u5426\u542f\u7528\u4e25\u683c\u6a21\u5f0f\n            enable_performance_tracking: \u662f\u5426\u542f\u7528\u6027\u80fd\u8ddf\u8e2a\n\n        Raises:\n            InvalidConfigurationError: \u914d\u7f6e\u65e0\u6548\u65f6\n        \"\"\"\n        # \u68c0\u67e5\u914d\u7f6e\u6709\u6548\u6027\n        if enable_auto_wiring and strict_mode:\n            msg = \"Cannot enable both auto_wiring and strict_mode simultaneously\"\n            raise InvalidConfigurationError(\n                msg,\n            )\n\n        self._registrations: dict[ServiceKey, ServiceRegistration] = {}\n        self._lifetime_manager = LifetimeManager()\n        self._interceptors: dict[str, list[Any]] = {\n            \"before\": [],\n            \"after\": [],\n            \"error\": [],\n        }\n        self._circular_detector = CircularDependencyDetector()\n        self._performance_metrics = PerformanceMetrics()\n        self._enable_performance_tracking = enable_performance_tracking\n        self.enable_auto_wiring = enable_auto_wiring\n        self.strict_mode = strict_mode\n        # \u522b\u540d\u6620\u5c04: \u522b\u540d -&gt; \u5b9e\u9645\u952e\n        self._aliases: dict[str, ServiceKey] = {}\n\n    # ===================== \u6ce8\u518c\u65b9\u6cd5 =====================\n\n    def register(\n        self,\n        service_type: type,\n        *,\n        key: ServiceKey | None = None,\n        lifetime: Lifetime = Lifetime.TRANSIENT,\n        override: bool = False,\n    ) -&gt; Container:\n        \"\"\"\u6ce8\u518c\u4e00\u4e2a\u670d\u52a1.\n\n        \u6700\u57fa\u7840\u7684\u6ce8\u518c\u65b9\u6cd5,\u4f7f\u7528\u670d\u52a1\u7c7b\u672c\u8eab\u521b\u5efa\u5b9e\u4f8b.\n\n        Args:\n            service_type: \u670d\u52a1\u7c7b\u578b\n            key: \u670d\u52a1\u952e(\u9ed8\u8ba4\u4e3a service_type)\n            lifetime: \u751f\u547d\u5468\u671f(\u9ed8\u8ba4 TRANSIENT)\n            override: \u662f\u5426\u8986\u76d6\u5df2\u5b58\u5728\u7684\u670d\u52a1\n\n        Returns:\n            \u5bb9\u5668\u5b9e\u4f8b(\u652f\u6301\u94fe\u5f0f\u8c03\u7528)\n\n        Raises:\n            RegistrationError: \u6ce8\u518c\u5931\u8d25\u65f6\n\n        Examples:\n            &gt;&gt;&gt; container = Container()\n            &gt;&gt;&gt; container.register(UserService)\n            &gt;&gt;&gt; container.register(DatabaseService, lifetime=Lifetime.SINGLETON)\n            &gt;&gt;&gt; service = container.resolve(UserService)\n        \"\"\"\n        # \u5982\u679c\u670d\u52a1\u7c7b\u578b\u5e26\u6709\u88c5\u9970\u5668\u5143\u6570\u636e,\u4f18\u5148\u4f7f\u7528\u5143\u6570\u636e\u4e2d\u7684\u952e\u4e0e\u751f\u547d\u5468\u671f\n        metadata = get_service_metadata(service_type)\n        decorated_override = False\n        if metadata is not None:\n            # \u4f7f\u7528\u88c5\u9970\u5668\u63d0\u4f9b\u7684 key (\u5982\u672a\u663e\u5f0f\u4f20\u5165)\n            key = key or metadata.key or service_type\n            # \u4f7f\u7528\u88c5\u9970\u5668\u63d0\u4f9b\u7684\u751f\u547d\u5468\u671f\n            lifetime = metadata.lifetime\n            # \u5bf9\u88c5\u9970\u8fc7\u7684\u670d\u52a1\u9ed8\u8ba4\u5141\u8bb8\u91cd\u590d\u6ce8\u518c(\u8986\u76d6)\n            decorated_override = True\n        else:\n            key = key or service_type\n\n        # \u68c0\u67e5\u662f\u5426\u5df2\u6ce8\u518c\n        if key in self._registrations and not (override or decorated_override):\n            raise RegistrationError(\n                key,\n                \"Service already registered. Use override=True to replace it.\",\n            )\n\n        registration = ServiceRegistration(\n            key=key,\n            service_type=service_type,\n            factory=service_type,\n            lifetime=lifetime,\n            override=override or decorated_override,\n        )\n        self._registrations[key] = registration\n\n        return self\n\n    def register_instance(\n        self,\n        key: ServiceKey,\n        instance: Any,\n        override: bool = False,\n    ) -&gt; Container:\n        \"\"\"\u6ce8\u518c\u4e00\u4e2a\u5355\u4f8b\u5b9e\u4f8b.\n\n        \u76f4\u63a5\u6ce8\u518c\u4e00\u4e2a\u5df2\u7ecf\u521b\u5efa\u7684\u5b9e\u4f8b\u4f5c\u4e3a\u5355\u4f8b.\n\n        Args:\n            key: \u670d\u52a1\u952e\n            instance: \u670d\u52a1\u5b9e\u4f8b\n            override: \u662f\u5426\u8986\u76d6\u5df2\u5b58\u5728\u7684\u670d\u52a1\n\n        Returns:\n            \u5bb9\u5668\u5b9e\u4f8b(\u652f\u6301\u94fe\u5f0f\u8c03\u7528)\n\n        Raises:\n            RegistrationError: \u6ce8\u518c\u5931\u8d25\u65f6\n\n        Examples:\n            &gt;&gt;&gt; config = Config()\n            &gt;&gt;&gt; container.register_instance(\"config\", config)\n            &gt;&gt;&gt; resolved_config = container.resolve(\"config\")\n            &gt;&gt;&gt; assert resolved_config is config\n        \"\"\"\n        if key in self._registrations and not override:\n            raise RegistrationError(\n                key,\n                \"Service already registered. Use override=True to replace it.\",\n            )\n\n        # \u521b\u5efa\u4e00\u4e2a\u8fd4\u56de\u8be5\u5b9e\u4f8b\u7684\u5de5\u5382\n        def factory() -&gt; Any:\n            return instance\n\n        registration = ServiceRegistration(\n            key=key,\n            service_type=type(instance),\n            factory=factory,\n            lifetime=Lifetime.SINGLETON,\n            override=override,\n        )\n        self._registrations[key] = registration\n\n        # \u76f4\u63a5\u5b58\u50a8\u5230\u5355\u4f8b\u5b58\u50a8\n        self._lifetime_manager.set_instance(key, instance, Lifetime.SINGLETON)\n\n        return self\n\n    def register_factory(\n        self,\n        key: ServiceKey,\n        factory: Callable[..., T],\n        *,\n        service_type: type | None = None,\n        lifetime: Lifetime = Lifetime.TRANSIENT,\n        override: bool = False,\n    ) -&gt; Container:\n        \"\"\"\u6ce8\u518c\u4e00\u4e2a\u5de5\u5382\u51fd\u6570.\n\n        \u4f7f\u7528\u5de5\u5382\u51fd\u6570\u6765\u521b\u5efa\u670d\u52a1\u5b9e\u4f8b.\n\n        Args:\n            key: \u670d\u52a1\u952e\n            factory: \u5de5\u5382\u51fd\u6570\n            service_type: \u670d\u52a1\u7c7b\u578b(\u9ed8\u8ba4\u4e3a\u5de5\u5382\u7684\u8fd4\u56de\u7c7b\u578b)\n            lifetime: \u751f\u547d\u5468\u671f\n            override: \u662f\u5426\u8986\u76d6\u5df2\u5b58\u5728\u7684\u670d\u52a1\n\n        Returns:\n            \u5bb9\u5668\u5b9e\u4f8b(\u652f\u6301\u94fe\u5f0f\u8c03\u7528)\n\n        Raises:\n            RegistrationError: \u6ce8\u518c\u5931\u8d25\u65f6\n\n        Examples:\n            &gt;&gt;&gt; def create_db() -&gt; Database:\n            ...     db = Database()\n            ...     db.connect()\n            ...     return db\n            &gt;&gt;&gt; container.register_factory(\n            ...     \"database\",\n            ...     create_db,\n            ...     lifetime=Lifetime.SINGLETON\n            ... )\n        \"\"\"\n        if key in self._registrations and not override:\n            raise RegistrationError(\n                key,\n                \"Service already registered. Use override=True to replace it.\",\n            )\n\n        service_type = service_type or type(None)\n\n        registration = ServiceRegistration(\n            key=key,\n            service_type=service_type,\n            factory=factory,\n            lifetime=lifetime,\n            override=override,\n        )\n        self._registrations[key] = registration\n\n        return self\n\n    def register_async_factory(\n        self,\n        key: ServiceKey,\n        factory: Callable[..., T],\n        *,\n        service_type: type | None = None,\n        lifetime: Lifetime = Lifetime.TRANSIENT,\n        override: bool = False,\n    ) -&gt; Container:\n        \"\"\"\u6ce8\u518c\u4e00\u4e2a\u5f02\u6b65\u5de5\u5382\u51fd\u6570.\n\n        \u26a0\ufe0f DEPRECATED: \u6b64\u65b9\u6cd5\u5df2\u5e9f\u5f03,\u8bf7\u4f7f\u7528 register_factory() \u4ee3\u66ff\u3002\n        Container \u73b0\u5728\u81ea\u52a8\u68c0\u6d4b\u5de5\u5382\u51fd\u6570\u662f\u5426\u4e3a\u5f02\u6b65\u3002\n\n        Args:\n            key: \u670d\u52a1\u952e\n            factory: \u5f02\u6b65\u5de5\u5382\u51fd\u6570\n            service_type: \u670d\u52a1\u7c7b\u578b\n            lifetime: \u751f\u547d\u5468\u671f\n            override: \u662f\u5426\u8986\u76d6\u5df2\u5b58\u5728\u7684\u670d\u52a1\n\n        Returns:\n            \u5bb9\u5668\u5b9e\u4f8b(\u652f\u6301\u94fe\u5f0f\u8c03\u7528)\n        \"\"\"\n        # \u76f4\u63a5\u8c03\u7528 register_factory,\u5b83\u4f1a\u81ea\u52a8\u68c0\u6d4b\u5f02\u6b65\n        return self.register_factory(\n            key=key,\n            factory=factory,\n            service_type=service_type,\n            lifetime=lifetime,\n            override=override,\n        )\n\n    # ===================== \u89e3\u6790\u65b9\u6cd5 =====================\n\n    def _check_cached_instance(\n        self,\n        key: ServiceKey,\n        registration: ServiceRegistration,\n    ) -&gt; tuple[Any | None, bool]:\n        \"\"\"\u68c0\u67e5\u7f13\u5b58\u7684\u5b9e\u4f8b.\n\n        \u6027\u80fd\u4f18\u5316: \u5355\u4f8b\u8bbf\u95ee\u662f\u6700\u9891\u7e41\u7684\u64cd\u4f5c,\u4f18\u5316\u6b64\u8def\u5f84.\n\n        Args:\n            key: \u670d\u52a1\u952e\n            registration: \u670d\u52a1\u6ce8\u518c\u4fe1\u606f\n\n        Returns:\n            (\u5b9e\u4f8b, \u662f\u5426\u547d\u4e2d\u7f13\u5b58) \u5143\u7ec4\n        \"\"\"\n        # \u6027\u80fd\u4f18\u5316: \u5355\u4f8b\u662f\u6700\u5e38\u89c1\u7684\u60c5\u51b5,\u76f4\u63a5\u8bbf\u95ee\u5b57\u5178\u907f\u514d\u51fd\u6570\u8c03\u7528\u5f00\u9500\n        if registration.lifetime == Lifetime.SINGLETON:\n            # \u76f4\u63a5\u4ece\u5355\u4f8b\u5b58\u50a8\u4e2d\u83b7\u53d6,\u907f\u514d get_instance \u7684\u989d\u5916\u5f00\u9500\n            cached = self._lifetime_manager._singleton_store.get(key)\n            if cached is not None:\n                return cached, True\n\n        elif registration.lifetime == Lifetime.SCOPED:\n            if self._lifetime_manager.has_active_scope():\n                scope = self._lifetime_manager.current_scope\n                if scope is not None:\n                    cached = scope.get(key)\n                    if cached is not None:\n                        return cached, True\n\n        return None, False\n\n    async def _check_cached_instance_async(\n        self,\n        key: ServiceKey,\n        registration: ServiceRegistration,\n    ) -&gt; tuple[Any | None, bool]:\n        \"\"\"\u5f02\u6b65\u68c0\u67e5\u7f13\u5b58\u7684\u5b9e\u4f8b.\n\n        Args:\n            key: \u670d\u52a1\u952e\n            registration: \u670d\u52a1\u6ce8\u518c\u4fe1\u606f\n\n        Returns:\n            (\u5b9e\u4f8b, \u662f\u5426\u547d\u4e2d\u7f13\u5b58) \u5143\u7ec4\n        \"\"\"\n        if registration.lifetime == Lifetime.SINGLETON:\n            # \u68c0\u67e5\u662f\u5426\u5df2\u6709\u7f13\u5b58\n            cached = self._lifetime_manager._singleton_store.get(key)\n            if cached is not None:\n                return cached, True\n            # \u6ca1\u6709\u7f13\u5b58,\u8fd4\u56de None,\u7531\u8c03\u7528\u8005\u521b\u5efa\u5e76\u7f13\u5b58\n            return None, False\n\n        if registration.lifetime == Lifetime.SCOPED and self._lifetime_manager.has_active_scope():\n            scope = self._lifetime_manager.current_scope\n            if scope is not None:\n                cached = scope.get(key)\n                if cached is not None:\n                    return cached, True\n\n        return None, False\n\n    def _run_before_interceptors(self, key: ServiceKey, registration: ServiceRegistration) -&gt; None:\n        \"\"\"\u8fd0\u884c\u524d\u7f6e\u62e6\u622a\u5668.\n\n        Args:\n            key: \u670d\u52a1\u952e\n            registration: \u670d\u52a1\u6ce8\u518c\u4fe1\u606f\n\n        Raises:\n            ResolutionError: \u62e6\u622a\u5668\u62d2\u7edd\u89e3\u6790\u65f6\n        \"\"\"\n        for interceptor in self._interceptors[\"before\"]:\n            if not interceptor(key, registration):\n                raise ResolutionError(key, Exception(\"\u524d\u7f6e\u62e6\u622a\u5668\u62d2\u7edd\u4e86\u89e3\u6790\"))\n\n    def _run_after_interceptors(self, key: ServiceKey, instance: Any) -&gt; Any:\n        \"\"\"\u8fd0\u884c\u540e\u7f6e\u62e6\u622a\u5668.\n\n        Args:\n            key: \u670d\u52a1\u952e\n            instance: \u670d\u52a1\u5b9e\u4f8b\n\n        Returns:\n            \u5904\u7406\u540e\u7684\u5b9e\u4f8b\n        \"\"\"\n        result_instance = instance\n        for interceptor in self._interceptors[\"after\"]:\n            result = interceptor(key, result_instance)\n            if result is not None:\n                result_instance = result\n        return result_instance\n\n    def _run_error_interceptors(self, key: ServiceKey, error: Exception) -&gt; None:\n        \"\"\"\u8fd0\u884c\u9519\u8bef\u62e6\u622a\u5668.\n\n        Args:\n            key: \u670d\u52a1\u952e\n            error: \u5f02\u5e38\u5bf9\u8c61\n        \"\"\"\n        for interceptor in self._interceptors[\"error\"]:\n            interceptor(key, error)\n\n    @overload\n    def resolve(self, key: type[T]) -&gt; T: ...\n\n    @overload\n    def resolve(self, key: str) -&gt; Any: ...\n\n    def resolve(self, key: ServiceKey) -&gt; Any:\n        \"\"\"\u89e3\u6790\u670d\u52a1\u5b9e\u4f8b.\n\n        \u6839\u636e\u670d\u52a1\u952e\u4ece\u5bb9\u5668\u4e2d\u83b7\u53d6\u670d\u52a1\u5b9e\u4f8b. \u8fd9\u662f\u6574\u4e2a DI \u5bb9\u5668\u6700\u6838\u5fc3\u7684\u65b9\u6cd5,\n        \u5305\u542b\u4e86\u5b8c\u6574\u7684\u4f9d\u8d56\u89e3\u6790\u3001\u751f\u547d\u5468\u671f\u7ba1\u7406\u3001\u62e6\u622a\u5668\u6267\u884c\u548c\u6027\u80fd\u8ffd\u8e2a\u903b\u8f91.\n\n        \u5de5\u4f5c\u6d41\u7a0b:\n        1. \u9a8c\u8bc1\u670d\u52a1\u5df2\u6ce8\u518c\n        2. \u6267\u884c\u524d\u7f6e\u62e6\u622a\u5668(\u53ef\u80fd\u62d2\u7edd\u89e3\u6790)\n        3. \u521d\u59cb\u5316\u6027\u80fd\u8ffd\u8e2a(\u5982\u679c\u542f\u7528)\n        4. \u5faa\u73af\u4f9d\u8d56\u68c0\u6d4b\n        5. \u68c0\u67e5\u7f13\u5b58\u5b9e\u4f8b(Singleton/Scoped)\n        6. \u521b\u5efa\u65b0\u5b9e\u4f8b(\u9012\u5f52\u89e3\u6790\u4f9d\u8d56)\n        7. \u5b58\u50a8\u5b9e\u4f8b\u5230\u751f\u547d\u5468\u671f\u7ba1\u7406\u5668\n        8. \u6267\u884c\u540e\u7f6e\u62e6\u622a\u5668\u5e76\u8fd4\u56de\u6700\u7ec8\u5b9e\u4f8b\n\n        Args:\n            key: \u670d\u52a1\u952e(\u53ef\u4ee5\u662f\u7c7b\u578b\u6216\u5b57\u7b26\u4e32)\n\n        Returns:\n            \u89e3\u6790\u5f97\u5230\u7684\u670d\u52a1\u5b9e\u4f8b\n\n        Raises:\n            ServiceNotFoundError: \u670d\u52a1\u672a\u6ce8\u518c\n            CircularDependencyError: \u68c0\u6d4b\u5230\u5faa\u73af\u4f9d\u8d56\n            ResolutionError: \u89e3\u6790\u5931\u8d25(\u4f9d\u8d56\u6ce8\u5165\u9519\u8bef\u3001\u5de5\u5382\u5f02\u5e38\u7b49)\n\n        Examples:\n            &gt;&gt;&gt; container.register(UserService)\n            &gt;&gt;&gt; service = container.resolve(UserService)\n            &gt;&gt;&gt; assert isinstance(service, UserService)\n        \"\"\"\n        # \u6b65\u9aa4 0: \u68c0\u67e5\u662f\u5426\u4e3a\u522b\u540d, \u5982\u679c\u662f\u5219\u8f6c\u6362\u4e3a\u5b9e\u9645\u952e\n        if key in self._aliases:\n            key = self._aliases[key]\n\n        # Handle Lazy types\n        origin = get_origin(key)\n        if origin == LazyTypeMarker:\n            args = get_args(key)\n            if args:\n                inner_key = args[0]\n                return Lazy(inner_key, _resolver=self.resolve)\n            else:\n                raise ResolutionError(key, Exception(\"Lazy type must have arguments\"))\n        if key not in self._registrations:\n            available_services = list(self._registrations.keys())\n            raise ServiceNotFoundError(key, available_services)\n\n        registration = self._registrations[key]\n\n        # \u68c0\u67e5\u662f\u5426\u5c1d\u8bd5\u540c\u6b65\u89e3\u6790\u5f02\u6b65\u670d\u52a1\n        if registration.is_async:\n            raise ResolutionError(\n                key,\n                Exception(f\"Service {key} has async factory, use resolve_async() instead of resolve()\"),\n            )\n\n        # \u6b65\u9aa4 2: \u6267\u884c\u524d\u7f6e\u62e6\u622a\u5668(\u53ef\u80fd\u62d2\u7edd\u89e3\u6790)\n        self._run_before_interceptors(key, registration)\n\n        # \u6b65\u9aa4 3: \u521d\u59cb\u5316\u6027\u80fd\u8ffd\u8e2a(\u5982\u679c\u542f\u7528)\n        timer = ResolutionTimer() if self._enable_performance_tracking else None\n        cache_hit = False\n\n        try:\n            # \u5f00\u59cb\u8ba1\u65f6\n            if timer:\n                timer.__enter__()\n\n            # \u6b65\u9aa4 4: \u5faa\u73af\u4f9d\u8d56\u68c0\u6d4b - \u8fdb\u5165\u89e3\u6790\u5806\u6808\n            self._circular_detector.enter_resolution(key)\n\n            # \u6b65\u9aa4 5: \u68c0\u67e5\u662f\u5426\u6709\u7f13\u5b58\u5b9e\u4f8b(Singleton/Scoped)\n            cached, cache_hit = self._check_cached_instance(key, registration)\n            if cached is not None:\n                return cached\n\n            # \u6b65\u9aa4 6: \u521b\u5efa\u65b0\u5b9e\u4f8b(\u9012\u5f52\u89e3\u6790\u4f9d\u8d56)\n            instance = self._create_instance(registration)\n\n            # \u6b65\u9aa4 7: \u5b58\u50a8\u5b9e\u4f8b\u5230\u751f\u547d\u5468\u671f\u7ba1\u7406\u5668\n            self._lifetime_manager.set_instance(key, instance, registration.lifetime)\n\n            # \u6b65\u9aa4 8: \u6267\u884c\u540e\u7f6e\u62e6\u622a\u5668\u5e76\u8fd4\u56de\u6700\u7ec8\u5b9e\u4f8b\n            return self._run_after_interceptors(key, instance)\n\n        except ContainerException:\n            # \u5bb9\u5668\u5f02\u5e38\u76f4\u63a5\u91cd\u65b0\u629b\u51fa\n            raise\n        except Exception as e:\n            # \u5176\u4ed6\u5f02\u5e38: \u901a\u77e5\u9519\u8bef\u62e6\u622a\u5668\u5e76\u5305\u88c5\u4e3a ResolutionError\n            self._run_error_interceptors(key, e)\n            raise ResolutionError(key, e) from e\n        finally:\n            # \u6e05\u7406\u5de5\u4f5c: \u4ece\u5faa\u73af\u68c0\u6d4b\u5806\u6808\u4e2d\u79fb\u9664\n            self._circular_detector.exit_resolution(key)\n\n            # \u8bb0\u5f55\u6027\u80fd\u6307\u6807(\u5982\u679c\u542f\u7528\u8ffd\u8e2a)\n            if timer:\n                timer.__exit__(None, None, None)\n                self._performance_metrics.record_resolution(\n                    key,\n                    timer.elapsed_time,\n                    cache_hit=cache_hit,\n                )\n\n    @overload\n    async def resolve_async(self, key: type[T]) -&gt; T: ...\n\n    @overload\n    async def resolve_async(self, key: str) -&gt; Any: ...\n\n    async def resolve_async(self, key: ServiceKey) -&gt; Any:\n        \"\"\"\u5f02\u6b65\u89e3\u6790\u670d\u52a1\u5b9e\u4f8b.\n\n        \u4e0e resolve() \u7c7b\u4f3c,\u4f46\u652f\u6301\u5f02\u6b65\u5de5\u5382\u51fd\u6570\u548c\u5f02\u6b65\u4f9d\u8d56\u89e3\u6790.\n        \u53ef\u4ee5\u89e3\u6790\u540c\u6b65\u670d\u52a1(\u81ea\u52a8\u9002\u914d)\u548c\u5f02\u6b65\u670d\u52a1.\n\n        \u5de5\u4f5c\u6d41\u7a0b:\n        1. \u9a8c\u8bc1\u670d\u52a1\u5df2\u6ce8\u518c\n        2. \u6267\u884c\u524d\u7f6e\u62e6\u622a\u5668\n        3. \u521d\u59cb\u5316\u6027\u80fd\u8ffd\u8e2a\n        4. \u5faa\u73af\u4f9d\u8d56\u68c0\u6d4b\n        5. \u68c0\u67e5\u7f13\u5b58\u5b9e\u4f8b\n        6. \u521b\u5efa\u65b0\u5b9e\u4f8b(\u652f\u6301\u5f02\u6b65factory\u548c\u4f9d\u8d56)\n        7. \u5b58\u50a8\u5b9e\u4f8b\u5230\u751f\u547d\u5468\u671f\u7ba1\u7406\u5668\n        8. \u6267\u884c\u540e\u7f6e\u62e6\u622a\u5668\u5e76\u8fd4\u56de\u5b9e\u4f8b\n\n        Args:\n            key: \u670d\u52a1\u952e(\u53ef\u4ee5\u662f\u7c7b\u578b\u6216\u5b57\u7b26\u4e32)\n\n        Returns:\n            \u89e3\u6790\u5f97\u5230\u7684\u670d\u52a1\u5b9e\u4f8b\n\n        Raises:\n            ServiceNotFoundError: \u670d\u52a1\u672a\u6ce8\u518c\n            CircularDependencyError: \u68c0\u6d4b\u5230\u5faa\u73af\u4f9d\u8d56\n            ResolutionError: \u89e3\u6790\u5931\u8d25\n\n        Examples:\n            &gt;&gt;&gt; container.register(AsyncService, factory=create_async_service)\n            &gt;&gt;&gt; service = await container.resolve_async(AsyncService)\n            &gt;&gt;&gt; assert isinstance(service, AsyncService)\n        \"\"\"\n        # \u6b65\u9aa4 0: \u68c0\u67e5\u662f\u5426\u4e3a\u522b\u540d\n        if key in self._aliases:\n            key = self._aliases[key]\n\n        # Handle Lazy types\n        origin = get_origin(key)\n        if origin == LazyTypeMarker:\n            args = get_args(key)\n            if args:\n                inner_key = args[0]\n                return Lazy(inner_key, _resolver=self.resolve_async)\n            else:\n                raise ResolutionError(key, Exception(\"Lazy type must have arguments\"))\n\n        # \u6b65\u9aa4 1: \u9a8c\u8bc1\u670d\u52a1\u5df2\u6ce8\u518c\n        if key not in self._registrations:\n            available_services = list(self._registrations.keys())\n            raise ServiceNotFoundError(key, available_services)\n\n        registration = self._registrations[key]\n\n        # \u6b65\u9aa4 2: \u6267\u884c\u524d\u7f6e\u62e6\u622a\u5668\n        await self._run_before_interceptors_async(key, registration)\n\n        # \u6b65\u9aa4 3: \u521d\u59cb\u5316\u6027\u80fd\u8ffd\u8e2a\n        timer = ResolutionTimer() if self._enable_performance_tracking else None\n        cache_hit = False\n\n        try:\n            if timer:\n                timer.__enter__()\n\n            # \u6b65\u9aa4 4: \u5faa\u73af\u4f9d\u8d56\u68c0\u6d4b\n            self._circular_detector.enter_resolution(key)\n\n            # \u6b65\u9aa4 5: \u68c0\u67e5\u7f13\u5b58\u5b9e\u4f8b(\u5f02\u6b65\u7248\u672c)\n            cached, cache_hit = await self._check_cached_instance_async(key, registration)\n            if cached is not None:\n                return cached\n\n            # \u6b65\u9aa4 6: \u521b\u5efa\u65b0\u5b9e\u4f8b(\u5f02\u6b65)\n            instance = await self._create_instance_async(registration)\n\n            # \u6b65\u9aa4 7: \u5b58\u50a8\u5b9e\u4f8b\n            self._lifetime_manager.set_instance(key, instance, registration.lifetime)\n\n            # \u6b65\u9aa4 8: \u6267\u884c\u540e\u7f6e\u62e6\u622a\u5668\n            return await self._run_after_interceptors_async(key, instance)\n\n        except ContainerException:\n            raise\n        except Exception as e:\n            await self._run_error_interceptors_async(key, e)\n            raise ResolutionError(key, e) from e\n        finally:\n            self._circular_detector.exit_resolution(key)\n\n            if timer:\n                timer.__exit__(None, None, None)\n                self._performance_metrics.record_resolution(\n                    key,\n                    timer.elapsed_time,\n                    cache_hit=cache_hit,\n                )\n\n    def _analyze_service_dependencies(self, registration: ServiceRegistration) -&gt; list[DependencyInfo]:\n        \"\"\"\u5206\u6790\u670d\u52a1\u4f9d\u8d56.\n\n        Args:\n            registration: \u670d\u52a1\u6ce8\u518c\u4fe1\u606f\n\n        Returns:\n            \u4f9d\u8d56\u4fe1\u606f\u5217\u8868\n\n        Raises:\n            ResolutionError: \u5206\u6790\u5931\u8d25\u65f6\n        \"\"\"\n        try:\n            # \u5982\u679c\u662f\u5de5\u5382\u51fd\u6570\uff0c\u5206\u6790\u5176\u53c2\u6570\u4f9d\u8d56\n            if registration.factory is not None:\n                return self._analyze_function_dependencies(registration.factory)\n            # \u5426\u5219\u6309\u6784\u9020\u51fd\u6570\u4f9d\u8d56\u5206\u6790\n            return ConstructorInjector.analyze_dependencies(registration.service_type)\n        except ResolutionError:\n            raise\n        except Exception as e:\n            raise ResolutionError(registration.key, e) from e\n\n    def _analyze_function_dependencies(self, func: Callable[..., Any]) -&gt; list[DependencyInfo]:\n        \"\"\"\u5206\u6790\u5de5\u5382\u51fd\u6570\u53c2\u6570\u4f9d\u8d56.\n\n        \u652f\u6301\u7c7b\u578b\u6ce8\u89e3\u3001Optional\u3001\u9ed8\u8ba4\u503c\u4ee5\u53ca Injected \u6807\u8bb0\u3002\n        \"\"\"\n        dependencies: list[DependencyInfo] = []\n        try:\n            signature = inspect.signature(func)\n            try:\n                type_hints = get_type_hints(func)\n            except Exception:  # noqa: BLE001\n                type_hints = getattr(func, \"__annotations__\", {})\n\n            for param_name, param in signature.parameters.items():\n                # \u8df3\u8fc7 *args/**kwargs \u8fd9\u7c7b\u52a8\u6001\u53c2\u6570\n                if param.kind in (inspect.Parameter.VAR_POSITIONAL, inspect.Parameter.VAR_KEYWORD):\n                    continue\n\n                # \u68c0\u67e5 Injected \u6807\u8bb0\n                is_injected = isinstance(param.default, InjectionMarker)\n\n                # \u5fc5\u987b\u6709\u7c7b\u578b\u6ce8\u89e3\u624d\u80fd\u8fdb\u884c\u4f9d\u8d56\u6ce8\u5165\n                if param.annotation == inspect.Parameter.empty:\n                    continue\n\n                param_type = type_hints.get(param_name, param.annotation)\n\n                # \u7b80\u5355\u7c7b\u578b\u76f4\u63a5\u8df3\u8fc7\n                if ConstructorInjector._is_simple_type(param_type):\n                    continue\n\n                # \u5904\u7406 Optional[T]\n                is_optional, actual_type = ConstructorInjector._extract_optional_type(param_type)\n\n                should_add = is_injected or param.default is inspect.Parameter.empty or is_optional\n                if should_add:\n                    dependencies.append(\n                        DependencyInfo(\n                            parameter_name=param_name,\n                            service_key=actual_type,\n                            service_type=actual_type,\n                            is_optional=is_optional,\n                            default_value=param.default,\n                            is_injected=is_injected,\n                        )\n                    )\n\n            return dependencies\n        except Exception as e:  # noqa: BLE001\n            raise ResolutionError(func, Exception(f\"Failed to analyze factory dependencies: {e!s}\")) from e\n\n    def _resolve_dependencies(self, dependencies: list[DependencyInfo]) -&gt; dict[str, Any]:\n        \"\"\"\u89e3\u6790\u4f9d\u8d56\u53c2\u6570.\n\n        \u6027\u80fd\u4f18\u5316: \u51cf\u5c11\u5f02\u5e38\u5904\u7406\u5f00\u9500,\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\u4f9d\u8d56\u90fd\u80fd\u6b63\u5e38\u89e3\u6790.\n\n        Args:\n            dependencies: \u4f9d\u8d56\u4fe1\u606f\u5217\u8868\n\n        Returns:\n            \u53c2\u6570\u540d\u5230\u5b9e\u4f8b\u7684\u6620\u5c04\n\n        Raises:\n            ServiceNotFoundError: \u5fc5\u9700\u4f9d\u8d56\u672a\u6ce8\u518c\u65f6\n        \"\"\"\n        # \u6027\u80fd\u4f18\u5316: \u9884\u5206\u914d\u5b57\u5178\u5927\u5c0f\n        kwargs: dict[str, Any] = {}\n\n        # \u6027\u80fd\u4f18\u5316: \u5feb\u901f\u8def\u5f84 - \u5927\u90e8\u5206\u670d\u52a1\u6ca1\u6709\u4f9d\u8d56\u6216\u4f9d\u8d56\u5f88\u5c11\n        if not dependencies:\n            return kwargs\n\n        # \u83b7\u53d6\u6ce8\u518c\u8868\u5f15\u7528,\u907f\u514d\u91cd\u590d\u5c5e\u6027\u67e5\u627e\n        registrations = self._registrations\n\n        for dep in dependencies:\n            # \u5148\u89c4\u8303\u5316\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\u670d\u52a1\u952e\u5230\u5df2\u6ce8\u518c\u7c7b\u578b(\u652f\u6301\u5c40\u90e8\u7c7b/\u672a\u6765\u6ce8\u89e3)\n            if isinstance(dep.service_key, str):\n                name = dep.service_key\n                # \u5c1d\u8bd5\u522b\u540d\u5339\u914d\n                if name in self._aliases:\n                    dep.service_key = self._aliases[name]\n                    if isinstance(dep.service_key, type):\n                        dep.service_type = dep.service_key\n                else:\n                    for registered_type in registrations.keys():\n                        if isinstance(registered_type, type):\n                            if (\n                                registered_type.__name__ == name\n                                or registered_type.__qualname__.split(\".\")[-1] == name\n                            ):\n                                dep.service_key = registered_type\n                                dep.service_type = registered_type\n                                break\n\n            # \u5904\u7406 Lazy[T] \u4f9d\u8d56: \u6ce8\u5165 LazyProxy, \u5ef6\u8fdf\u89e3\u6790\u771f\u5b9e\u7c7b\u578b\n            is_lazy = False\n            inner_key = None\n\n            # \u68c0\u67e5 LazyTypeMarker \u5b9e\u4f8b\n            is_lazy_marker = (hasattr(dep.service_key, \"inner_type\") or\n                             (hasattr(dep.service_key, \"__class__\") and\n                              dep.service_key.__class__.__name__ == \"LazyTypeMarker\") or\n                             hasattr(dep.service_type, \"inner_type\") or\n                             (hasattr(dep.service_type, \"__class__\") and\n                              dep.service_type.__class__.__name__ == \"LazyTypeMarker\"))\n\n            if is_lazy_marker:\n                is_lazy = True\n                marker = dep.service_key if (hasattr(dep.service_key, \"inner_type\") or\n                                            (hasattr(dep.service_key, \"__class__\") and\n                                             dep.service_key.__class__.__name__ == \"LazyTypeMarker\")) else dep.service_type\n                inner_key = marker.inner_type\n            # \u68c0\u67e5\u5b57\u7b26\u4e32\u5f62\u5f0f\u7684 Lazy[T]\n            elif (isinstance(dep.service_key, str) and\n                  dep.service_key.startswith(\"Lazy[\") and\n                  dep.service_key.endswith(\"]\")):\n                is_lazy = True\n                inner_name = dep.service_key[5:-1]\n                # \u67e5\u627e\u5339\u914d\u7684\u7c7b\u578b\n                for registered_type in registrations:\n                    if isinstance(registered_type, type) and (\n                        registered_type.__name__ == inner_name or\n                        registered_type.__qualname__.split(\".\")[-1] == inner_name\n                    ):\n                        inner_key = registered_type\n                        break\n                if inner_key is None and inner_name in self._aliases:\n                    inner_key = self._aliases[inner_name]\n\n            if is_lazy and inner_key is not None:                # \u975e\u53ef\u9009\u4f9d\u8d56\u9700\u8981\u786e\u4fdd\u771f\u5b9e\u7c7b\u578b\u5df2\u6ce8\u518c\n                if inner_key not in registrations:\n                    if not dep.is_optional:\n                        raise ServiceNotFoundError(inner_key)\n                    # \u53ef\u9009\u4f9d\u8d56\u4e14\u672a\u6ce8\u518c: \u8df3\u8fc7\u6ce8\u5165\n                    continue\n\n                # \u5982\u679c\u5185\u90e8\u670d\u52a1\u662f\u5f02\u6b65\u7684,\u4f7f\u7528\u5f02\u6b65\u89e3\u6790\u5de5\u5382; \u5426\u5219\u4f7f\u7528\u540c\u6b65\u89e3\u6790\n                inner_reg = registrations.get(inner_key)\n                if inner_reg is not None and inner_reg.is_async:\n                    # \u4f7f\u7528\u9ed8\u8ba4\u53c2\u6570\u6355\u83b7 inner_key,\u907f\u514d\u95ed\u5305\u95ee\u9898\n                    kwargs[dep.parameter_name] = LazyProxy(lambda k=inner_key: self.resolve_async(k))\n                else:\n                    # \u4f7f\u7528\u9ed8\u8ba4\u53c2\u6570\u6355\u83b7 inner_key,\u907f\u514d\u95ed\u5305\u95ee\u9898\n                    kwargs[dep.parameter_name] = LazyProxy(lambda k=inner_key: self.resolve(k))\n                continue\n\n            # \u5e38\u89c4\u4f9d\u8d56\u89e3\u6790\u8def\u5f84\n            if dep.service_key not in registrations:\n                if not dep.is_optional:\n                    raise ServiceNotFoundError(dep.service_key)\n                continue\n\n            try:\n                kwargs[dep.parameter_name] = self.resolve(dep.service_key)\n            except Exception:\n                if not dep.is_optional:\n                    raise\n        return kwargs\n\n    def _invoke_factory(self, registration: ServiceRegistration, kwargs: dict[str, Any]) -&gt; Any:\n        \"\"\"\u8c03\u7528\u5de5\u5382\u521b\u5efa\u5b9e\u4f8b.\n\n        Args:\n            registration: \u670d\u52a1\u6ce8\u518c\u4fe1\u606f\n            kwargs: \u6784\u9020\u53c2\u6570\n\n        Returns:\n            \u521b\u5efa\u7684\u5b9e\u4f8b\n\n        Raises:\n            ResolutionError: \u5de5\u5382\u8c03\u7528\u5931\u8d25\u65f6\n        \"\"\"\n        factory = registration.factory\n        if factory is None:\n            raise ResolutionError(registration.key, Exception(\"No factory defined\"))\n\n        try:\n            if callable(factory):\n                return factory(**kwargs)\n            raise ResolutionError(registration.key, Exception(\"Factory is not callable\"))\n        except ResolutionError:\n            raise\n        except Exception as e:\n            raise ResolutionError(registration.key, e) from e\n\n    def _create_instance(self, registration: ServiceRegistration) -&gt; Any:\n        \"\"\"\u521b\u5efa\u670d\u52a1\u5b9e\u4f8b.\n\n        \u6839\u636e\u6ce8\u518c\u4fe1\u606f\u521b\u5efa\u4e00\u4e2a\u65b0\u5b9e\u4f8b.\n\n        Args:\n            registration: \u670d\u52a1\u6ce8\u518c\u4fe1\u606f\n\n        Returns:\n            \u521b\u5efa\u7684\u5b9e\u4f8b\n\n        Raises:\n            ResolutionError: \u521b\u5efa\u5931\u8d25\u65f6\n        \"\"\"\n        # \u5206\u6790\u4f9d\u8d56\n        dependencies = self._analyze_service_dependencies(registration)\n\n        # \u89e3\u6790\u4f9d\u8d56\n        kwargs = self._resolve_dependencies(dependencies)\n\n        # \u8c03\u7528\u5de5\u5382\u521b\u5efa\u5b9e\u4f8b\n        return self._invoke_factory(registration, kwargs)\n\n    async def _resolve_dependencies_async(self, dependencies: list[DependencyInfo]) -&gt; dict[str, Any]:\n        \"\"\"\u5f02\u6b65\u89e3\u6790\u4f9d\u8d56\u53c2\u6570.\n\n        Args:\n            dependencies: \u4f9d\u8d56\u4fe1\u606f\u5217\u8868\n\n        Returns:\n            \u53c2\u6570\u540d\u5230\u5b9e\u4f8b\u7684\u6620\u5c04\n\n        Raises:\n            ServiceNotFoundError: \u5fc5\u9700\u4f9d\u8d56\u672a\u6ce8\u518c\u65f6\n        \"\"\"\n        kwargs: dict[str, Any] = {}\n        registrations = self._registrations\n        for dep in dependencies:\n            # \u5148\u89c4\u8303\u5316\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\u670d\u52a1\u952e\u5230\u5df2\u6ce8\u518c\u7c7b\u578b(\u652f\u6301\u5c40\u90e8\u7c7b/\u672a\u6765\u6ce8\u89e3)\n            if isinstance(dep.service_key, str):\n                name = dep.service_key\n                if name in self._aliases:\n                    dep.service_key = self._aliases[name]\n                    if isinstance(dep.service_key, type):\n                        dep.service_type = dep.service_key\n                else:\n                    for registered_type in registrations.keys():\n                        if isinstance(registered_type, type):\n                            if (\n                                registered_type.__name__ == name\n                                or registered_type.__qualname__.split(\".\")[-1] == name\n                            ):\n                                dep.service_key = registered_type\n                                dep.service_type = registered_type\n                                break\n\n            # \u5904\u7406 Lazy[T] \u4f9d\u8d56: \u5728\u5f02\u6b65\u4e0a\u4e0b\u6587\u4e2d\u6ce8\u5165 LazyProxy\n            is_lazy = False\n            inner_key = None\n\n            # \u68c0\u67e5 LazyTypeMarker \u5b9e\u4f8b\n            is_lazy_marker = (hasattr(dep.service_key, \"inner_type\") or\n                             (hasattr(dep.service_key, \"__class__\") and\n                              dep.service_key.__class__.__name__ == \"LazyTypeMarker\") or\n                             hasattr(dep.service_type, \"inner_type\") or\n                             (hasattr(dep.service_type, \"__class__\") and\n                              dep.service_type.__class__.__name__ == \"LazyTypeMarker\"))\n\n            if is_lazy_marker:\n                is_lazy = True\n                marker = dep.service_key if (hasattr(dep.service_key, \"inner_type\") or\n                                            (hasattr(dep.service_key, \"__class__\") and\n                                             dep.service_key.__class__.__name__ == \"LazyTypeMarker\")) else dep.service_type\n                inner_key = marker.inner_type\n            # \u68c0\u67e5\u5b57\u7b26\u4e32\u5f62\u5f0f\u7684 Lazy[T]\n            elif (isinstance(dep.service_key, str) and\n                  dep.service_key.startswith(\"Lazy[\") and\n                  dep.service_key.endswith(\"]\")):\n                is_lazy = True\n                inner_name = dep.service_key[5:-1]\n                # \u67e5\u627e\u5339\u914d\u7684\u7c7b\u578b\n                for registered_type in registrations:\n                    if isinstance(registered_type, type) and (\n                        registered_type.__name__ == inner_name or\n                        registered_type.__qualname__.split(\".\")[-1] == inner_name\n                    ):\n                        inner_key = registered_type\n                        break\n                if inner_key is None and inner_name in self._aliases:\n                    inner_key = self._aliases[inner_name]\n\n            if is_lazy and inner_key is not None:\n\n                # \u975e\u53ef\u9009\u4f9d\u8d56\u9700\u8981\u786e\u4fdd\u771f\u5b9e\u7c7b\u578b\u5df2\u6ce8\u518c\n                if inner_key not in registrations:\n                    if not dep.is_optional:\n                        raise ServiceNotFoundError(inner_key)\n                    # \u53ef\u9009\u4f9d\u8d56\u4e14\u672a\u6ce8\u518c: \u8df3\u8fc7\u6ce8\u5165\n                    continue\n\n                # \u5982\u679c\u5185\u90e8\u670d\u52a1\u662f\u5f02\u6b65\u7684,\u4f7f\u7528\u5f02\u6b65\u89e3\u6790\u5de5\u5382; \u5426\u5219\u4f7f\u7528\u540c\u6b65\u89e3\u6790\n                inner_reg = registrations.get(inner_key)\n                if inner_reg is not None and inner_reg.is_async:\n                    # \u4f7f\u7528\u9ed8\u8ba4\u53c2\u6570\u6355\u83b7 inner_key,\u907f\u514d\u95ed\u5305\u95ee\u9898\n                    kwargs[dep.parameter_name] = LazyProxy(lambda k=inner_key: self.resolve_async(k))\n                else:\n                    # \u4f7f\u7528\u9ed8\u8ba4\u53c2\u6570\u6355\u83b7 inner_key,\u907f\u514d\u95ed\u5305\u95ee\u9898\n                    kwargs[dep.parameter_name] = LazyProxy(lambda k=inner_key: self.resolve(k))\n                continue\n\n            # \u5e38\u89c4\u4f9d\u8d56\u89e3\u6790\u8def\u5f84\n            if dep.service_key not in registrations:\n                if not dep.is_optional:\n                    raise ServiceNotFoundError(dep.service_key)\n                continue\n\n            try:\n                # \u5728\u5f02\u6b65\u4e0a\u4e0b\u6587\u4e2d,\u603b\u662f\u4f7f\u7528\u5f02\u6b65\u89e3\u6790\n                kwargs[dep.parameter_name] = await self.resolve_async(dep.service_key)\n            except Exception:\n                if not dep.is_optional:\n                    raise\n        return kwargs\n\n    async def _invoke_factory_async(self, registration: ServiceRegistration, kwargs: dict[str, Any]) -&gt; Any:\n        \"\"\"\u5f02\u6b65\u8c03\u7528\u5de5\u5382\u521b\u5efa\u5b9e\u4f8b.\n\n        Args:\n            registration: \u670d\u52a1\u6ce8\u518c\u4fe1\u606f\n            kwargs: \u6784\u9020\u53c2\u6570\n\n        Returns:\n            \u521b\u5efa\u7684\u5b9e\u4f8b\n\n        Raises:\n            ResolutionError: \u5de5\u5382\u8c03\u7528\u5931\u8d25\u65f6\n        \"\"\"\n        factory = registration.factory\n        if factory is None:\n            raise ResolutionError(registration.key, Exception(\"No factory defined\"))\n\n        try:\n            if callable(factory):\n                if registration.is_async:\n                    # \u5f02\u6b65\u5de5\u5382\n                    return await factory(**kwargs)\n                # \u540c\u6b65\u5de5\u5382\u4e5f\u53ef\u4ee5\u5728\u5f02\u6b65\u4e2d\u8c03\u7528\n                return factory(**kwargs)\n            raise ResolutionError(registration.key, Exception(\"Factory is not callable\"))\n        except ResolutionError:\n            raise\n        except Exception as e:\n            raise ResolutionError(registration.key, e) from e\n\n    async def _create_instance_async(self, registration: ServiceRegistration) -&gt; Any:\n        \"\"\"\u5f02\u6b65\u521b\u5efa\u670d\u52a1\u5b9e\u4f8b.\n\n        \u6839\u636e\u6ce8\u518c\u4fe1\u606f\u521b\u5efa\u4e00\u4e2a\u65b0\u5b9e\u4f8b,\u652f\u6301\u5f02\u6b65factory\u548c\u5f02\u6b65\u4f9d\u8d56.\n\n        Args:\n            registration: \u670d\u52a1\u6ce8\u518c\u4fe1\u606f\n\n        Returns:\n            \u521b\u5efa\u7684\u5b9e\u4f8b\n\n        Raises:\n            ResolutionError: \u521b\u5efa\u5931\u8d25\u65f6\n        \"\"\"\n        # \u5206\u6790\u4f9d\u8d56\n        dependencies = self._analyze_service_dependencies(registration)\n\n        # \u5f02\u6b65\u89e3\u6790\u4f9d\u8d56\n        kwargs = await self._resolve_dependencies_async(dependencies)\n\n        # \u5f02\u6b65\u8c03\u7528\u5de5\u5382\u521b\u5efa\u5b9e\u4f8b\n        return await self._invoke_factory_async(registration, kwargs)\n\n    async def _run_before_interceptors_async(self, key: ServiceKey, registration: ServiceRegistration) -&gt; None:\n        \"\"\"\u5f02\u6b65\u6267\u884c\u524d\u7f6e\u62e6\u622a\u5668.\"\"\"\n        for interceptor in self._interceptors[\"before\"]:\n            if inspect.iscoroutinefunction(interceptor):\n                await interceptor(key, registration)\n            else:\n                interceptor(key, registration)\n\n    async def _run_after_interceptors_async(self, key: ServiceKey, instance: Any) -&gt; Any:\n        \"\"\"\u5f02\u6b65\u6267\u884c\u540e\u7f6e\u62e6\u622a\u5668.\"\"\"\n        result = instance\n        for interceptor in self._interceptors[\"after\"]:\n            if inspect.iscoroutinefunction(interceptor):\n                result = await interceptor(key, result) or result\n            else:\n                result = interceptor(key, result) or result\n        return result\n\n    async def _run_error_interceptors_async(self, key: ServiceKey, error: Exception) -&gt; None:\n        \"\"\"\u5f02\u6b65\u6267\u884c\u9519\u8bef\u62e6\u622a\u5668.\"\"\"\n        for interceptor in self._interceptors[\"error\"]:\n            if inspect.iscoroutinefunction(interceptor):\n                await interceptor(key, error)\n            else:\n                interceptor(key, error)\n\n    # ===================== \u4f5c\u7528\u57df\u65b9\u6cd5 =====================\n\n    def try_resolve(self, key: ServiceKey, default: T | None = None) -&gt; T | None:\n        \"\"\"\u5c1d\u8bd5\u89e3\u6790\u670d\u52a1,\u5931\u8d25\u8fd4\u56de\u9ed8\u8ba4\u503c.\n\n        Args:\n            key: \u670d\u52a1\u952e\n            default: \u5931\u8d25\u65f6\u7684\u9ed8\u8ba4\u503c\n\n        Returns:\n            \u670d\u52a1\u5b9e\u4f8b\u6216\u9ed8\u8ba4\u503c\n\n        Examples:\n            &gt;&gt;&gt; service = container.try_resolve(OptionalService)\n            &gt;&gt;&gt; if service is None:\n            ...     print(\"Service not found\")\n        \"\"\"\n        try:\n            return self.resolve(key)  # type: ignore[return-value]\n        except (ServiceNotFoundError, ResolutionError):\n            return default\n\n    async def try_resolve_async(self, key: ServiceKey, default: T | None = None) -&gt; T | None:\n        \"\"\"\u5f02\u6b65\u5c1d\u8bd5\u89e3\u6790\u670d\u52a1,\u5931\u8d25\u8fd4\u56de\u9ed8\u8ba4\u503c.\n\n        Args:\n            key: \u670d\u52a1\u952e\n            default: \u5931\u8d25\u65f6\u7684\u9ed8\u8ba4\u503c\n\n        Returns:\n            \u670d\u52a1\u5b9e\u4f8b\u6216\u9ed8\u8ba4\u503c\n\n        Examples:\n            &gt;&gt;&gt; service = await container.try_resolve_async(OptionalService)\n            &gt;&gt;&gt; if service is None:\n            ...     print(\"Service not found\")\n        \"\"\"\n        try:\n            return await self.resolve_async(key)  # type: ignore[return-value]\n        except (ServiceNotFoundError, ResolutionError):\n            return default\n\n    def unregister(self, key: ServiceKey) -&gt; bool:\n        \"\"\"\u5220\u9664\u670d\u52a1\u6ce8\u518c.\n\n        Args:\n            key: \u670d\u52a1\u952e\n\n        Returns:\n            \u662f\u5426\u6210\u529f\u5220\u9664\n\n        Examples:\n            &gt;&gt;&gt; container.register(Service)\n            &gt;&gt;&gt; container.unregister(Service)\n            True\n        \"\"\"\n        # \u89e3\u6790\u522b\u540d\n        actual_key = self._aliases.get(key, key) if isinstance(key, str) else key\n\n        if actual_key in self._registrations:\n            del self._registrations[actual_key]\n            # \u6e05\u7406\u8be5\u670d\u52a1\u7684\u5b9e\u4f8b\n            self._lifetime_manager.remove_instance(actual_key)\n            return True\n        return False\n\n    def clear(self, lifetime: Lifetime | None = None) -&gt; None:\n        \"\"\"\u6e05\u7a7a\u5bb9\u5668\u4e2d\u7684\u670d\u52a1.\n\n        Args:\n            lifetime: \u53ef\u9009,\u4ec5\u6e05\u7a7a\u6307\u5b9a\u751f\u547d\u5468\u671f\u7684\u670d\u52a1\n\n        Examples:\n            &gt;&gt;&gt; container.clear()  # \u6e05\u7a7a\u6240\u6709\n            &gt;&gt;&gt; container.clear(Lifetime.TRANSIENT)  # \u4ec5\u6e05\u7a7a Transient\n        \"\"\"\n        if lifetime is None:\n            # \u6e05\u7a7a\u6240\u6709\n            self._registrations.clear()\n            self._aliases.clear()\n            self._lifetime_manager.clear()\n        else:\n            # \u6e05\u7a7a\u6307\u5b9a\u751f\u547d\u5468\u671f\n            to_remove = [key for key, reg in self._registrations.items() if reg.lifetime == lifetime]\n            for key in to_remove:\n                self.unregister(key)\n\n    def replace(self, old_key: ServiceKey, new_service_type: type) -&gt; None:\n        \"\"\"\u66ff\u6362\u5df2\u6ce8\u518c\u7684\u670d\u52a1.\n\n        Args:\n            old_key: \u65e7\u670d\u52a1\u952e\n            new_service_type: \u65b0\u670d\u52a1\u7c7b\u578b\n\n        Raises:\n            ServiceNotFoundError: \u65e7\u670d\u52a1\u4e0d\u5b58\u5728\u65f6\n\n        Examples:\n            &gt;&gt;&gt; container.replace(OldService, NewService)\n        \"\"\"\n        if old_key not in self._registrations:\n            raise ServiceNotFoundError(old_key, list(self._registrations.keys()))\n\n        old_reg = self._registrations[old_key]\n        self.unregister(old_key)\n        self.register(\n            new_service_type,\n            key=old_key,\n            lifetime=old_reg.lifetime,\n            override=True,\n        )\n\n    def has(self, key: ServiceKey) -&gt; bool:\n        \"\"\"\u68c0\u67e5\u670d\u52a1\u662f\u5426\u5df2\u6ce8\u518c(is_registered\u7684\u522b\u540d).\n\n        Args:\n            key: \u670d\u52a1\u952e\n\n        Returns:\n            \u662f\u5426\u5df2\u6ce8\u518c\n\n        Examples:\n            &gt;&gt;&gt; container.has(UserService)\n            True\n        \"\"\"\n        return self.is_registered(key)\n\n    def alias(self, key: ServiceKey, alias: str) -&gt; Container:\n        \"\"\"\u4e3a\u670d\u52a1\u521b\u5efa\u522b\u540d.\n\n        Args:\n            key: \u539f\u59cb\u670d\u52a1\u952e\n            alias: \u522b\u540d\n\n        Returns:\n            \u5bb9\u5668\u5b9e\u4f8b(\u652f\u6301\u94fe\u5f0f\u8c03\u7528)\n\n        Raises:\n            ServiceNotFoundError: \u670d\u52a1\u4e0d\u5b58\u5728\u65f6\n\n        Examples:\n            &gt;&gt;&gt; container.alias(DatabaseService, \"db\")\n            &gt;&gt;&gt; db = container.resolve(\"db\")\n        \"\"\"\n        if key not in self._registrations:\n            raise ServiceNotFoundError(key, list(self._registrations.keys()))\n\n        self._aliases[alias] = key\n        return self\n\n    def scan(self, package: str | Path) -&gt; Container:\n        \"\"\"\u626b\u63cf\u5305\u5e76\u81ea\u52a8\u6ce8\u518c\u6240\u6709\u5e26\u88c5\u9970\u5668\u7684\u670d\u52a1.\n\n        Args:\n            package: \u5305\u540d\u6216\u8def\u5f84\n\n        Returns:\n            \u5bb9\u5668\u5b9e\u4f8b(\u652f\u6301\u94fe\u5f0f\u8c03\u7528)\n\n        Examples:\n            &gt;&gt;&gt; container.scan(\"myapp.services\")\n            &gt;&gt;&gt; container.scan(Path(\"./services\"))\n        \"\"\"\n        import contextlib\n\n        from .decorators import auto_register, is_injectable\n\n        if isinstance(package, Path):\n            # \u8def\u5f84\u626b\u63cf\n            package_str = str(package.absolute())\n            spec = importlib.util.spec_from_file_location(\"__scan_module__\", package_str)\n            if spec and spec.loader:\n                module = importlib.util.module_from_spec(spec)\n                spec.loader.exec_module(module)\n                for name in dir(module):\n                    obj = getattr(module, name)\n                    if is_injectable(obj):\n                        auto_register(self, obj)\n        else:\n            # \u5305\u540d\u626b\u63cf\n            with contextlib.suppress(ImportError):\n                module = importlib.import_module(package)\n                for _, name, _ in pkgutil.walk_packages(\n                    module.__path__,\n                    prefix=f\"{package}.\",\n                ):\n                    with contextlib.suppress(ImportError, AttributeError):\n                        sub_module = importlib.import_module(name)\n                        for attr_name in dir(sub_module):\n                            obj = getattr(sub_module, attr_name)\n                            if is_injectable(obj):\n                                auto_register(self, obj)\n\n        return self\n\n    def warmup(self, *keys: ServiceKey) -&gt; None:\n        \"\"\"\u9884\u70ed\u670d\u52a1,\u63d0\u524d\u521b\u5efa\u5355\u4f8b\u5b9e\u4f8b.\n\n        Args:\n            *keys: \u8981\u9884\u70ed\u7684\u670d\u52a1\u952e,\u4e0d\u63d0\u4f9b\u5219\u9884\u70ed\u6240\u6709\u5355\u4f8b\n\n        Examples:\n            &gt;&gt;&gt; container.warmup(DatabaseService, CacheService)\n            &gt;&gt;&gt; container.warmup()  # \u9884\u70ed\u6240\u6709\u5355\u4f8b\n        \"\"\"\n        import contextlib\n\n        if not keys:\n            # \u9884\u70ed\u6240\u6709\u5355\u4f8b\n            keys = tuple(key for key, reg in self._registrations.items() if reg.lifetime == Lifetime.SINGLETON)\n\n        for key in keys:\n            # \u9884\u70ed\u5931\u8d25\u4e0d\u5f71\u54cd\u540e\u7eed\u670d\u52a1\n            with contextlib.suppress(ContainerException, ResolutionError):\n                self.resolve(key)\n\n    async def warmup_async(self, *keys: ServiceKey) -&gt; None:\n        \"\"\"\u5f02\u6b65\u9884\u70ed\u670d\u52a1,\u63d0\u524d\u521b\u5efa\u5355\u4f8b\u5b9e\u4f8b.\n\n        Args:\n            *keys: \u8981\u9884\u70ed\u7684\u670d\u52a1\u952e,\u4e0d\u63d0\u4f9b\u5219\u9884\u70ed\u6240\u6709\u5355\u4f8b\n\n        Examples:\n            &gt;&gt;&gt; await container.warmup_async(DatabaseService, CacheService)\n            &gt;&gt;&gt; await container.warmup_async()  # \u9884\u70ed\u6240\u6709\u5355\u4f8b\n        \"\"\"\n        import contextlib\n\n        if not keys:\n            # \u9884\u70ed\u6240\u6709\u5355\u4f8b\n            keys = tuple(key for key, reg in self._registrations.items() if reg.lifetime == Lifetime.SINGLETON)\n\n        for key in keys:\n            # \u9884\u70ed\u5931\u8d25\u4e0d\u5f71\u54cd\u540e\u7eed\u670d\u52a1\n            with contextlib.suppress(ContainerException, ResolutionError):\n                await self.resolve_async(key)\n\n    def __getitem__(self, key: ServiceKey) -&gt; Any:\n        \"\"\"\u7b80\u5199\u8bed\u6cd5: container[Service].\n\n        Args:\n            key: \u670d\u52a1\u952e\n\n        Returns:\n            \u670d\u52a1\u5b9e\u4f8b\n\n        Examples:\n            &gt;&gt;&gt; service = container[UserService]\n        \"\"\"\n        return self.resolve(key)\n\n    def __setitem__(self, key: ServiceKey, value: Any) -&gt; None:\n        \"\"\"\u7b80\u5199\u8bed\u6cd5: container[\"key\"] = instance.\n\n        Args:\n            key: \u670d\u52a1\u952e\n            value: \u670d\u52a1\u5b9e\u4f8b\u6216\u7c7b\u578b\n\n        Examples:\n            &gt;&gt;&gt; container[\"config\"] = config_obj\n            &gt;&gt;&gt; container[IService] = ServiceImpl\n        \"\"\"\n        if isinstance(value, type):\n            self.register(value, key=key, override=True)\n        else:\n            self.register_instance(key, value, override=True)\n\n    # ===================== \u4f5c\u7528\u57df\u65b9\u6cd5 =====================\n\n    def create_scope(self) -&gt; Scope:\n        \"\"\"\u521b\u5efa\u65b0\u7684\u4f5c\u7528\u57df.\n\n        \u7528\u4e8e\u7ba1\u7406 SCOPED \u751f\u547d\u5468\u671f\u7684\u670d\u52a1.\n\n        Returns:\n            \u4f5c\u7528\u57df\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\n\n        Examples:\n            &gt;&gt;&gt; with container.create_scope() as scope:\n            ...     service = scope.resolve(ScopedService)\n            ...     # \u5728\u4f5c\u7528\u57df\u5185\u4f7f\u7528\u670d\u52a1\n        \"\"\"\n        return Scope(self)\n\n    # ===================== \u62e6\u622a\u5668\u65b9\u6cd5 =====================\n\n    def add_interceptor(\n        self,\n        interceptor_type: str,\n        interceptor: Any,\n    ) -&gt; Container:\n        \"\"\"\u6dfb\u52a0\u62e6\u622a\u5668.\n\n        \u652f\u6301 \"before\", \"after\", \"error\" \u4e09\u79cd\u7c7b\u578b.\n\n        Args:\n            interceptor_type: \u62e6\u622a\u5668\u7c7b\u578b\n            interceptor: \u62e6\u622a\u5668\u51fd\u6570\n\n        Returns:\n            \u5bb9\u5668\u5b9e\u4f8b(\u652f\u6301\u94fe\u5f0f\u8c03\u7528)\n\n        Raises:\n            ValueError: \u62e6\u622a\u5668\u7c7b\u578b\u65e0\u6548\u65f6\n\n        Examples:\n            &gt;&gt;&gt; def log_before(key, registration):\n            ...     print(f\"\u89e3\u6790: {key}\")\n            ...     return True\n            &gt;&gt;&gt; container.add_interceptor(\"before\", log_before)\n        \"\"\"\n        if interceptor_type not in self._interceptors:\n            msg = f\"Invalid interceptor type: {interceptor_type}\"\n            raise ValueError(msg)\n\n        self._interceptors[interceptor_type].append(interceptor)\n        return self\n\n    # ===================== \u5de5\u5177\u65b9\u6cd5 =====================\n\n    def is_registered(self, key: ServiceKey) -&gt; bool:\n        \"\"\"\u68c0\u67e5\u670d\u52a1\u662f\u5426\u5df2\u6ce8\u518c.\n\n        Args:\n            key: \u670d\u52a1\u952e\u6216\u522b\u540d\n\n        Returns:\n            \u662f\u5426\u5df2\u6ce8\u518c\n        \"\"\"\n        return key in self._registrations or key in self._aliases\n\n    def get_registration(self, key: ServiceKey) -&gt; ServiceRegistration | None:\n        \"\"\"\u83b7\u53d6\u670d\u52a1\u6ce8\u518c\u4fe1\u606f.\n\n        Args:\n            key: \u670d\u52a1\u952e\n\n        Returns:\n            \u6ce8\u518c\u4fe1\u606f\u6216 None\n        \"\"\"\n        return self._registrations.get(key)\n\n    def get_all_registrations(self) -&gt; dict[ServiceKey, ServiceRegistration]:\n        \"\"\"\u83b7\u53d6\u6240\u6709\u6ce8\u518c\u4fe1\u606f.\n\n        Returns:\n            \u6240\u6709\u6ce8\u518c\u4fe1\u606f\u7684\u5b57\u5178\n        \"\"\"\n        return self._registrations.copy()\n\n    def get_performance_stats(self) -&gt; dict[str, Any]:\n        \"\"\"\u83b7\u53d6\u6027\u80fd\u7edf\u8ba1\u4fe1\u606f.\n\n        \u8fd4\u56de\u5bb9\u5668\u7684\u6027\u80fd\u6307\u6807,\u5305\u62ec\u89e3\u6790\u6b21\u6570,\u7f13\u5b58\u547d\u4e2d\u7387\u7b49.\n\n        Returns:\n            \u5305\u542b\u6027\u80fd\u6307\u6807\u7684\u5b57\u5178\n\n        Examples:\n            &gt;&gt;&gt; container = Container(enable_performance_tracking=True)\n            &gt;&gt;&gt; container.register(UserService)\n            &gt;&gt;&gt; container.resolve(UserService)\n            &gt;&gt;&gt; stats = container.get_performance_stats()\n            &gt;&gt;&gt; print(f\"Total resolutions: {stats['total_resolutions']}\")\n        \"\"\"\n        return self._performance_metrics.get_stats()\n\n    def reset_performance_metrics(self) -&gt; None:\n        \"\"\"\u91cd\u7f6e\u6027\u80fd\u6307\u6807.\n\n        \u6e05\u7a7a\u6240\u6709\u5df2\u8bb0\u5f55\u7684\u6027\u80fd\u6570\u636e.\n        \"\"\"\n        self._performance_metrics.reset()\n\n    def dispose(self) -&gt; None:\n        \"\"\"\u91ca\u653e\u5bb9\u5668\u53ca\u5176\u6240\u6709\u8d44\u6e90.\n\n        \u5305\u62ec\u5355\u4f8b\u5b9e\u4f8b,\u4f5c\u7528\u57df\u7b49.\n        \"\"\"\n        self._lifetime_manager.dispose_all()\n        self._registrations.clear()\n        self._interceptors.clear()\n        self._circular_detector.reset()\n        self._performance_metrics.reset()\n\n    def __enter__(self) -&gt; Container:\n        \"\"\"\u652f\u6301\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u534f\u8bae.\"\"\"\n        return self\n\n    def __exit__(self, exc_type: Any, exc_val: Any, exc_tb: Any) -&gt; None:\n        \"\"\"\u79bb\u5f00\u4e0a\u4e0b\u6587\u65f6\u91ca\u653e\u8d44\u6e90.\"\"\"\n        self.dispose()\n\n    async def __aenter__(self) -&gt; Container:\n        \"\"\"\u652f\u6301\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u534f\u8bae.\"\"\"\n        return self\n\n    async def __aexit__(self, exc_type: Any, exc_val: Any, exc_tb: Any) -&gt; None:\n        \"\"\"\u79bb\u5f00\u5f02\u6b65\u4e0a\u4e0b\u6587\u65f6\u91ca\u653e\u8d44\u6e90.\"\"\"\n        self.dispose()\n</code></pre>"},{"location":"en/guaids/container/#symphra_container.container.Container.__aenter__","title":"<code>__aenter__()</code>  <code>async</code>","text":"<p>\u652f\u6301\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u534f\u8bae.</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/container.py</code> <pre><code>async def __aenter__(self) -&gt; Container:\n    \"\"\"\u652f\u6301\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u534f\u8bae.\"\"\"\n    return self\n</code></pre>"},{"location":"en/guaids/container/#symphra_container.container.Container.__aexit__","title":"<code>__aexit__(exc_type, exc_val, exc_tb)</code>  <code>async</code>","text":"<p>\u79bb\u5f00\u5f02\u6b65\u4e0a\u4e0b\u6587\u65f6\u91ca\u653e\u8d44\u6e90.</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/container.py</code> <pre><code>async def __aexit__(self, exc_type: Any, exc_val: Any, exc_tb: Any) -&gt; None:\n    \"\"\"\u79bb\u5f00\u5f02\u6b65\u4e0a\u4e0b\u6587\u65f6\u91ca\u653e\u8d44\u6e90.\"\"\"\n    self.dispose()\n</code></pre>"},{"location":"en/guaids/container/#symphra_container.container.Container.__enter__","title":"<code>__enter__()</code>","text":"<p>\u652f\u6301\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u534f\u8bae.</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/container.py</code> <pre><code>def __enter__(self) -&gt; Container:\n    \"\"\"\u652f\u6301\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u534f\u8bae.\"\"\"\n    return self\n</code></pre>"},{"location":"en/guaids/container/#symphra_container.container.Container.__exit__","title":"<code>__exit__(exc_type, exc_val, exc_tb)</code>","text":"<p>\u79bb\u5f00\u4e0a\u4e0b\u6587\u65f6\u91ca\u653e\u8d44\u6e90.</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/container.py</code> <pre><code>def __exit__(self, exc_type: Any, exc_val: Any, exc_tb: Any) -&gt; None:\n    \"\"\"\u79bb\u5f00\u4e0a\u4e0b\u6587\u65f6\u91ca\u653e\u8d44\u6e90.\"\"\"\n    self.dispose()\n</code></pre>"},{"location":"en/guaids/container/#symphra_container.container.Container.__getitem__","title":"<code>__getitem__(key)</code>","text":"<p>\u7b80\u5199\u8bed\u6cd5: container[Service].</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>key</code> <code>ServiceKey</code> <p>\u670d\u52a1\u952e</p> \u5fc5\u9700 <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>Any</code> <p>\u670d\u52a1\u5b9e\u4f8b</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>&gt;&gt;&gt; service = container[UserService]\n</code></pre> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/container.py</code> <pre><code>def __getitem__(self, key: ServiceKey) -&gt; Any:\n    \"\"\"\u7b80\u5199\u8bed\u6cd5: container[Service].\n\n    Args:\n        key: \u670d\u52a1\u952e\n\n    Returns:\n        \u670d\u52a1\u5b9e\u4f8b\n\n    Examples:\n        &gt;&gt;&gt; service = container[UserService]\n    \"\"\"\n    return self.resolve(key)\n</code></pre>"},{"location":"en/guaids/container/#symphra_container.container.Container.__init__","title":"<code>__init__(enable_auto_wiring=False, strict_mode=False, enable_performance_tracking=False)</code>","text":"<p>\u521d\u59cb\u5316\u5bb9\u5668.</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>enable_auto_wiring</code> <code>bool</code> <p>\u662f\u5426\u542f\u7528\u81ea\u52a8\u88c5\u914d</p> <code>False</code> <code>strict_mode</code> <code>bool</code> <p>\u662f\u5426\u542f\u7528\u4e25\u683c\u6a21\u5f0f</p> <code>False</code> <code>enable_performance_tracking</code> <code>bool</code> <p>\u662f\u5426\u542f\u7528\u6027\u80fd\u8ddf\u8e2a</p> <code>False</code> <p>\u5f15\u53d1\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>InvalidConfigurationError</code> <p>\u914d\u7f6e\u65e0\u6548\u65f6</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/container.py</code> <pre><code>def __init__(\n    self,\n    enable_auto_wiring: bool = False,\n    strict_mode: bool = False,\n    enable_performance_tracking: bool = False,\n) -&gt; None:\n    \"\"\"\u521d\u59cb\u5316\u5bb9\u5668.\n\n    Args:\n        enable_auto_wiring: \u662f\u5426\u542f\u7528\u81ea\u52a8\u88c5\u914d\n        strict_mode: \u662f\u5426\u542f\u7528\u4e25\u683c\u6a21\u5f0f\n        enable_performance_tracking: \u662f\u5426\u542f\u7528\u6027\u80fd\u8ddf\u8e2a\n\n    Raises:\n        InvalidConfigurationError: \u914d\u7f6e\u65e0\u6548\u65f6\n    \"\"\"\n    # \u68c0\u67e5\u914d\u7f6e\u6709\u6548\u6027\n    if enable_auto_wiring and strict_mode:\n        msg = \"Cannot enable both auto_wiring and strict_mode simultaneously\"\n        raise InvalidConfigurationError(\n            msg,\n        )\n\n    self._registrations: dict[ServiceKey, ServiceRegistration] = {}\n    self._lifetime_manager = LifetimeManager()\n    self._interceptors: dict[str, list[Any]] = {\n        \"before\": [],\n        \"after\": [],\n        \"error\": [],\n    }\n    self._circular_detector = CircularDependencyDetector()\n    self._performance_metrics = PerformanceMetrics()\n    self._enable_performance_tracking = enable_performance_tracking\n    self.enable_auto_wiring = enable_auto_wiring\n    self.strict_mode = strict_mode\n    # \u522b\u540d\u6620\u5c04: \u522b\u540d -&gt; \u5b9e\u9645\u952e\n    self._aliases: dict[str, ServiceKey] = {}\n</code></pre>"},{"location":"en/guaids/container/#symphra_container.container.Container.__setitem__","title":"<code>__setitem__(key, value)</code>","text":"<p>\u7b80\u5199\u8bed\u6cd5: container[\"key\"] = instance.</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>key</code> <code>ServiceKey</code> <p>\u670d\u52a1\u952e</p> \u5fc5\u9700 <code>value</code> <code>Any</code> <p>\u670d\u52a1\u5b9e\u4f8b\u6216\u7c7b\u578b</p> \u5fc5\u9700 <p>\u793a\u4f8b\uff1a</p> <pre><code>&gt;&gt;&gt; container[\"config\"] = config_obj\n&gt;&gt;&gt; container[IService] = ServiceImpl\n</code></pre> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/container.py</code> <pre><code>def __setitem__(self, key: ServiceKey, value: Any) -&gt; None:\n    \"\"\"\u7b80\u5199\u8bed\u6cd5: container[\"key\"] = instance.\n\n    Args:\n        key: \u670d\u52a1\u952e\n        value: \u670d\u52a1\u5b9e\u4f8b\u6216\u7c7b\u578b\n\n    Examples:\n        &gt;&gt;&gt; container[\"config\"] = config_obj\n        &gt;&gt;&gt; container[IService] = ServiceImpl\n    \"\"\"\n    if isinstance(value, type):\n        self.register(value, key=key, override=True)\n    else:\n        self.register_instance(key, value, override=True)\n</code></pre>"},{"location":"en/guaids/container/#symphra_container.container.Container.add_interceptor","title":"<code>add_interceptor(interceptor_type, interceptor)</code>","text":"<p>\u6dfb\u52a0\u62e6\u622a\u5668.</p> <p>\u652f\u6301 \"before\", \"after\", \"error\" \u4e09\u79cd\u7c7b\u578b.</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>interceptor_type</code> <code>str</code> <p>\u62e6\u622a\u5668\u7c7b\u578b</p> \u5fc5\u9700 <code>interceptor</code> <code>Any</code> <p>\u62e6\u622a\u5668\u51fd\u6570</p> \u5fc5\u9700 <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>Container</code> <p>\u5bb9\u5668\u5b9e\u4f8b(\u652f\u6301\u94fe\u5f0f\u8c03\u7528)</p> <p>\u5f15\u53d1\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>ValueError</code> <p>\u62e6\u622a\u5668\u7c7b\u578b\u65e0\u6548\u65f6</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>&gt;&gt;&gt; def log_before(key, registration):\n...     print(f\"\u89e3\u6790: {key}\")\n...     return True\n&gt;&gt;&gt; container.add_interceptor(\"before\", log_before)\n</code></pre> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/container.py</code> <pre><code>def add_interceptor(\n    self,\n    interceptor_type: str,\n    interceptor: Any,\n) -&gt; Container:\n    \"\"\"\u6dfb\u52a0\u62e6\u622a\u5668.\n\n    \u652f\u6301 \"before\", \"after\", \"error\" \u4e09\u79cd\u7c7b\u578b.\n\n    Args:\n        interceptor_type: \u62e6\u622a\u5668\u7c7b\u578b\n        interceptor: \u62e6\u622a\u5668\u51fd\u6570\n\n    Returns:\n        \u5bb9\u5668\u5b9e\u4f8b(\u652f\u6301\u94fe\u5f0f\u8c03\u7528)\n\n    Raises:\n        ValueError: \u62e6\u622a\u5668\u7c7b\u578b\u65e0\u6548\u65f6\n\n    Examples:\n        &gt;&gt;&gt; def log_before(key, registration):\n        ...     print(f\"\u89e3\u6790: {key}\")\n        ...     return True\n        &gt;&gt;&gt; container.add_interceptor(\"before\", log_before)\n    \"\"\"\n    if interceptor_type not in self._interceptors:\n        msg = f\"Invalid interceptor type: {interceptor_type}\"\n        raise ValueError(msg)\n\n    self._interceptors[interceptor_type].append(interceptor)\n    return self\n</code></pre>"},{"location":"en/guaids/container/#symphra_container.container.Container.alias","title":"<code>alias(key, alias)</code>","text":"<p>\u4e3a\u670d\u52a1\u521b\u5efa\u522b\u540d.</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>key</code> <code>ServiceKey</code> <p>\u539f\u59cb\u670d\u52a1\u952e</p> \u5fc5\u9700 <code>alias</code> <code>str</code> <p>\u522b\u540d</p> \u5fc5\u9700 <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>Container</code> <p>\u5bb9\u5668\u5b9e\u4f8b(\u652f\u6301\u94fe\u5f0f\u8c03\u7528)</p> <p>\u5f15\u53d1\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>ServiceNotFoundError</code> <p>\u670d\u52a1\u4e0d\u5b58\u5728\u65f6</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>&gt;&gt;&gt; container.alias(DatabaseService, \"db\")\n&gt;&gt;&gt; db = container.resolve(\"db\")\n</code></pre> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/container.py</code> <pre><code>def alias(self, key: ServiceKey, alias: str) -&gt; Container:\n    \"\"\"\u4e3a\u670d\u52a1\u521b\u5efa\u522b\u540d.\n\n    Args:\n        key: \u539f\u59cb\u670d\u52a1\u952e\n        alias: \u522b\u540d\n\n    Returns:\n        \u5bb9\u5668\u5b9e\u4f8b(\u652f\u6301\u94fe\u5f0f\u8c03\u7528)\n\n    Raises:\n        ServiceNotFoundError: \u670d\u52a1\u4e0d\u5b58\u5728\u65f6\n\n    Examples:\n        &gt;&gt;&gt; container.alias(DatabaseService, \"db\")\n        &gt;&gt;&gt; db = container.resolve(\"db\")\n    \"\"\"\n    if key not in self._registrations:\n        raise ServiceNotFoundError(key, list(self._registrations.keys()))\n\n    self._aliases[alias] = key\n    return self\n</code></pre>"},{"location":"en/guaids/container/#symphra_container.container.Container.clear","title":"<code>clear(lifetime=None)</code>","text":"<p>\u6e05\u7a7a\u5bb9\u5668\u4e2d\u7684\u670d\u52a1.</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>lifetime</code> <code>Lifetime | None</code> <p>\u53ef\u9009,\u4ec5\u6e05\u7a7a\u6307\u5b9a\u751f\u547d\u5468\u671f\u7684\u670d\u52a1</p> <code>None</code> <p>\u793a\u4f8b\uff1a</p> <pre><code>&gt;&gt;&gt; container.clear()  # \u6e05\u7a7a\u6240\u6709\n&gt;&gt;&gt; container.clear(Lifetime.TRANSIENT)  # \u4ec5\u6e05\u7a7a Transient\n</code></pre> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/container.py</code> <pre><code>def clear(self, lifetime: Lifetime | None = None) -&gt; None:\n    \"\"\"\u6e05\u7a7a\u5bb9\u5668\u4e2d\u7684\u670d\u52a1.\n\n    Args:\n        lifetime: \u53ef\u9009,\u4ec5\u6e05\u7a7a\u6307\u5b9a\u751f\u547d\u5468\u671f\u7684\u670d\u52a1\n\n    Examples:\n        &gt;&gt;&gt; container.clear()  # \u6e05\u7a7a\u6240\u6709\n        &gt;&gt;&gt; container.clear(Lifetime.TRANSIENT)  # \u4ec5\u6e05\u7a7a Transient\n    \"\"\"\n    if lifetime is None:\n        # \u6e05\u7a7a\u6240\u6709\n        self._registrations.clear()\n        self._aliases.clear()\n        self._lifetime_manager.clear()\n    else:\n        # \u6e05\u7a7a\u6307\u5b9a\u751f\u547d\u5468\u671f\n        to_remove = [key for key, reg in self._registrations.items() if reg.lifetime == lifetime]\n        for key in to_remove:\n            self.unregister(key)\n</code></pre>"},{"location":"en/guaids/container/#symphra_container.container.Container.create_scope","title":"<code>create_scope()</code>","text":"<p>\u521b\u5efa\u65b0\u7684\u4f5c\u7528\u57df.</p> <p>\u7528\u4e8e\u7ba1\u7406 SCOPED \u751f\u547d\u5468\u671f\u7684\u670d\u52a1.</p> <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>Scope</code> <p>\u4f5c\u7528\u57df\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>&gt;&gt;&gt; with container.create_scope() as scope:\n...     service = scope.resolve(ScopedService)\n...     # \u5728\u4f5c\u7528\u57df\u5185\u4f7f\u7528\u670d\u52a1\n</code></pre> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/container.py</code> <pre><code>def create_scope(self) -&gt; Scope:\n    \"\"\"\u521b\u5efa\u65b0\u7684\u4f5c\u7528\u57df.\n\n    \u7528\u4e8e\u7ba1\u7406 SCOPED \u751f\u547d\u5468\u671f\u7684\u670d\u52a1.\n\n    Returns:\n        \u4f5c\u7528\u57df\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\n\n    Examples:\n        &gt;&gt;&gt; with container.create_scope() as scope:\n        ...     service = scope.resolve(ScopedService)\n        ...     # \u5728\u4f5c\u7528\u57df\u5185\u4f7f\u7528\u670d\u52a1\n    \"\"\"\n    return Scope(self)\n</code></pre>"},{"location":"en/guaids/container/#symphra_container.container.Container.dispose","title":"<code>dispose()</code>","text":"<p>\u91ca\u653e\u5bb9\u5668\u53ca\u5176\u6240\u6709\u8d44\u6e90.</p> <p>\u5305\u62ec\u5355\u4f8b\u5b9e\u4f8b,\u4f5c\u7528\u57df\u7b49.</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/container.py</code> <pre><code>def dispose(self) -&gt; None:\n    \"\"\"\u91ca\u653e\u5bb9\u5668\u53ca\u5176\u6240\u6709\u8d44\u6e90.\n\n    \u5305\u62ec\u5355\u4f8b\u5b9e\u4f8b,\u4f5c\u7528\u57df\u7b49.\n    \"\"\"\n    self._lifetime_manager.dispose_all()\n    self._registrations.clear()\n    self._interceptors.clear()\n    self._circular_detector.reset()\n    self._performance_metrics.reset()\n</code></pre>"},{"location":"en/guaids/container/#symphra_container.container.Container.get_all_registrations","title":"<code>get_all_registrations()</code>","text":"<p>\u83b7\u53d6\u6240\u6709\u6ce8\u518c\u4fe1\u606f.</p> <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>dict[ServiceKey, ServiceRegistration]</code> <p>\u6240\u6709\u6ce8\u518c\u4fe1\u606f\u7684\u5b57\u5178</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/container.py</code> <pre><code>def get_all_registrations(self) -&gt; dict[ServiceKey, ServiceRegistration]:\n    \"\"\"\u83b7\u53d6\u6240\u6709\u6ce8\u518c\u4fe1\u606f.\n\n    Returns:\n        \u6240\u6709\u6ce8\u518c\u4fe1\u606f\u7684\u5b57\u5178\n    \"\"\"\n    return self._registrations.copy()\n</code></pre>"},{"location":"en/guaids/container/#symphra_container.container.Container.get_performance_stats","title":"<code>get_performance_stats()</code>","text":"<p>\u83b7\u53d6\u6027\u80fd\u7edf\u8ba1\u4fe1\u606f.</p> <p>\u8fd4\u56de\u5bb9\u5668\u7684\u6027\u80fd\u6307\u6807,\u5305\u62ec\u89e3\u6790\u6b21\u6570,\u7f13\u5b58\u547d\u4e2d\u7387\u7b49.</p> <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>dict[str, Any]</code> <p>\u5305\u542b\u6027\u80fd\u6307\u6807\u7684\u5b57\u5178</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>&gt;&gt;&gt; container = Container(enable_performance_tracking=True)\n&gt;&gt;&gt; container.register(UserService)\n&gt;&gt;&gt; container.resolve(UserService)\n&gt;&gt;&gt; stats = container.get_performance_stats()\n&gt;&gt;&gt; print(f\"Total resolutions: {stats['total_resolutions']}\")\n</code></pre> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/container.py</code> <pre><code>def get_performance_stats(self) -&gt; dict[str, Any]:\n    \"\"\"\u83b7\u53d6\u6027\u80fd\u7edf\u8ba1\u4fe1\u606f.\n\n    \u8fd4\u56de\u5bb9\u5668\u7684\u6027\u80fd\u6307\u6807,\u5305\u62ec\u89e3\u6790\u6b21\u6570,\u7f13\u5b58\u547d\u4e2d\u7387\u7b49.\n\n    Returns:\n        \u5305\u542b\u6027\u80fd\u6307\u6807\u7684\u5b57\u5178\n\n    Examples:\n        &gt;&gt;&gt; container = Container(enable_performance_tracking=True)\n        &gt;&gt;&gt; container.register(UserService)\n        &gt;&gt;&gt; container.resolve(UserService)\n        &gt;&gt;&gt; stats = container.get_performance_stats()\n        &gt;&gt;&gt; print(f\"Total resolutions: {stats['total_resolutions']}\")\n    \"\"\"\n    return self._performance_metrics.get_stats()\n</code></pre>"},{"location":"en/guaids/container/#symphra_container.container.Container.get_registration","title":"<code>get_registration(key)</code>","text":"<p>\u83b7\u53d6\u670d\u52a1\u6ce8\u518c\u4fe1\u606f.</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>key</code> <code>ServiceKey</code> <p>\u670d\u52a1\u952e</p> \u5fc5\u9700 <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>ServiceRegistration | None</code> <p>\u6ce8\u518c\u4fe1\u606f\u6216 None</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/container.py</code> <pre><code>def get_registration(self, key: ServiceKey) -&gt; ServiceRegistration | None:\n    \"\"\"\u83b7\u53d6\u670d\u52a1\u6ce8\u518c\u4fe1\u606f.\n\n    Args:\n        key: \u670d\u52a1\u952e\n\n    Returns:\n        \u6ce8\u518c\u4fe1\u606f\u6216 None\n    \"\"\"\n    return self._registrations.get(key)\n</code></pre>"},{"location":"en/guaids/container/#symphra_container.container.Container.has","title":"<code>has(key)</code>","text":"<p>\u68c0\u67e5\u670d\u52a1\u662f\u5426\u5df2\u6ce8\u518c(is_registered\u7684\u522b\u540d).</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>key</code> <code>ServiceKey</code> <p>\u670d\u52a1\u952e</p> \u5fc5\u9700 <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>bool</code> <p>\u662f\u5426\u5df2\u6ce8\u518c</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>&gt;&gt;&gt; container.has(UserService)\nTrue\n</code></pre> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/container.py</code> <pre><code>def has(self, key: ServiceKey) -&gt; bool:\n    \"\"\"\u68c0\u67e5\u670d\u52a1\u662f\u5426\u5df2\u6ce8\u518c(is_registered\u7684\u522b\u540d).\n\n    Args:\n        key: \u670d\u52a1\u952e\n\n    Returns:\n        \u662f\u5426\u5df2\u6ce8\u518c\n\n    Examples:\n        &gt;&gt;&gt; container.has(UserService)\n        True\n    \"\"\"\n    return self.is_registered(key)\n</code></pre>"},{"location":"en/guaids/container/#symphra_container.container.Container.is_registered","title":"<code>is_registered(key)</code>","text":"<p>\u68c0\u67e5\u670d\u52a1\u662f\u5426\u5df2\u6ce8\u518c.</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>key</code> <code>ServiceKey</code> <p>\u670d\u52a1\u952e\u6216\u522b\u540d</p> \u5fc5\u9700 <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>bool</code> <p>\u662f\u5426\u5df2\u6ce8\u518c</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/container.py</code> <pre><code>def is_registered(self, key: ServiceKey) -&gt; bool:\n    \"\"\"\u68c0\u67e5\u670d\u52a1\u662f\u5426\u5df2\u6ce8\u518c.\n\n    Args:\n        key: \u670d\u52a1\u952e\u6216\u522b\u540d\n\n    Returns:\n        \u662f\u5426\u5df2\u6ce8\u518c\n    \"\"\"\n    return key in self._registrations or key in self._aliases\n</code></pre>"},{"location":"en/guaids/container/#symphra_container.container.Container.register","title":"<code>register(service_type, *, key=None, lifetime=Lifetime.TRANSIENT, override=False)</code>","text":"<p>\u6ce8\u518c\u4e00\u4e2a\u670d\u52a1.</p> <p>\u6700\u57fa\u7840\u7684\u6ce8\u518c\u65b9\u6cd5,\u4f7f\u7528\u670d\u52a1\u7c7b\u672c\u8eab\u521b\u5efa\u5b9e\u4f8b.</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>service_type</code> <code>type</code> <p>\u670d\u52a1\u7c7b\u578b</p> \u5fc5\u9700 <code>key</code> <code>ServiceKey | None</code> <p>\u670d\u52a1\u952e(\u9ed8\u8ba4\u4e3a service_type)</p> <code>None</code> <code>lifetime</code> <code>Lifetime</code> <p>\u751f\u547d\u5468\u671f(\u9ed8\u8ba4 TRANSIENT)</p> <code>TRANSIENT</code> <code>override</code> <code>bool</code> <p>\u662f\u5426\u8986\u76d6\u5df2\u5b58\u5728\u7684\u670d\u52a1</p> <code>False</code> <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>Container</code> <p>\u5bb9\u5668\u5b9e\u4f8b(\u652f\u6301\u94fe\u5f0f\u8c03\u7528)</p> <p>\u5f15\u53d1\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>RegistrationError</code> <p>\u6ce8\u518c\u5931\u8d25\u65f6</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>&gt;&gt;&gt; container = Container()\n&gt;&gt;&gt; container.register(UserService)\n&gt;&gt;&gt; container.register(DatabaseService, lifetime=Lifetime.SINGLETON)\n&gt;&gt;&gt; service = container.resolve(UserService)\n</code></pre> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/container.py</code> <pre><code>def register(\n    self,\n    service_type: type,\n    *,\n    key: ServiceKey | None = None,\n    lifetime: Lifetime = Lifetime.TRANSIENT,\n    override: bool = False,\n) -&gt; Container:\n    \"\"\"\u6ce8\u518c\u4e00\u4e2a\u670d\u52a1.\n\n    \u6700\u57fa\u7840\u7684\u6ce8\u518c\u65b9\u6cd5,\u4f7f\u7528\u670d\u52a1\u7c7b\u672c\u8eab\u521b\u5efa\u5b9e\u4f8b.\n\n    Args:\n        service_type: \u670d\u52a1\u7c7b\u578b\n        key: \u670d\u52a1\u952e(\u9ed8\u8ba4\u4e3a service_type)\n        lifetime: \u751f\u547d\u5468\u671f(\u9ed8\u8ba4 TRANSIENT)\n        override: \u662f\u5426\u8986\u76d6\u5df2\u5b58\u5728\u7684\u670d\u52a1\n\n    Returns:\n        \u5bb9\u5668\u5b9e\u4f8b(\u652f\u6301\u94fe\u5f0f\u8c03\u7528)\n\n    Raises:\n        RegistrationError: \u6ce8\u518c\u5931\u8d25\u65f6\n\n    Examples:\n        &gt;&gt;&gt; container = Container()\n        &gt;&gt;&gt; container.register(UserService)\n        &gt;&gt;&gt; container.register(DatabaseService, lifetime=Lifetime.SINGLETON)\n        &gt;&gt;&gt; service = container.resolve(UserService)\n    \"\"\"\n    # \u5982\u679c\u670d\u52a1\u7c7b\u578b\u5e26\u6709\u88c5\u9970\u5668\u5143\u6570\u636e,\u4f18\u5148\u4f7f\u7528\u5143\u6570\u636e\u4e2d\u7684\u952e\u4e0e\u751f\u547d\u5468\u671f\n    metadata = get_service_metadata(service_type)\n    decorated_override = False\n    if metadata is not None:\n        # \u4f7f\u7528\u88c5\u9970\u5668\u63d0\u4f9b\u7684 key (\u5982\u672a\u663e\u5f0f\u4f20\u5165)\n        key = key or metadata.key or service_type\n        # \u4f7f\u7528\u88c5\u9970\u5668\u63d0\u4f9b\u7684\u751f\u547d\u5468\u671f\n        lifetime = metadata.lifetime\n        # \u5bf9\u88c5\u9970\u8fc7\u7684\u670d\u52a1\u9ed8\u8ba4\u5141\u8bb8\u91cd\u590d\u6ce8\u518c(\u8986\u76d6)\n        decorated_override = True\n    else:\n        key = key or service_type\n\n    # \u68c0\u67e5\u662f\u5426\u5df2\u6ce8\u518c\n    if key in self._registrations and not (override or decorated_override):\n        raise RegistrationError(\n            key,\n            \"Service already registered. Use override=True to replace it.\",\n        )\n\n    registration = ServiceRegistration(\n        key=key,\n        service_type=service_type,\n        factory=service_type,\n        lifetime=lifetime,\n        override=override or decorated_override,\n    )\n    self._registrations[key] = registration\n\n    return self\n</code></pre>"},{"location":"en/guaids/container/#symphra_container.container.Container.register_async_factory","title":"<code>register_async_factory(key, factory, *, service_type=None, lifetime=Lifetime.TRANSIENT, override=False)</code>","text":"<p>\u6ce8\u518c\u4e00\u4e2a\u5f02\u6b65\u5de5\u5382\u51fd\u6570.</p> <p>\u26a0\ufe0f DEPRECATED: \u6b64\u65b9\u6cd5\u5df2\u5e9f\u5f03,\u8bf7\u4f7f\u7528 register_factory() \u4ee3\u66ff\u3002 Container \u73b0\u5728\u81ea\u52a8\u68c0\u6d4b\u5de5\u5382\u51fd\u6570\u662f\u5426\u4e3a\u5f02\u6b65\u3002</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>key</code> <code>ServiceKey</code> <p>\u670d\u52a1\u952e</p> \u5fc5\u9700 <code>factory</code> <code>Callable[..., T]</code> <p>\u5f02\u6b65\u5de5\u5382\u51fd\u6570</p> \u5fc5\u9700 <code>service_type</code> <code>type | None</code> <p>\u670d\u52a1\u7c7b\u578b</p> <code>None</code> <code>lifetime</code> <code>Lifetime</code> <p>\u751f\u547d\u5468\u671f</p> <code>TRANSIENT</code> <code>override</code> <code>bool</code> <p>\u662f\u5426\u8986\u76d6\u5df2\u5b58\u5728\u7684\u670d\u52a1</p> <code>False</code> <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>Container</code> <p>\u5bb9\u5668\u5b9e\u4f8b(\u652f\u6301\u94fe\u5f0f\u8c03\u7528)</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/container.py</code> <pre><code>def register_async_factory(\n    self,\n    key: ServiceKey,\n    factory: Callable[..., T],\n    *,\n    service_type: type | None = None,\n    lifetime: Lifetime = Lifetime.TRANSIENT,\n    override: bool = False,\n) -&gt; Container:\n    \"\"\"\u6ce8\u518c\u4e00\u4e2a\u5f02\u6b65\u5de5\u5382\u51fd\u6570.\n\n    \u26a0\ufe0f DEPRECATED: \u6b64\u65b9\u6cd5\u5df2\u5e9f\u5f03,\u8bf7\u4f7f\u7528 register_factory() \u4ee3\u66ff\u3002\n    Container \u73b0\u5728\u81ea\u52a8\u68c0\u6d4b\u5de5\u5382\u51fd\u6570\u662f\u5426\u4e3a\u5f02\u6b65\u3002\n\n    Args:\n        key: \u670d\u52a1\u952e\n        factory: \u5f02\u6b65\u5de5\u5382\u51fd\u6570\n        service_type: \u670d\u52a1\u7c7b\u578b\n        lifetime: \u751f\u547d\u5468\u671f\n        override: \u662f\u5426\u8986\u76d6\u5df2\u5b58\u5728\u7684\u670d\u52a1\n\n    Returns:\n        \u5bb9\u5668\u5b9e\u4f8b(\u652f\u6301\u94fe\u5f0f\u8c03\u7528)\n    \"\"\"\n    # \u76f4\u63a5\u8c03\u7528 register_factory,\u5b83\u4f1a\u81ea\u52a8\u68c0\u6d4b\u5f02\u6b65\n    return self.register_factory(\n        key=key,\n        factory=factory,\n        service_type=service_type,\n        lifetime=lifetime,\n        override=override,\n    )\n</code></pre>"},{"location":"en/guaids/container/#symphra_container.container.Container.register_factory","title":"<code>register_factory(key, factory, *, service_type=None, lifetime=Lifetime.TRANSIENT, override=False)</code>","text":"<p>\u6ce8\u518c\u4e00\u4e2a\u5de5\u5382\u51fd\u6570.</p> <p>\u4f7f\u7528\u5de5\u5382\u51fd\u6570\u6765\u521b\u5efa\u670d\u52a1\u5b9e\u4f8b.</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>key</code> <code>ServiceKey</code> <p>\u670d\u52a1\u952e</p> \u5fc5\u9700 <code>factory</code> <code>Callable[..., T]</code> <p>\u5de5\u5382\u51fd\u6570</p> \u5fc5\u9700 <code>service_type</code> <code>type | None</code> <p>\u670d\u52a1\u7c7b\u578b(\u9ed8\u8ba4\u4e3a\u5de5\u5382\u7684\u8fd4\u56de\u7c7b\u578b)</p> <code>None</code> <code>lifetime</code> <code>Lifetime</code> <p>\u751f\u547d\u5468\u671f</p> <code>TRANSIENT</code> <code>override</code> <code>bool</code> <p>\u662f\u5426\u8986\u76d6\u5df2\u5b58\u5728\u7684\u670d\u52a1</p> <code>False</code> <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>Container</code> <p>\u5bb9\u5668\u5b9e\u4f8b(\u652f\u6301\u94fe\u5f0f\u8c03\u7528)</p> <p>\u5f15\u53d1\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>RegistrationError</code> <p>\u6ce8\u518c\u5931\u8d25\u65f6</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>&gt;&gt;&gt; def create_db() -&gt; Database:\n...     db = Database()\n...     db.connect()\n...     return db\n&gt;&gt;&gt; container.register_factory(\n...     \"database\",\n...     create_db,\n...     lifetime=Lifetime.SINGLETON\n... )\n</code></pre> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/container.py</code> <pre><code>def register_factory(\n    self,\n    key: ServiceKey,\n    factory: Callable[..., T],\n    *,\n    service_type: type | None = None,\n    lifetime: Lifetime = Lifetime.TRANSIENT,\n    override: bool = False,\n) -&gt; Container:\n    \"\"\"\u6ce8\u518c\u4e00\u4e2a\u5de5\u5382\u51fd\u6570.\n\n    \u4f7f\u7528\u5de5\u5382\u51fd\u6570\u6765\u521b\u5efa\u670d\u52a1\u5b9e\u4f8b.\n\n    Args:\n        key: \u670d\u52a1\u952e\n        factory: \u5de5\u5382\u51fd\u6570\n        service_type: \u670d\u52a1\u7c7b\u578b(\u9ed8\u8ba4\u4e3a\u5de5\u5382\u7684\u8fd4\u56de\u7c7b\u578b)\n        lifetime: \u751f\u547d\u5468\u671f\n        override: \u662f\u5426\u8986\u76d6\u5df2\u5b58\u5728\u7684\u670d\u52a1\n\n    Returns:\n        \u5bb9\u5668\u5b9e\u4f8b(\u652f\u6301\u94fe\u5f0f\u8c03\u7528)\n\n    Raises:\n        RegistrationError: \u6ce8\u518c\u5931\u8d25\u65f6\n\n    Examples:\n        &gt;&gt;&gt; def create_db() -&gt; Database:\n        ...     db = Database()\n        ...     db.connect()\n        ...     return db\n        &gt;&gt;&gt; container.register_factory(\n        ...     \"database\",\n        ...     create_db,\n        ...     lifetime=Lifetime.SINGLETON\n        ... )\n    \"\"\"\n    if key in self._registrations and not override:\n        raise RegistrationError(\n            key,\n            \"Service already registered. Use override=True to replace it.\",\n        )\n\n    service_type = service_type or type(None)\n\n    registration = ServiceRegistration(\n        key=key,\n        service_type=service_type,\n        factory=factory,\n        lifetime=lifetime,\n        override=override,\n    )\n    self._registrations[key] = registration\n\n    return self\n</code></pre>"},{"location":"en/guaids/container/#symphra_container.container.Container.register_instance","title":"<code>register_instance(key, instance, override=False)</code>","text":"<p>\u6ce8\u518c\u4e00\u4e2a\u5355\u4f8b\u5b9e\u4f8b.</p> <p>\u76f4\u63a5\u6ce8\u518c\u4e00\u4e2a\u5df2\u7ecf\u521b\u5efa\u7684\u5b9e\u4f8b\u4f5c\u4e3a\u5355\u4f8b.</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>key</code> <code>ServiceKey</code> <p>\u670d\u52a1\u952e</p> \u5fc5\u9700 <code>instance</code> <code>Any</code> <p>\u670d\u52a1\u5b9e\u4f8b</p> \u5fc5\u9700 <code>override</code> <code>bool</code> <p>\u662f\u5426\u8986\u76d6\u5df2\u5b58\u5728\u7684\u670d\u52a1</p> <code>False</code> <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>Container</code> <p>\u5bb9\u5668\u5b9e\u4f8b(\u652f\u6301\u94fe\u5f0f\u8c03\u7528)</p> <p>\u5f15\u53d1\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>RegistrationError</code> <p>\u6ce8\u518c\u5931\u8d25\u65f6</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>&gt;&gt;&gt; config = Config()\n&gt;&gt;&gt; container.register_instance(\"config\", config)\n&gt;&gt;&gt; resolved_config = container.resolve(\"config\")\n&gt;&gt;&gt; assert resolved_config is config\n</code></pre> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/container.py</code> <pre><code>def register_instance(\n    self,\n    key: ServiceKey,\n    instance: Any,\n    override: bool = False,\n) -&gt; Container:\n    \"\"\"\u6ce8\u518c\u4e00\u4e2a\u5355\u4f8b\u5b9e\u4f8b.\n\n    \u76f4\u63a5\u6ce8\u518c\u4e00\u4e2a\u5df2\u7ecf\u521b\u5efa\u7684\u5b9e\u4f8b\u4f5c\u4e3a\u5355\u4f8b.\n\n    Args:\n        key: \u670d\u52a1\u952e\n        instance: \u670d\u52a1\u5b9e\u4f8b\n        override: \u662f\u5426\u8986\u76d6\u5df2\u5b58\u5728\u7684\u670d\u52a1\n\n    Returns:\n        \u5bb9\u5668\u5b9e\u4f8b(\u652f\u6301\u94fe\u5f0f\u8c03\u7528)\n\n    Raises:\n        RegistrationError: \u6ce8\u518c\u5931\u8d25\u65f6\n\n    Examples:\n        &gt;&gt;&gt; config = Config()\n        &gt;&gt;&gt; container.register_instance(\"config\", config)\n        &gt;&gt;&gt; resolved_config = container.resolve(\"config\")\n        &gt;&gt;&gt; assert resolved_config is config\n    \"\"\"\n    if key in self._registrations and not override:\n        raise RegistrationError(\n            key,\n            \"Service already registered. Use override=True to replace it.\",\n        )\n\n    # \u521b\u5efa\u4e00\u4e2a\u8fd4\u56de\u8be5\u5b9e\u4f8b\u7684\u5de5\u5382\n    def factory() -&gt; Any:\n        return instance\n\n    registration = ServiceRegistration(\n        key=key,\n        service_type=type(instance),\n        factory=factory,\n        lifetime=Lifetime.SINGLETON,\n        override=override,\n    )\n    self._registrations[key] = registration\n\n    # \u76f4\u63a5\u5b58\u50a8\u5230\u5355\u4f8b\u5b58\u50a8\n    self._lifetime_manager.set_instance(key, instance, Lifetime.SINGLETON)\n\n    return self\n</code></pre>"},{"location":"en/guaids/container/#symphra_container.container.Container.replace","title":"<code>replace(old_key, new_service_type)</code>","text":"<p>\u66ff\u6362\u5df2\u6ce8\u518c\u7684\u670d\u52a1.</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>old_key</code> <code>ServiceKey</code> <p>\u65e7\u670d\u52a1\u952e</p> \u5fc5\u9700 <code>new_service_type</code> <code>type</code> <p>\u65b0\u670d\u52a1\u7c7b\u578b</p> \u5fc5\u9700 <p>\u5f15\u53d1\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>ServiceNotFoundError</code> <p>\u65e7\u670d\u52a1\u4e0d\u5b58\u5728\u65f6</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>&gt;&gt;&gt; container.replace(OldService, NewService)\n</code></pre> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/container.py</code> <pre><code>def replace(self, old_key: ServiceKey, new_service_type: type) -&gt; None:\n    \"\"\"\u66ff\u6362\u5df2\u6ce8\u518c\u7684\u670d\u52a1.\n\n    Args:\n        old_key: \u65e7\u670d\u52a1\u952e\n        new_service_type: \u65b0\u670d\u52a1\u7c7b\u578b\n\n    Raises:\n        ServiceNotFoundError: \u65e7\u670d\u52a1\u4e0d\u5b58\u5728\u65f6\n\n    Examples:\n        &gt;&gt;&gt; container.replace(OldService, NewService)\n    \"\"\"\n    if old_key not in self._registrations:\n        raise ServiceNotFoundError(old_key, list(self._registrations.keys()))\n\n    old_reg = self._registrations[old_key]\n    self.unregister(old_key)\n    self.register(\n        new_service_type,\n        key=old_key,\n        lifetime=old_reg.lifetime,\n        override=True,\n    )\n</code></pre>"},{"location":"en/guaids/container/#symphra_container.container.Container.reset_performance_metrics","title":"<code>reset_performance_metrics()</code>","text":"<p>\u91cd\u7f6e\u6027\u80fd\u6307\u6807.</p> <p>\u6e05\u7a7a\u6240\u6709\u5df2\u8bb0\u5f55\u7684\u6027\u80fd\u6570\u636e.</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/container.py</code> <pre><code>def reset_performance_metrics(self) -&gt; None:\n    \"\"\"\u91cd\u7f6e\u6027\u80fd\u6307\u6807.\n\n    \u6e05\u7a7a\u6240\u6709\u5df2\u8bb0\u5f55\u7684\u6027\u80fd\u6570\u636e.\n    \"\"\"\n    self._performance_metrics.reset()\n</code></pre>"},{"location":"en/guaids/container/#symphra_container.container.Container.resolve","title":"<code>resolve(key)</code>","text":"<pre><code>resolve(key: type[T]) -&gt; T\n</code></pre><pre><code>resolve(key: str) -&gt; Any\n</code></pre> <p>\u89e3\u6790\u670d\u52a1\u5b9e\u4f8b.</p> <p>\u6839\u636e\u670d\u52a1\u952e\u4ece\u5bb9\u5668\u4e2d\u83b7\u53d6\u670d\u52a1\u5b9e\u4f8b. \u8fd9\u662f\u6574\u4e2a DI \u5bb9\u5668\u6700\u6838\u5fc3\u7684\u65b9\u6cd5, \u5305\u542b\u4e86\u5b8c\u6574\u7684\u4f9d\u8d56\u89e3\u6790\u3001\u751f\u547d\u5468\u671f\u7ba1\u7406\u3001\u62e6\u622a\u5668\u6267\u884c\u548c\u6027\u80fd\u8ffd\u8e2a\u903b\u8f91.</p> <p>\u5de5\u4f5c\u6d41\u7a0b: 1. \u9a8c\u8bc1\u670d\u52a1\u5df2\u6ce8\u518c 2. \u6267\u884c\u524d\u7f6e\u62e6\u622a\u5668(\u53ef\u80fd\u62d2\u7edd\u89e3\u6790) 3. \u521d\u59cb\u5316\u6027\u80fd\u8ffd\u8e2a(\u5982\u679c\u542f\u7528) 4. \u5faa\u73af\u4f9d\u8d56\u68c0\u6d4b 5. \u68c0\u67e5\u7f13\u5b58\u5b9e\u4f8b(Singleton/Scoped) 6. \u521b\u5efa\u65b0\u5b9e\u4f8b(\u9012\u5f52\u89e3\u6790\u4f9d\u8d56) 7. \u5b58\u50a8\u5b9e\u4f8b\u5230\u751f\u547d\u5468\u671f\u7ba1\u7406\u5668 8. \u6267\u884c\u540e\u7f6e\u62e6\u622a\u5668\u5e76\u8fd4\u56de\u6700\u7ec8\u5b9e\u4f8b</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>key</code> <code>ServiceKey</code> <p>\u670d\u52a1\u952e(\u53ef\u4ee5\u662f\u7c7b\u578b\u6216\u5b57\u7b26\u4e32)</p> \u5fc5\u9700 <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>Any</code> <p>\u89e3\u6790\u5f97\u5230\u7684\u670d\u52a1\u5b9e\u4f8b</p> <p>\u5f15\u53d1\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>ServiceNotFoundError</code> <p>\u670d\u52a1\u672a\u6ce8\u518c</p> <code>CircularDependencyError</code> <p>\u68c0\u6d4b\u5230\u5faa\u73af\u4f9d\u8d56</p> <code>ResolutionError</code> <p>\u89e3\u6790\u5931\u8d25(\u4f9d\u8d56\u6ce8\u5165\u9519\u8bef\u3001\u5de5\u5382\u5f02\u5e38\u7b49)</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>&gt;&gt;&gt; container.register(UserService)\n&gt;&gt;&gt; service = container.resolve(UserService)\n&gt;&gt;&gt; assert isinstance(service, UserService)\n</code></pre> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/container.py</code> <pre><code>def resolve(self, key: ServiceKey) -&gt; Any:\n    \"\"\"\u89e3\u6790\u670d\u52a1\u5b9e\u4f8b.\n\n    \u6839\u636e\u670d\u52a1\u952e\u4ece\u5bb9\u5668\u4e2d\u83b7\u53d6\u670d\u52a1\u5b9e\u4f8b. \u8fd9\u662f\u6574\u4e2a DI \u5bb9\u5668\u6700\u6838\u5fc3\u7684\u65b9\u6cd5,\n    \u5305\u542b\u4e86\u5b8c\u6574\u7684\u4f9d\u8d56\u89e3\u6790\u3001\u751f\u547d\u5468\u671f\u7ba1\u7406\u3001\u62e6\u622a\u5668\u6267\u884c\u548c\u6027\u80fd\u8ffd\u8e2a\u903b\u8f91.\n\n    \u5de5\u4f5c\u6d41\u7a0b:\n    1. \u9a8c\u8bc1\u670d\u52a1\u5df2\u6ce8\u518c\n    2. \u6267\u884c\u524d\u7f6e\u62e6\u622a\u5668(\u53ef\u80fd\u62d2\u7edd\u89e3\u6790)\n    3. \u521d\u59cb\u5316\u6027\u80fd\u8ffd\u8e2a(\u5982\u679c\u542f\u7528)\n    4. \u5faa\u73af\u4f9d\u8d56\u68c0\u6d4b\n    5. \u68c0\u67e5\u7f13\u5b58\u5b9e\u4f8b(Singleton/Scoped)\n    6. \u521b\u5efa\u65b0\u5b9e\u4f8b(\u9012\u5f52\u89e3\u6790\u4f9d\u8d56)\n    7. \u5b58\u50a8\u5b9e\u4f8b\u5230\u751f\u547d\u5468\u671f\u7ba1\u7406\u5668\n    8. \u6267\u884c\u540e\u7f6e\u62e6\u622a\u5668\u5e76\u8fd4\u56de\u6700\u7ec8\u5b9e\u4f8b\n\n    Args:\n        key: \u670d\u52a1\u952e(\u53ef\u4ee5\u662f\u7c7b\u578b\u6216\u5b57\u7b26\u4e32)\n\n    Returns:\n        \u89e3\u6790\u5f97\u5230\u7684\u670d\u52a1\u5b9e\u4f8b\n\n    Raises:\n        ServiceNotFoundError: \u670d\u52a1\u672a\u6ce8\u518c\n        CircularDependencyError: \u68c0\u6d4b\u5230\u5faa\u73af\u4f9d\u8d56\n        ResolutionError: \u89e3\u6790\u5931\u8d25(\u4f9d\u8d56\u6ce8\u5165\u9519\u8bef\u3001\u5de5\u5382\u5f02\u5e38\u7b49)\n\n    Examples:\n        &gt;&gt;&gt; container.register(UserService)\n        &gt;&gt;&gt; service = container.resolve(UserService)\n        &gt;&gt;&gt; assert isinstance(service, UserService)\n    \"\"\"\n    # \u6b65\u9aa4 0: \u68c0\u67e5\u662f\u5426\u4e3a\u522b\u540d, \u5982\u679c\u662f\u5219\u8f6c\u6362\u4e3a\u5b9e\u9645\u952e\n    if key in self._aliases:\n        key = self._aliases[key]\n\n    # Handle Lazy types\n    origin = get_origin(key)\n    if origin == LazyTypeMarker:\n        args = get_args(key)\n        if args:\n            inner_key = args[0]\n            return Lazy(inner_key, _resolver=self.resolve)\n        else:\n            raise ResolutionError(key, Exception(\"Lazy type must have arguments\"))\n    if key not in self._registrations:\n        available_services = list(self._registrations.keys())\n        raise ServiceNotFoundError(key, available_services)\n\n    registration = self._registrations[key]\n\n    # \u68c0\u67e5\u662f\u5426\u5c1d\u8bd5\u540c\u6b65\u89e3\u6790\u5f02\u6b65\u670d\u52a1\n    if registration.is_async:\n        raise ResolutionError(\n            key,\n            Exception(f\"Service {key} has async factory, use resolve_async() instead of resolve()\"),\n        )\n\n    # \u6b65\u9aa4 2: \u6267\u884c\u524d\u7f6e\u62e6\u622a\u5668(\u53ef\u80fd\u62d2\u7edd\u89e3\u6790)\n    self._run_before_interceptors(key, registration)\n\n    # \u6b65\u9aa4 3: \u521d\u59cb\u5316\u6027\u80fd\u8ffd\u8e2a(\u5982\u679c\u542f\u7528)\n    timer = ResolutionTimer() if self._enable_performance_tracking else None\n    cache_hit = False\n\n    try:\n        # \u5f00\u59cb\u8ba1\u65f6\n        if timer:\n            timer.__enter__()\n\n        # \u6b65\u9aa4 4: \u5faa\u73af\u4f9d\u8d56\u68c0\u6d4b - \u8fdb\u5165\u89e3\u6790\u5806\u6808\n        self._circular_detector.enter_resolution(key)\n\n        # \u6b65\u9aa4 5: \u68c0\u67e5\u662f\u5426\u6709\u7f13\u5b58\u5b9e\u4f8b(Singleton/Scoped)\n        cached, cache_hit = self._check_cached_instance(key, registration)\n        if cached is not None:\n            return cached\n\n        # \u6b65\u9aa4 6: \u521b\u5efa\u65b0\u5b9e\u4f8b(\u9012\u5f52\u89e3\u6790\u4f9d\u8d56)\n        instance = self._create_instance(registration)\n\n        # \u6b65\u9aa4 7: \u5b58\u50a8\u5b9e\u4f8b\u5230\u751f\u547d\u5468\u671f\u7ba1\u7406\u5668\n        self._lifetime_manager.set_instance(key, instance, registration.lifetime)\n\n        # \u6b65\u9aa4 8: \u6267\u884c\u540e\u7f6e\u62e6\u622a\u5668\u5e76\u8fd4\u56de\u6700\u7ec8\u5b9e\u4f8b\n        return self._run_after_interceptors(key, instance)\n\n    except ContainerException:\n        # \u5bb9\u5668\u5f02\u5e38\u76f4\u63a5\u91cd\u65b0\u629b\u51fa\n        raise\n    except Exception as e:\n        # \u5176\u4ed6\u5f02\u5e38: \u901a\u77e5\u9519\u8bef\u62e6\u622a\u5668\u5e76\u5305\u88c5\u4e3a ResolutionError\n        self._run_error_interceptors(key, e)\n        raise ResolutionError(key, e) from e\n    finally:\n        # \u6e05\u7406\u5de5\u4f5c: \u4ece\u5faa\u73af\u68c0\u6d4b\u5806\u6808\u4e2d\u79fb\u9664\n        self._circular_detector.exit_resolution(key)\n\n        # \u8bb0\u5f55\u6027\u80fd\u6307\u6807(\u5982\u679c\u542f\u7528\u8ffd\u8e2a)\n        if timer:\n            timer.__exit__(None, None, None)\n            self._performance_metrics.record_resolution(\n                key,\n                timer.elapsed_time,\n                cache_hit=cache_hit,\n            )\n</code></pre>"},{"location":"en/guaids/container/#symphra_container.container.Container.resolve_async","title":"<code>resolve_async(key)</code>  <code>async</code>","text":"<pre><code>resolve_async(key: type[T]) -&gt; T\n</code></pre><pre><code>resolve_async(key: str) -&gt; Any\n</code></pre> <p>\u5f02\u6b65\u89e3\u6790\u670d\u52a1\u5b9e\u4f8b.</p> <p>\u4e0e resolve() \u7c7b\u4f3c,\u4f46\u652f\u6301\u5f02\u6b65\u5de5\u5382\u51fd\u6570\u548c\u5f02\u6b65\u4f9d\u8d56\u89e3\u6790. \u53ef\u4ee5\u89e3\u6790\u540c\u6b65\u670d\u52a1(\u81ea\u52a8\u9002\u914d)\u548c\u5f02\u6b65\u670d\u52a1.</p> <p>\u5de5\u4f5c\u6d41\u7a0b: 1. \u9a8c\u8bc1\u670d\u52a1\u5df2\u6ce8\u518c 2. \u6267\u884c\u524d\u7f6e\u62e6\u622a\u5668 3. \u521d\u59cb\u5316\u6027\u80fd\u8ffd\u8e2a 4. \u5faa\u73af\u4f9d\u8d56\u68c0\u6d4b 5. \u68c0\u67e5\u7f13\u5b58\u5b9e\u4f8b 6. \u521b\u5efa\u65b0\u5b9e\u4f8b(\u652f\u6301\u5f02\u6b65factory\u548c\u4f9d\u8d56) 7. \u5b58\u50a8\u5b9e\u4f8b\u5230\u751f\u547d\u5468\u671f\u7ba1\u7406\u5668 8. \u6267\u884c\u540e\u7f6e\u62e6\u622a\u5668\u5e76\u8fd4\u56de\u5b9e\u4f8b</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>key</code> <code>ServiceKey</code> <p>\u670d\u52a1\u952e(\u53ef\u4ee5\u662f\u7c7b\u578b\u6216\u5b57\u7b26\u4e32)</p> \u5fc5\u9700 <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>Any</code> <p>\u89e3\u6790\u5f97\u5230\u7684\u670d\u52a1\u5b9e\u4f8b</p> <p>\u5f15\u53d1\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>ServiceNotFoundError</code> <p>\u670d\u52a1\u672a\u6ce8\u518c</p> <code>CircularDependencyError</code> <p>\u68c0\u6d4b\u5230\u5faa\u73af\u4f9d\u8d56</p> <code>ResolutionError</code> <p>\u89e3\u6790\u5931\u8d25</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>&gt;&gt;&gt; container.register(AsyncService, factory=create_async_service)\n&gt;&gt;&gt; service = await container.resolve_async(AsyncService)\n&gt;&gt;&gt; assert isinstance(service, AsyncService)\n</code></pre> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/container.py</code> <pre><code>async def resolve_async(self, key: ServiceKey) -&gt; Any:\n    \"\"\"\u5f02\u6b65\u89e3\u6790\u670d\u52a1\u5b9e\u4f8b.\n\n    \u4e0e resolve() \u7c7b\u4f3c,\u4f46\u652f\u6301\u5f02\u6b65\u5de5\u5382\u51fd\u6570\u548c\u5f02\u6b65\u4f9d\u8d56\u89e3\u6790.\n    \u53ef\u4ee5\u89e3\u6790\u540c\u6b65\u670d\u52a1(\u81ea\u52a8\u9002\u914d)\u548c\u5f02\u6b65\u670d\u52a1.\n\n    \u5de5\u4f5c\u6d41\u7a0b:\n    1. \u9a8c\u8bc1\u670d\u52a1\u5df2\u6ce8\u518c\n    2. \u6267\u884c\u524d\u7f6e\u62e6\u622a\u5668\n    3. \u521d\u59cb\u5316\u6027\u80fd\u8ffd\u8e2a\n    4. \u5faa\u73af\u4f9d\u8d56\u68c0\u6d4b\n    5. \u68c0\u67e5\u7f13\u5b58\u5b9e\u4f8b\n    6. \u521b\u5efa\u65b0\u5b9e\u4f8b(\u652f\u6301\u5f02\u6b65factory\u548c\u4f9d\u8d56)\n    7. \u5b58\u50a8\u5b9e\u4f8b\u5230\u751f\u547d\u5468\u671f\u7ba1\u7406\u5668\n    8. \u6267\u884c\u540e\u7f6e\u62e6\u622a\u5668\u5e76\u8fd4\u56de\u5b9e\u4f8b\n\n    Args:\n        key: \u670d\u52a1\u952e(\u53ef\u4ee5\u662f\u7c7b\u578b\u6216\u5b57\u7b26\u4e32)\n\n    Returns:\n        \u89e3\u6790\u5f97\u5230\u7684\u670d\u52a1\u5b9e\u4f8b\n\n    Raises:\n        ServiceNotFoundError: \u670d\u52a1\u672a\u6ce8\u518c\n        CircularDependencyError: \u68c0\u6d4b\u5230\u5faa\u73af\u4f9d\u8d56\n        ResolutionError: \u89e3\u6790\u5931\u8d25\n\n    Examples:\n        &gt;&gt;&gt; container.register(AsyncService, factory=create_async_service)\n        &gt;&gt;&gt; service = await container.resolve_async(AsyncService)\n        &gt;&gt;&gt; assert isinstance(service, AsyncService)\n    \"\"\"\n    # \u6b65\u9aa4 0: \u68c0\u67e5\u662f\u5426\u4e3a\u522b\u540d\n    if key in self._aliases:\n        key = self._aliases[key]\n\n    # Handle Lazy types\n    origin = get_origin(key)\n    if origin == LazyTypeMarker:\n        args = get_args(key)\n        if args:\n            inner_key = args[0]\n            return Lazy(inner_key, _resolver=self.resolve_async)\n        else:\n            raise ResolutionError(key, Exception(\"Lazy type must have arguments\"))\n\n    # \u6b65\u9aa4 1: \u9a8c\u8bc1\u670d\u52a1\u5df2\u6ce8\u518c\n    if key not in self._registrations:\n        available_services = list(self._registrations.keys())\n        raise ServiceNotFoundError(key, available_services)\n\n    registration = self._registrations[key]\n\n    # \u6b65\u9aa4 2: \u6267\u884c\u524d\u7f6e\u62e6\u622a\u5668\n    await self._run_before_interceptors_async(key, registration)\n\n    # \u6b65\u9aa4 3: \u521d\u59cb\u5316\u6027\u80fd\u8ffd\u8e2a\n    timer = ResolutionTimer() if self._enable_performance_tracking else None\n    cache_hit = False\n\n    try:\n        if timer:\n            timer.__enter__()\n\n        # \u6b65\u9aa4 4: \u5faa\u73af\u4f9d\u8d56\u68c0\u6d4b\n        self._circular_detector.enter_resolution(key)\n\n        # \u6b65\u9aa4 5: \u68c0\u67e5\u7f13\u5b58\u5b9e\u4f8b(\u5f02\u6b65\u7248\u672c)\n        cached, cache_hit = await self._check_cached_instance_async(key, registration)\n        if cached is not None:\n            return cached\n\n        # \u6b65\u9aa4 6: \u521b\u5efa\u65b0\u5b9e\u4f8b(\u5f02\u6b65)\n        instance = await self._create_instance_async(registration)\n\n        # \u6b65\u9aa4 7: \u5b58\u50a8\u5b9e\u4f8b\n        self._lifetime_manager.set_instance(key, instance, registration.lifetime)\n\n        # \u6b65\u9aa4 8: \u6267\u884c\u540e\u7f6e\u62e6\u622a\u5668\n        return await self._run_after_interceptors_async(key, instance)\n\n    except ContainerException:\n        raise\n    except Exception as e:\n        await self._run_error_interceptors_async(key, e)\n        raise ResolutionError(key, e) from e\n    finally:\n        self._circular_detector.exit_resolution(key)\n\n        if timer:\n            timer.__exit__(None, None, None)\n            self._performance_metrics.record_resolution(\n                key,\n                timer.elapsed_time,\n                cache_hit=cache_hit,\n            )\n</code></pre>"},{"location":"en/guaids/container/#symphra_container.container.Container.scan","title":"<code>scan(package)</code>","text":"<p>\u626b\u63cf\u5305\u5e76\u81ea\u52a8\u6ce8\u518c\u6240\u6709\u5e26\u88c5\u9970\u5668\u7684\u670d\u52a1.</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>package</code> <code>str | Path</code> <p>\u5305\u540d\u6216\u8def\u5f84</p> \u5fc5\u9700 <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>Container</code> <p>\u5bb9\u5668\u5b9e\u4f8b(\u652f\u6301\u94fe\u5f0f\u8c03\u7528)</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>&gt;&gt;&gt; container.scan(\"myapp.services\")\n&gt;&gt;&gt; container.scan(Path(\"./services\"))\n</code></pre> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/container.py</code> <pre><code>def scan(self, package: str | Path) -&gt; Container:\n    \"\"\"\u626b\u63cf\u5305\u5e76\u81ea\u52a8\u6ce8\u518c\u6240\u6709\u5e26\u88c5\u9970\u5668\u7684\u670d\u52a1.\n\n    Args:\n        package: \u5305\u540d\u6216\u8def\u5f84\n\n    Returns:\n        \u5bb9\u5668\u5b9e\u4f8b(\u652f\u6301\u94fe\u5f0f\u8c03\u7528)\n\n    Examples:\n        &gt;&gt;&gt; container.scan(\"myapp.services\")\n        &gt;&gt;&gt; container.scan(Path(\"./services\"))\n    \"\"\"\n    import contextlib\n\n    from .decorators import auto_register, is_injectable\n\n    if isinstance(package, Path):\n        # \u8def\u5f84\u626b\u63cf\n        package_str = str(package.absolute())\n        spec = importlib.util.spec_from_file_location(\"__scan_module__\", package_str)\n        if spec and spec.loader:\n            module = importlib.util.module_from_spec(spec)\n            spec.loader.exec_module(module)\n            for name in dir(module):\n                obj = getattr(module, name)\n                if is_injectable(obj):\n                    auto_register(self, obj)\n    else:\n        # \u5305\u540d\u626b\u63cf\n        with contextlib.suppress(ImportError):\n            module = importlib.import_module(package)\n            for _, name, _ in pkgutil.walk_packages(\n                module.__path__,\n                prefix=f\"{package}.\",\n            ):\n                with contextlib.suppress(ImportError, AttributeError):\n                    sub_module = importlib.import_module(name)\n                    for attr_name in dir(sub_module):\n                        obj = getattr(sub_module, attr_name)\n                        if is_injectable(obj):\n                            auto_register(self, obj)\n\n    return self\n</code></pre>"},{"location":"en/guaids/container/#symphra_container.container.Container.try_resolve","title":"<code>try_resolve(key, default=None)</code>","text":"<p>\u5c1d\u8bd5\u89e3\u6790\u670d\u52a1,\u5931\u8d25\u8fd4\u56de\u9ed8\u8ba4\u503c.</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>key</code> <code>ServiceKey</code> <p>\u670d\u52a1\u952e</p> \u5fc5\u9700 <code>default</code> <code>T | None</code> <p>\u5931\u8d25\u65f6\u7684\u9ed8\u8ba4\u503c</p> <code>None</code> <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>T | None</code> <p>\u670d\u52a1\u5b9e\u4f8b\u6216\u9ed8\u8ba4\u503c</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>&gt;&gt;&gt; service = container.try_resolve(OptionalService)\n&gt;&gt;&gt; if service is None:\n...     print(\"Service not found\")\n</code></pre> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/container.py</code> <pre><code>def try_resolve(self, key: ServiceKey, default: T | None = None) -&gt; T | None:\n    \"\"\"\u5c1d\u8bd5\u89e3\u6790\u670d\u52a1,\u5931\u8d25\u8fd4\u56de\u9ed8\u8ba4\u503c.\n\n    Args:\n        key: \u670d\u52a1\u952e\n        default: \u5931\u8d25\u65f6\u7684\u9ed8\u8ba4\u503c\n\n    Returns:\n        \u670d\u52a1\u5b9e\u4f8b\u6216\u9ed8\u8ba4\u503c\n\n    Examples:\n        &gt;&gt;&gt; service = container.try_resolve(OptionalService)\n        &gt;&gt;&gt; if service is None:\n        ...     print(\"Service not found\")\n    \"\"\"\n    try:\n        return self.resolve(key)  # type: ignore[return-value]\n    except (ServiceNotFoundError, ResolutionError):\n        return default\n</code></pre>"},{"location":"en/guaids/container/#symphra_container.container.Container.try_resolve_async","title":"<code>try_resolve_async(key, default=None)</code>  <code>async</code>","text":"<p>\u5f02\u6b65\u5c1d\u8bd5\u89e3\u6790\u670d\u52a1,\u5931\u8d25\u8fd4\u56de\u9ed8\u8ba4\u503c.</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>key</code> <code>ServiceKey</code> <p>\u670d\u52a1\u952e</p> \u5fc5\u9700 <code>default</code> <code>T | None</code> <p>\u5931\u8d25\u65f6\u7684\u9ed8\u8ba4\u503c</p> <code>None</code> <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>T | None</code> <p>\u670d\u52a1\u5b9e\u4f8b\u6216\u9ed8\u8ba4\u503c</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>&gt;&gt;&gt; service = await container.try_resolve_async(OptionalService)\n&gt;&gt;&gt; if service is None:\n...     print(\"Service not found\")\n</code></pre> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/container.py</code> <pre><code>async def try_resolve_async(self, key: ServiceKey, default: T | None = None) -&gt; T | None:\n    \"\"\"\u5f02\u6b65\u5c1d\u8bd5\u89e3\u6790\u670d\u52a1,\u5931\u8d25\u8fd4\u56de\u9ed8\u8ba4\u503c.\n\n    Args:\n        key: \u670d\u52a1\u952e\n        default: \u5931\u8d25\u65f6\u7684\u9ed8\u8ba4\u503c\n\n    Returns:\n        \u670d\u52a1\u5b9e\u4f8b\u6216\u9ed8\u8ba4\u503c\n\n    Examples:\n        &gt;&gt;&gt; service = await container.try_resolve_async(OptionalService)\n        &gt;&gt;&gt; if service is None:\n        ...     print(\"Service not found\")\n    \"\"\"\n    try:\n        return await self.resolve_async(key)  # type: ignore[return-value]\n    except (ServiceNotFoundError, ResolutionError):\n        return default\n</code></pre>"},{"location":"en/guaids/container/#symphra_container.container.Container.unregister","title":"<code>unregister(key)</code>","text":"<p>\u5220\u9664\u670d\u52a1\u6ce8\u518c.</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>key</code> <code>ServiceKey</code> <p>\u670d\u52a1\u952e</p> \u5fc5\u9700 <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>bool</code> <p>\u662f\u5426\u6210\u529f\u5220\u9664</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>&gt;&gt;&gt; container.register(Service)\n&gt;&gt;&gt; container.unregister(Service)\nTrue\n</code></pre> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/container.py</code> <pre><code>def unregister(self, key: ServiceKey) -&gt; bool:\n    \"\"\"\u5220\u9664\u670d\u52a1\u6ce8\u518c.\n\n    Args:\n        key: \u670d\u52a1\u952e\n\n    Returns:\n        \u662f\u5426\u6210\u529f\u5220\u9664\n\n    Examples:\n        &gt;&gt;&gt; container.register(Service)\n        &gt;&gt;&gt; container.unregister(Service)\n        True\n    \"\"\"\n    # \u89e3\u6790\u522b\u540d\n    actual_key = self._aliases.get(key, key) if isinstance(key, str) else key\n\n    if actual_key in self._registrations:\n        del self._registrations[actual_key]\n        # \u6e05\u7406\u8be5\u670d\u52a1\u7684\u5b9e\u4f8b\n        self._lifetime_manager.remove_instance(actual_key)\n        return True\n    return False\n</code></pre>"},{"location":"en/guaids/container/#symphra_container.container.Container.warmup","title":"<code>warmup(*keys)</code>","text":"<p>\u9884\u70ed\u670d\u52a1,\u63d0\u524d\u521b\u5efa\u5355\u4f8b\u5b9e\u4f8b.</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>*keys</code> <code>ServiceKey</code> <p>\u8981\u9884\u70ed\u7684\u670d\u52a1\u952e,\u4e0d\u63d0\u4f9b\u5219\u9884\u70ed\u6240\u6709\u5355\u4f8b</p> <code>()</code> <p>\u793a\u4f8b\uff1a</p> <pre><code>&gt;&gt;&gt; container.warmup(DatabaseService, CacheService)\n&gt;&gt;&gt; container.warmup()  # \u9884\u70ed\u6240\u6709\u5355\u4f8b\n</code></pre> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/container.py</code> <pre><code>def warmup(self, *keys: ServiceKey) -&gt; None:\n    \"\"\"\u9884\u70ed\u670d\u52a1,\u63d0\u524d\u521b\u5efa\u5355\u4f8b\u5b9e\u4f8b.\n\n    Args:\n        *keys: \u8981\u9884\u70ed\u7684\u670d\u52a1\u952e,\u4e0d\u63d0\u4f9b\u5219\u9884\u70ed\u6240\u6709\u5355\u4f8b\n\n    Examples:\n        &gt;&gt;&gt; container.warmup(DatabaseService, CacheService)\n        &gt;&gt;&gt; container.warmup()  # \u9884\u70ed\u6240\u6709\u5355\u4f8b\n    \"\"\"\n    import contextlib\n\n    if not keys:\n        # \u9884\u70ed\u6240\u6709\u5355\u4f8b\n        keys = tuple(key for key, reg in self._registrations.items() if reg.lifetime == Lifetime.SINGLETON)\n\n    for key in keys:\n        # \u9884\u70ed\u5931\u8d25\u4e0d\u5f71\u54cd\u540e\u7eed\u670d\u52a1\n        with contextlib.suppress(ContainerException, ResolutionError):\n            self.resolve(key)\n</code></pre>"},{"location":"en/guaids/container/#symphra_container.container.Container.warmup_async","title":"<code>warmup_async(*keys)</code>  <code>async</code>","text":"<p>\u5f02\u6b65\u9884\u70ed\u670d\u52a1,\u63d0\u524d\u521b\u5efa\u5355\u4f8b\u5b9e\u4f8b.</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>*keys</code> <code>ServiceKey</code> <p>\u8981\u9884\u70ed\u7684\u670d\u52a1\u952e,\u4e0d\u63d0\u4f9b\u5219\u9884\u70ed\u6240\u6709\u5355\u4f8b</p> <code>()</code> <p>\u793a\u4f8b\uff1a</p> <pre><code>&gt;&gt;&gt; await container.warmup_async(DatabaseService, CacheService)\n&gt;&gt;&gt; await container.warmup_async()  # \u9884\u70ed\u6240\u6709\u5355\u4f8b\n</code></pre> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/container.py</code> <pre><code>async def warmup_async(self, *keys: ServiceKey) -&gt; None:\n    \"\"\"\u5f02\u6b65\u9884\u70ed\u670d\u52a1,\u63d0\u524d\u521b\u5efa\u5355\u4f8b\u5b9e\u4f8b.\n\n    Args:\n        *keys: \u8981\u9884\u70ed\u7684\u670d\u52a1\u952e,\u4e0d\u63d0\u4f9b\u5219\u9884\u70ed\u6240\u6709\u5355\u4f8b\n\n    Examples:\n        &gt;&gt;&gt; await container.warmup_async(DatabaseService, CacheService)\n        &gt;&gt;&gt; await container.warmup_async()  # \u9884\u70ed\u6240\u6709\u5355\u4f8b\n    \"\"\"\n    import contextlib\n\n    if not keys:\n        # \u9884\u70ed\u6240\u6709\u5355\u4f8b\n        keys = tuple(key for key, reg in self._registrations.items() if reg.lifetime == Lifetime.SINGLETON)\n\n    for key in keys:\n        # \u9884\u70ed\u5931\u8d25\u4e0d\u5f71\u54cd\u540e\u7eed\u670d\u52a1\n        with contextlib.suppress(ContainerException, ResolutionError):\n            await self.resolve_async(key)\n</code></pre>"},{"location":"en/guaids/generics-generic-key/","title":"GenericKey","text":""},{"location":"en/guaids/generics-generic-key/#symphra_container.generics.GenericKey","title":"<code>symphra_container.generics.GenericKey</code>","text":"<p>\u6cdb\u578b\u7c7b\u578b\u952e.</p> <p>\u7528\u4e8e\u533a\u5206\u4e0d\u540c\u53c2\u6570\u7684\u6cdb\u578b\u7c7b\u578b\uff0c\u4f8b\u5982 Repository[User] \u548c Repository[Order]\u3002</p> <p>\u5c5e\u6027\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 <code>origin</code> <p>\u6cdb\u578b\u57fa\u7c7b (\u4f8b\u5982 Repository)</p> <code>args</code> <p>\u7c7b\u578b\u53c2\u6570 (\u4f8b\u5982 (User,))</p> \u793a\u4f8b <p>key1 = GenericKey(Repository, (User,)) key2 = GenericKey(Repository, (Order,)) key1 == key2  # False key1 == GenericKey(Repository, (User,))  # True</p> Source code in <code>src/symphra_container/generics.py</code> <pre><code>class GenericKey:\n    \"\"\"\u6cdb\u578b\u7c7b\u578b\u952e.\n\n    \u7528\u4e8e\u533a\u5206\u4e0d\u540c\u53c2\u6570\u7684\u6cdb\u578b\u7c7b\u578b\uff0c\u4f8b\u5982 Repository[User] \u548c Repository[Order]\u3002\n\n    Attributes:\n        origin: \u6cdb\u578b\u57fa\u7c7b (\u4f8b\u5982 Repository)\n        args: \u7c7b\u578b\u53c2\u6570 (\u4f8b\u5982 (User,))\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; key1 = GenericKey(Repository, (User,))\n        &gt;&gt;&gt; key2 = GenericKey(Repository, (Order,))\n        &gt;&gt;&gt; key1 == key2  # False\n        &gt;&gt;&gt; key1 == GenericKey(Repository, (User,))  # True\n    \"\"\"\n\n    def __init__(self, origin: type, args: tuple[type, ...]) -&gt; None:\n        \"\"\"\u521d\u59cb\u5316\u6cdb\u578b\u952e.\n\n        Args:\n            origin: \u6cdb\u578b\u57fa\u7c7b\n            args: \u7c7b\u578b\u53c2\u6570\u5143\u7ec4\n        \"\"\"\n        self.origin = origin\n        self.args = args\n\n    def __eq__(self, other: object) -&gt; bool:\n        \"\"\"\u5224\u65ad\u76f8\u7b49.\"\"\"\n        if not isinstance(other, GenericKey):\n            return False\n        return self.origin == other.origin and self.args == other.args\n\n    def __hash__(self) -&gt; int:\n        \"\"\"\u8ba1\u7b97\u54c8\u5e0c\u503c.\"\"\"\n        return hash((self.origin, self.args))\n\n    def __repr__(self) -&gt; str:\n        \"\"\"\u5b57\u7b26\u4e32\u8868\u793a.\"\"\"\n        args_str = \", \".join(arg.__name__ for arg in self.args)\n        return f\"{self.origin.__name__}[{args_str}]\"\n</code></pre>"},{"location":"en/guaids/generics-generic-key/#symphra_container.generics.GenericKey.__eq__","title":"<code>__eq__(other)</code>","text":"<p>\u5224\u65ad\u76f8\u7b49.</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/generics.py</code> <pre><code>def __eq__(self, other: object) -&gt; bool:\n    \"\"\"\u5224\u65ad\u76f8\u7b49.\"\"\"\n    if not isinstance(other, GenericKey):\n        return False\n    return self.origin == other.origin and self.args == other.args\n</code></pre>"},{"location":"en/guaids/generics-generic-key/#symphra_container.generics.GenericKey.__hash__","title":"<code>__hash__()</code>","text":"<p>\u8ba1\u7b97\u54c8\u5e0c\u503c.</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/generics.py</code> <pre><code>def __hash__(self) -&gt; int:\n    \"\"\"\u8ba1\u7b97\u54c8\u5e0c\u503c.\"\"\"\n    return hash((self.origin, self.args))\n</code></pre>"},{"location":"en/guaids/generics-generic-key/#symphra_container.generics.GenericKey.__init__","title":"<code>__init__(origin, args)</code>","text":"<p>\u521d\u59cb\u5316\u6cdb\u578b\u952e.</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>origin</code> <code>type</code> <p>\u6cdb\u578b\u57fa\u7c7b</p> \u5fc5\u9700 <code>args</code> <code>tuple[type, ...]</code> <p>\u7c7b\u578b\u53c2\u6570\u5143\u7ec4</p> \u5fc5\u9700 \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/generics.py</code> <pre><code>def __init__(self, origin: type, args: tuple[type, ...]) -&gt; None:\n    \"\"\"\u521d\u59cb\u5316\u6cdb\u578b\u952e.\n\n    Args:\n        origin: \u6cdb\u578b\u57fa\u7c7b\n        args: \u7c7b\u578b\u53c2\u6570\u5143\u7ec4\n    \"\"\"\n    self.origin = origin\n    self.args = args\n</code></pre>"},{"location":"en/guaids/generics-generic-key/#symphra_container.generics.GenericKey.__repr__","title":"<code>__repr__()</code>","text":"<p>\u5b57\u7b26\u4e32\u8868\u793a.</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/generics.py</code> <pre><code>def __repr__(self) -&gt; str:\n    \"\"\"\u5b57\u7b26\u4e32\u8868\u793a.\"\"\"\n    args_str = \", \".join(arg.__name__ for arg in self.args)\n    return f\"{self.origin.__name__}[{args_str}]\"\n</code></pre>"},{"location":"en/guaids/generics-register-generic/","title":"register_generic","text":""},{"location":"en/guaids/generics-register-generic/#symphra_container.generics.register_generic","title":"<code>symphra_container.generics.register_generic(container, generic_type, implementation=None, factory=None, lifetime=None)</code>","text":"<p>\u6ce8\u518c\u6cdb\u578b\u670d\u52a1.</p> <p>\u652f\u6301\u533a\u5206\u4e0d\u540c\u7c7b\u578b\u53c2\u6570\u7684\u6cdb\u578b\u670d\u52a1\u3002</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>container</code> <code>Container</code> <p>\u5bb9\u5668\u5b9e\u4f8b</p> \u5fc5\u9700 <code>generic_type</code> <code>Any</code> <p>\u6cdb\u578b\u7c7b\u578b\uff0c\u4f8b\u5982 Repository[User]</p> \u5fc5\u9700 <code>implementation</code> <code>type | None</code> <p>\u5b9e\u73b0\u7c7b\uff08\u53ef\u9009\uff09</p> <code>None</code> <code>factory</code> <code>Any</code> <p>\u5de5\u5382\u51fd\u6570\uff08\u53ef\u9009\uff09</p> <code>None</code> <code>lifetime</code> <code>Any</code> <p>\u751f\u547d\u5468\u671f\uff08\u53ef\u9009\uff09</p> <code>None</code> <p>\u5f15\u53d1\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>ValueError</code> <p>\u5982\u679c\u4e0d\u662f\u6709\u6548\u7684\u6cdb\u578b\u7c7b\u578b</p> \u793a\u4f8b <p>register_generic(container, Repository[User], UserRepository) register_generic(container, Repository[Order], OrderRepository) register_generic( ...     container, ...     Repository[Product], ...     factory=lambda: ProductRepository() ... )</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/generics.py</code> <pre><code>def register_generic(\n    container: Container,\n    generic_type: Any,\n    implementation: type | None = None,\n    factory: Any = None,\n    lifetime: Any = None,\n) -&gt; None:\n    \"\"\"\u6ce8\u518c\u6cdb\u578b\u670d\u52a1.\n\n    \u652f\u6301\u533a\u5206\u4e0d\u540c\u7c7b\u578b\u53c2\u6570\u7684\u6cdb\u578b\u670d\u52a1\u3002\n\n    Args:\n        container: \u5bb9\u5668\u5b9e\u4f8b\n        generic_type: \u6cdb\u578b\u7c7b\u578b\uff0c\u4f8b\u5982 Repository[User]\n        implementation: \u5b9e\u73b0\u7c7b\uff08\u53ef\u9009\uff09\n        factory: \u5de5\u5382\u51fd\u6570\uff08\u53ef\u9009\uff09\n        lifetime: \u751f\u547d\u5468\u671f\uff08\u53ef\u9009\uff09\n\n    Raises:\n        ValueError: \u5982\u679c\u4e0d\u662f\u6709\u6548\u7684\u6cdb\u578b\u7c7b\u578b\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; register_generic(container, Repository[User], UserRepository)\n        &gt;&gt;&gt; register_generic(container, Repository[Order], OrderRepository)\n        &gt;&gt;&gt; register_generic(\n        ...     container,\n        ...     Repository[Product],\n        ...     factory=lambda: ProductRepository()\n        ... )\n    \"\"\"\n    from .types import Lifetime as LifetimeEnum\n\n    generic_key = _extract_generic_info(generic_type)\n    if generic_key is None:\n        msg = f\"Not a valid generic type: {generic_type}\"\n        raise ValueError(msg)\n\n    # \u4f7f\u7528 GenericKey \u4f5c\u4e3a\u670d\u52a1\u952e\n    if factory:\n        container.register_factory(\n            generic_key,  # type: ignore\n            factory,\n            lifetime=lifetime or LifetimeEnum.TRANSIENT,\n        )\n    elif implementation:\n        container.register(\n            implementation,\n            key=generic_key,  # type: ignore\n            lifetime=lifetime or LifetimeEnum.TRANSIENT,\n        )\n    else:\n        msg = \"Either implementation or factory must be provided\"\n        raise ValueError(msg)\n</code></pre>"},{"location":"en/guaids/generics-resolve-generic/","title":"resolve_generic","text":""},{"location":"en/guaids/generics-resolve-generic/#symphra_container.generics.resolve_generic","title":"<code>symphra_container.generics.resolve_generic(container, generic_type)</code>","text":"<p>\u89e3\u6790\u6cdb\u578b\u670d\u52a1.</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>container</code> <code>Container</code> <p>\u5bb9\u5668\u5b9e\u4f8b</p> \u5fc5\u9700 <code>generic_type</code> <code>Any</code> <p>\u6cdb\u578b\u7c7b\u578b\uff0c\u4f8b\u5982 Repository[User]</p> \u5fc5\u9700 <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>Any</code> <p>\u89e3\u6790\u7684\u670d\u52a1\u5b9e\u4f8b</p> <p>\u5f15\u53d1\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>ValueError</code> <p>\u5982\u679c\u4e0d\u662f\u6709\u6548\u7684\u6cdb\u578b\u7c7b\u578b</p> <code>ServiceNotFoundError</code> <p>\u5982\u679c\u670d\u52a1\u672a\u6ce8\u518c</p> \u793a\u4f8b <p>user_repo = resolve_generic(container, Repository[User]) order_repo = resolve_generic(container, Repository[Order])</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/generics.py</code> <pre><code>def resolve_generic(container: Container, generic_type: Any) -&gt; Any:\n    \"\"\"\u89e3\u6790\u6cdb\u578b\u670d\u52a1.\n\n    Args:\n        container: \u5bb9\u5668\u5b9e\u4f8b\n        generic_type: \u6cdb\u578b\u7c7b\u578b\uff0c\u4f8b\u5982 Repository[User]\n\n    Returns:\n        \u89e3\u6790\u7684\u670d\u52a1\u5b9e\u4f8b\n\n    Raises:\n        ValueError: \u5982\u679c\u4e0d\u662f\u6709\u6548\u7684\u6cdb\u578b\u7c7b\u578b\n        ServiceNotFoundError: \u5982\u679c\u670d\u52a1\u672a\u6ce8\u518c\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; user_repo = resolve_generic(container, Repository[User])\n        &gt;&gt;&gt; order_repo = resolve_generic(container, Repository[Order])\n    \"\"\"\n    generic_key = _extract_generic_info(generic_type)\n    if generic_key is None:\n        msg = f\"Not a valid generic type: {generic_type}\"\n        raise ValueError(msg)\n\n    return container.resolve(generic_key)  # type: ignore\n</code></pre>"},{"location":"en/guaids/injector-constructor/","title":"ConstructorInjector","text":""},{"location":"en/guaids/injector-constructor/#symphra_container.injector.ConstructorInjector","title":"<code>symphra_container.injector.ConstructorInjector</code>","text":"<p>\u6784\u9020\u51fd\u6570\u6ce8\u5165\u5668.</p> <p>\u5206\u6790\u670d\u52a1\u7c7b\u7684\u6784\u9020\u51fd\u6570,\u63d0\u53d6\u4f9d\u8d56\u5173\u7cfb, \u4e3a\u5bb9\u5668\u89e3\u6790\u670d\u52a1\u65f6\u63d0\u4f9b\u4f9d\u8d56.</p> <p>\u65b9\u6cd5\uff1a</p> \u540d\u79f0 \u63cf\u8ff0 <code>analyze_dependencies</code> <p>\u5206\u6790\u6784\u9020\u51fd\u6570\u4f9d\u8d56</p> <code>can_construct</code> <p>\u68c0\u67e5\u662f\u5426\u53ef\u4ee5\u6784\u5efa\u5b9e\u4f8b</p> <code>get_dependencies</code> <p>\u83b7\u53d6\u4f9d\u8d56\u5217\u8868</p> Source code in <code>src/symphra_container/injector.py</code> <pre><code>class ConstructorInjector:\n    \"\"\"\u6784\u9020\u51fd\u6570\u6ce8\u5165\u5668.\n\n    \u5206\u6790\u670d\u52a1\u7c7b\u7684\u6784\u9020\u51fd\u6570,\u63d0\u53d6\u4f9d\u8d56\u5173\u7cfb,\n    \u4e3a\u5bb9\u5668\u89e3\u6790\u670d\u52a1\u65f6\u63d0\u4f9b\u4f9d\u8d56.\n\n    Methods:\n        analyze_dependencies: \u5206\u6790\u6784\u9020\u51fd\u6570\u4f9d\u8d56\n        can_construct: \u68c0\u67e5\u662f\u5426\u53ef\u4ee5\u6784\u5efa\u5b9e\u4f8b\n        get_dependencies: \u83b7\u53d6\u4f9d\u8d56\u5217\u8868\n    \"\"\"\n\n    # \u7c7b\u7ea7\u522b\u7684\u4f9d\u8d56\u5206\u6790\u7f13\u5b58 - \u5927\u5e45\u63d0\u5347\u91cd\u590d\u89e3\u6790\u6027\u80fd\n    _dependency_cache: dict[type, list[DependencyInfo]] = {}\n\n    @classmethod\n    def clear_cache(cls) -&gt; None:\n        \"\"\"\u6e05\u7a7a\u4f9d\u8d56\u5206\u6790\u7f13\u5b58.\n\n        \u5728\u6d4b\u8bd5\u6216\u52a8\u6001\u52a0\u8f7d\u7c7b\u65f6\u53ef\u80fd\u9700\u8981\u6e05\u7a7a\u7f13\u5b58.\n        \"\"\"\n        cls._dependency_cache.clear()\n\n    @staticmethod\n    def _get_type_hints_safe(obj: Any) -&gt; dict[str, Any]:\n        \"\"\"\u5b89\u5168\u83b7\u53d6\u7c7b\u578b\u63d0\u793a\u4fe1\u606f.\n\n        Args:\n            obj: \u76ee\u6807\u5bf9\u8c61(\u7c7b\u6216\u51fd\u6570)\n\n        Returns:\n            \u7c7b\u578b\u63d0\u793a\u5b57\u5178\n        \"\"\"\n        try:\n            # \u83b7\u53d6\u5bf9\u8c61\u7684\u6a21\u5757\u547d\u540d\u7a7a\u95f4\u7528\u4e8e\u89e3\u6790\u5b57\u7b26\u4e32\u6ce8\u89e3\n            globalns = getattr(obj, \"__globals__\", None)\n            if globalns is None and hasattr(obj, \"__module__\"):\n                import sys\n                module = sys.modules.get(obj.__module__)\n                if module:\n                    globalns = vars(module)\n\n            # \u5982\u679c\u6709\u6a21\u5757\u547d\u540d\u7a7a\u95f4,\u4f20\u9012\u7ed9 get_type_hints\n            if globalns:\n                return get_type_hints(obj, globalns=globalns)\n            else:\n                return get_type_hints(obj)\n        except Exception:  # noqa: BLE001\n            return getattr(obj, \"__annotations__\", {})\n\n    @staticmethod\n    def _is_simple_type(param_type: type) -&gt; bool:\n        \"\"\"\u68c0\u67e5\u662f\u5426\u662f\u7b80\u5355\u7c7b\u578b.\n\n        Args:\n            param_type: \u53c2\u6570\u7c7b\u578b\n\n        Returns:\n            \u662f\u5426\u4e3a\u7b80\u5355\u7c7b\u578b\n        \"\"\"\n        simple_types = (str, int, bool, float, bytes, list, dict, set, tuple, type(None))\n        return param_type in simple_types\n\n    @staticmethod\n    def _extract_optional_type(param_type: Any) -&gt; tuple[bool, Any]:\n        \"\"\"\u63d0\u53d6\u53ef\u9009\u7c7b\u578b.\n\n        Args:\n            param_type: \u53c2\u6570\u7c7b\u578b\n\n        Returns:\n            (\u662f\u5426\u53ef\u9009, \u5b9e\u9645\u7c7b\u578b) \u5143\u7ec4\n        \"\"\"\n        origin = get_origin(param_type)\n        is_union_type = origin is Union or isinstance(param_type, types.UnionType)\n\n        if is_union_type:\n            args = get_args(param_type)\n            if type(None) in args:\n                non_none_types = [arg for arg in args if arg is not type(None)]\n                if non_none_types:\n                    return True, non_none_types[0]\n\n        return False, param_type\n\n    @staticmethod\n    def analyze_dependencies(service_class: type) -&gt; list[DependencyInfo]:\n        \"\"\"\u5206\u6790\u670d\u52a1\u7c7b\u7684\u6784\u9020\u51fd\u6570\u4f9d\u8d56.\n\n        \u901a\u8fc7\u68c0\u67e5 __init__ \u65b9\u6cd5\u7684\u53c2\u6570,\u63d0\u53d6\u6240\u6709\u4f9d\u8d56\u5173\u7cfb.\n        \u652f\u6301\u4ee5\u4e0b\u7279\u6027:\n        - \u7c7b\u578b\u6ce8\u89e3\u4f9d\u8d56\n        - \u53ef\u9009\u4f9d\u8d56(Optional[T])\n        - \u9ed8\u8ba4\u503c\n        - Injected \u6807\u8bb0\n\n        \u6027\u80fd\u4f18\u5316: \u4f7f\u7528\u7c7b\u7ea7\u522b\u7f13\u5b58,\u907f\u514d\u91cd\u590d\u5206\u6790\u76f8\u540c\u7684\u7c7b.\n\n        Args:\n            service_class: \u670d\u52a1\u7c7b\n\n        Returns:\n            \u4f9d\u8d56\u4fe1\u606f\u5217\u8868\n\n        Raises:\n            ResolutionError: \u65e0\u6cd5\u5206\u6790\u4f9d\u8d56\u65f6\n\n        Examples:\n            &gt;&gt;&gt; class UserService:\n            ...     def __init__(self, repo: UserRepository):\n            ...         self.repo = repo\n            &gt;&gt;&gt; deps = ConstructorInjector.analyze_dependencies(UserService)\n            &gt;&gt;&gt; assert len(deps) == 1\n            &gt;&gt;&gt; assert deps[0].service_key == UserRepository\n        \"\"\"\n        # \u6027\u80fd\u4f18\u5316: \u68c0\u67e5\u7f13\u5b58,\u907f\u514d\u91cd\u590d\u5206\u6790\n        if service_class in ConstructorInjector._dependency_cache:\n            return ConstructorInjector._dependency_cache[service_class]\n\n        dependencies: list[DependencyInfo] = []\n\n        try:\n            # \u6b65\u9aa4 1: \u83b7\u53d6\u6784\u9020\u51fd\u6570\u7b7e\u540d\n            init_method = service_class.__init__\n            signature = inspect.signature(init_method)\n\n            # \u6b65\u9aa4 2: \u5b89\u5168\u83b7\u53d6\u7c7b\u578b\u63d0\u793a\u4fe1\u606f\n            type_hints = ConstructorInjector._get_type_hints_safe(init_method)\n\n            # \u6b65\u9aa4 3: \u904d\u5386\u6240\u6709\u53c2\u6570\u8fdb\u884c\u4f9d\u8d56\u5206\u6790\n            for param_name, param in signature.parameters.items():\n                # \u8df3\u8fc7 self \u53c2\u6570\n                if param_name == \"self\":\n                    continue\n\n                # \u68c0\u67e5\u662f\u5426\u4f7f\u7528\u4e86\u663e\u5f0f\u7684 Injected \u6807\u8bb0\n                is_injected = isinstance(param.default, InjectionMarker)\n\n                # \u5fc5\u987b\u6709\u7c7b\u578b\u6ce8\u89e3\u624d\u80fd\u8fdb\u884c\u4f9d\u8d56\u6ce8\u5165\n                if param.annotation == inspect.Parameter.empty:\n                    continue\n\n                # \u83b7\u53d6\u53c2\u6570\u7684\u5b9e\u9645\u7c7b\u578b\n                param_type = type_hints.get(param_name, param.annotation)\n\n                # \u8fc7\u6ee4\u6389\u57fa\u7840\u6570\u636e\u7c7b\u578b(\u5b83\u4eec\u4e0d\u9700\u8981\u6ce8\u5165)\n                if ConstructorInjector._is_simple_type(param_type):\n                    continue\n\n                # \u5904\u7406\u53ef\u9009\u7c7b\u578b\u5e76\u63d0\u53d6\u771f\u5b9e\u7c7b\u578b\n                is_optional, actual_type = ConstructorInjector._extract_optional_type(param_type)\n\n                # \u5224\u65ad\u662f\u5426\u5e94\u8be5\u6dfb\u52a0\u6b64\u4f9d\u8d56:\n                # 1. \u663e\u5f0f\u6807\u8bb0\u4e86 Injected\n                # 2. \u6ca1\u6709\u9ed8\u8ba4\u503c(\u5fc5\u9700\u53c2\u6570)\n                # 3. \u662f\u53ef\u9009\u7c7b\u578b(Optional[T])\n                should_add = is_injected or param.default is inspect.Parameter.empty or is_optional\n                if should_add:\n                    # \u521b\u5efa\u4f9d\u8d56\u4fe1\u606f\u5bf9\u8c61\n                    dependency = DependencyInfo(\n                        parameter_name=param_name,\n                        service_key=actual_type,\n                        service_type=actual_type,\n                        is_optional=is_optional,\n                        default_value=param.default,\n                        is_injected=is_injected,\n                    )\n                    dependencies.append(dependency)\n\n            # \u6027\u80fd\u4f18\u5316: \u7f13\u5b58\u5206\u6790\u7ed3\u679c\n            ConstructorInjector._dependency_cache[service_class] = dependencies\n            return dependencies\n\n        except ResolutionError:\n            # \u91cd\u65b0\u629b\u51fa\u5df2\u77e5\u7684\u89e3\u6790\u9519\u8bef\n            raise\n        except Exception as e:\n            # \u5c06\u672a\u77e5\u5f02\u5e38\u5305\u88c5\u4e3a ResolutionError\n            raise ResolutionError(\n                service_class,\n                Exception(f\"Failed to analyze dependencies: {e!s}\"),\n            ) from e\n\n    @staticmethod\n    def can_construct(\n        service_class: type,\n        available_keys: set[ServiceKey],\n    ) -&gt; bool:\n        \"\"\"\u68c0\u67e5\u662f\u5426\u53ef\u4ee5\u6784\u5efa\u670d\u52a1\u5b9e\u4f8b.\n\n        \u901a\u8fc7\u68c0\u67e5\u6240\u6709\u4f9d\u8d56\u662f\u5426\u90fd\u5728\u53ef\u7528\u7684\u670d\u52a1\u952e\u4e2d,\n        \u5224\u65ad\u662f\u5426\u80fd\u591f\u6210\u529f\u6784\u5efa\u5b9e\u4f8b.\n\n        Args:\n            service_class: \u670d\u52a1\u7c7b\n            available_keys: \u53ef\u7528\u7684\u670d\u52a1\u952e\u96c6\u5408\n\n        Returns:\n            \u662f\u5426\u53ef\u4ee5\u6784\u5efa\n        \"\"\"\n        dependencies = ConstructorInjector.analyze_dependencies(service_class)\n\n        return all(not (not dep.is_optional and dep.service_key not in available_keys) for dep in dependencies)\n\n    @staticmethod\n    def get_dependencies(service_class: type) -&gt; dict[str, DependencyInfo]:\n        \"\"\"\u83b7\u53d6\u4f9d\u8d56\u5b57\u5178.\n\n        \u4ee5\u53c2\u6570\u540d\u4e3a\u952e,\u4f9d\u8d56\u4fe1\u606f\u4e3a\u503c\u7684\u5b57\u5178\u5f62\u5f0f\u8fd4\u56de\u4f9d\u8d56.\n\n        Args:\n            service_class: \u670d\u52a1\u7c7b\n\n        Returns:\n            \u4f9d\u8d56\u5b57\u5178\n        \"\"\"\n        dependencies = ConstructorInjector.analyze_dependencies(service_class)\n        return {dep.parameter_name: dep for dep in dependencies}\n</code></pre>"},{"location":"en/guaids/injector-constructor/#symphra_container.injector.ConstructorInjector.analyze_dependencies","title":"<code>analyze_dependencies(service_class)</code>  <code>staticmethod</code>","text":"<p>\u5206\u6790\u670d\u52a1\u7c7b\u7684\u6784\u9020\u51fd\u6570\u4f9d\u8d56.</p> <p>\u901a\u8fc7\u68c0\u67e5 init \u65b9\u6cd5\u7684\u53c2\u6570,\u63d0\u53d6\u6240\u6709\u4f9d\u8d56\u5173\u7cfb. \u652f\u6301\u4ee5\u4e0b\u7279\u6027: - \u7c7b\u578b\u6ce8\u89e3\u4f9d\u8d56 - \u53ef\u9009\u4f9d\u8d56(Optional[T]) - \u9ed8\u8ba4\u503c - Injected \u6807\u8bb0</p> <p>\u6027\u80fd\u4f18\u5316: \u4f7f\u7528\u7c7b\u7ea7\u522b\u7f13\u5b58,\u907f\u514d\u91cd\u590d\u5206\u6790\u76f8\u540c\u7684\u7c7b.</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>service_class</code> <code>type</code> <p>\u670d\u52a1\u7c7b</p> \u5fc5\u9700 <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>list[DependencyInfo]</code> <p>\u4f9d\u8d56\u4fe1\u606f\u5217\u8868</p> <p>\u5f15\u53d1\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>ResolutionError</code> <p>\u65e0\u6cd5\u5206\u6790\u4f9d\u8d56\u65f6</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>&gt;&gt;&gt; class UserService:\n...     def __init__(self, repo: UserRepository):\n...         self.repo = repo\n&gt;&gt;&gt; deps = ConstructorInjector.analyze_dependencies(UserService)\n&gt;&gt;&gt; assert len(deps) == 1\n&gt;&gt;&gt; assert deps[0].service_key == UserRepository\n</code></pre> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/injector.py</code> <pre><code>@staticmethod\ndef analyze_dependencies(service_class: type) -&gt; list[DependencyInfo]:\n    \"\"\"\u5206\u6790\u670d\u52a1\u7c7b\u7684\u6784\u9020\u51fd\u6570\u4f9d\u8d56.\n\n    \u901a\u8fc7\u68c0\u67e5 __init__ \u65b9\u6cd5\u7684\u53c2\u6570,\u63d0\u53d6\u6240\u6709\u4f9d\u8d56\u5173\u7cfb.\n    \u652f\u6301\u4ee5\u4e0b\u7279\u6027:\n    - \u7c7b\u578b\u6ce8\u89e3\u4f9d\u8d56\n    - \u53ef\u9009\u4f9d\u8d56(Optional[T])\n    - \u9ed8\u8ba4\u503c\n    - Injected \u6807\u8bb0\n\n    \u6027\u80fd\u4f18\u5316: \u4f7f\u7528\u7c7b\u7ea7\u522b\u7f13\u5b58,\u907f\u514d\u91cd\u590d\u5206\u6790\u76f8\u540c\u7684\u7c7b.\n\n    Args:\n        service_class: \u670d\u52a1\u7c7b\n\n    Returns:\n        \u4f9d\u8d56\u4fe1\u606f\u5217\u8868\n\n    Raises:\n        ResolutionError: \u65e0\u6cd5\u5206\u6790\u4f9d\u8d56\u65f6\n\n    Examples:\n        &gt;&gt;&gt; class UserService:\n        ...     def __init__(self, repo: UserRepository):\n        ...         self.repo = repo\n        &gt;&gt;&gt; deps = ConstructorInjector.analyze_dependencies(UserService)\n        &gt;&gt;&gt; assert len(deps) == 1\n        &gt;&gt;&gt; assert deps[0].service_key == UserRepository\n    \"\"\"\n    # \u6027\u80fd\u4f18\u5316: \u68c0\u67e5\u7f13\u5b58,\u907f\u514d\u91cd\u590d\u5206\u6790\n    if service_class in ConstructorInjector._dependency_cache:\n        return ConstructorInjector._dependency_cache[service_class]\n\n    dependencies: list[DependencyInfo] = []\n\n    try:\n        # \u6b65\u9aa4 1: \u83b7\u53d6\u6784\u9020\u51fd\u6570\u7b7e\u540d\n        init_method = service_class.__init__\n        signature = inspect.signature(init_method)\n\n        # \u6b65\u9aa4 2: \u5b89\u5168\u83b7\u53d6\u7c7b\u578b\u63d0\u793a\u4fe1\u606f\n        type_hints = ConstructorInjector._get_type_hints_safe(init_method)\n\n        # \u6b65\u9aa4 3: \u904d\u5386\u6240\u6709\u53c2\u6570\u8fdb\u884c\u4f9d\u8d56\u5206\u6790\n        for param_name, param in signature.parameters.items():\n            # \u8df3\u8fc7 self \u53c2\u6570\n            if param_name == \"self\":\n                continue\n\n            # \u68c0\u67e5\u662f\u5426\u4f7f\u7528\u4e86\u663e\u5f0f\u7684 Injected \u6807\u8bb0\n            is_injected = isinstance(param.default, InjectionMarker)\n\n            # \u5fc5\u987b\u6709\u7c7b\u578b\u6ce8\u89e3\u624d\u80fd\u8fdb\u884c\u4f9d\u8d56\u6ce8\u5165\n            if param.annotation == inspect.Parameter.empty:\n                continue\n\n            # \u83b7\u53d6\u53c2\u6570\u7684\u5b9e\u9645\u7c7b\u578b\n            param_type = type_hints.get(param_name, param.annotation)\n\n            # \u8fc7\u6ee4\u6389\u57fa\u7840\u6570\u636e\u7c7b\u578b(\u5b83\u4eec\u4e0d\u9700\u8981\u6ce8\u5165)\n            if ConstructorInjector._is_simple_type(param_type):\n                continue\n\n            # \u5904\u7406\u53ef\u9009\u7c7b\u578b\u5e76\u63d0\u53d6\u771f\u5b9e\u7c7b\u578b\n            is_optional, actual_type = ConstructorInjector._extract_optional_type(param_type)\n\n            # \u5224\u65ad\u662f\u5426\u5e94\u8be5\u6dfb\u52a0\u6b64\u4f9d\u8d56:\n            # 1. \u663e\u5f0f\u6807\u8bb0\u4e86 Injected\n            # 2. \u6ca1\u6709\u9ed8\u8ba4\u503c(\u5fc5\u9700\u53c2\u6570)\n            # 3. \u662f\u53ef\u9009\u7c7b\u578b(Optional[T])\n            should_add = is_injected or param.default is inspect.Parameter.empty or is_optional\n            if should_add:\n                # \u521b\u5efa\u4f9d\u8d56\u4fe1\u606f\u5bf9\u8c61\n                dependency = DependencyInfo(\n                    parameter_name=param_name,\n                    service_key=actual_type,\n                    service_type=actual_type,\n                    is_optional=is_optional,\n                    default_value=param.default,\n                    is_injected=is_injected,\n                )\n                dependencies.append(dependency)\n\n        # \u6027\u80fd\u4f18\u5316: \u7f13\u5b58\u5206\u6790\u7ed3\u679c\n        ConstructorInjector._dependency_cache[service_class] = dependencies\n        return dependencies\n\n    except ResolutionError:\n        # \u91cd\u65b0\u629b\u51fa\u5df2\u77e5\u7684\u89e3\u6790\u9519\u8bef\n        raise\n    except Exception as e:\n        # \u5c06\u672a\u77e5\u5f02\u5e38\u5305\u88c5\u4e3a ResolutionError\n        raise ResolutionError(\n            service_class,\n            Exception(f\"Failed to analyze dependencies: {e!s}\"),\n        ) from e\n</code></pre>"},{"location":"en/guaids/injector-constructor/#symphra_container.injector.ConstructorInjector.can_construct","title":"<code>can_construct(service_class, available_keys)</code>  <code>staticmethod</code>","text":"<p>\u68c0\u67e5\u662f\u5426\u53ef\u4ee5\u6784\u5efa\u670d\u52a1\u5b9e\u4f8b.</p> <p>\u901a\u8fc7\u68c0\u67e5\u6240\u6709\u4f9d\u8d56\u662f\u5426\u90fd\u5728\u53ef\u7528\u7684\u670d\u52a1\u952e\u4e2d, \u5224\u65ad\u662f\u5426\u80fd\u591f\u6210\u529f\u6784\u5efa\u5b9e\u4f8b.</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>service_class</code> <code>type</code> <p>\u670d\u52a1\u7c7b</p> \u5fc5\u9700 <code>available_keys</code> <code>set[ServiceKey]</code> <p>\u53ef\u7528\u7684\u670d\u52a1\u952e\u96c6\u5408</p> \u5fc5\u9700 <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>bool</code> <p>\u662f\u5426\u53ef\u4ee5\u6784\u5efa</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/injector.py</code> <pre><code>@staticmethod\ndef can_construct(\n    service_class: type,\n    available_keys: set[ServiceKey],\n) -&gt; bool:\n    \"\"\"\u68c0\u67e5\u662f\u5426\u53ef\u4ee5\u6784\u5efa\u670d\u52a1\u5b9e\u4f8b.\n\n    \u901a\u8fc7\u68c0\u67e5\u6240\u6709\u4f9d\u8d56\u662f\u5426\u90fd\u5728\u53ef\u7528\u7684\u670d\u52a1\u952e\u4e2d,\n    \u5224\u65ad\u662f\u5426\u80fd\u591f\u6210\u529f\u6784\u5efa\u5b9e\u4f8b.\n\n    Args:\n        service_class: \u670d\u52a1\u7c7b\n        available_keys: \u53ef\u7528\u7684\u670d\u52a1\u952e\u96c6\u5408\n\n    Returns:\n        \u662f\u5426\u53ef\u4ee5\u6784\u5efa\n    \"\"\"\n    dependencies = ConstructorInjector.analyze_dependencies(service_class)\n\n    return all(not (not dep.is_optional and dep.service_key not in available_keys) for dep in dependencies)\n</code></pre>"},{"location":"en/guaids/injector-constructor/#symphra_container.injector.ConstructorInjector.clear_cache","title":"<code>clear_cache()</code>  <code>classmethod</code>","text":"<p>\u6e05\u7a7a\u4f9d\u8d56\u5206\u6790\u7f13\u5b58.</p> <p>\u5728\u6d4b\u8bd5\u6216\u52a8\u6001\u52a0\u8f7d\u7c7b\u65f6\u53ef\u80fd\u9700\u8981\u6e05\u7a7a\u7f13\u5b58.</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/injector.py</code> <pre><code>@classmethod\ndef clear_cache(cls) -&gt; None:\n    \"\"\"\u6e05\u7a7a\u4f9d\u8d56\u5206\u6790\u7f13\u5b58.\n\n    \u5728\u6d4b\u8bd5\u6216\u52a8\u6001\u52a0\u8f7d\u7c7b\u65f6\u53ef\u80fd\u9700\u8981\u6e05\u7a7a\u7f13\u5b58.\n    \"\"\"\n    cls._dependency_cache.clear()\n</code></pre>"},{"location":"en/guaids/injector-constructor/#symphra_container.injector.ConstructorInjector.get_dependencies","title":"<code>get_dependencies(service_class)</code>  <code>staticmethod</code>","text":"<p>\u83b7\u53d6\u4f9d\u8d56\u5b57\u5178.</p> <p>\u4ee5\u53c2\u6570\u540d\u4e3a\u952e,\u4f9d\u8d56\u4fe1\u606f\u4e3a\u503c\u7684\u5b57\u5178\u5f62\u5f0f\u8fd4\u56de\u4f9d\u8d56.</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>service_class</code> <code>type</code> <p>\u670d\u52a1\u7c7b</p> \u5fc5\u9700 <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>dict[str, DependencyInfo]</code> <p>\u4f9d\u8d56\u5b57\u5178</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/injector.py</code> <pre><code>@staticmethod\ndef get_dependencies(service_class: type) -&gt; dict[str, DependencyInfo]:\n    \"\"\"\u83b7\u53d6\u4f9d\u8d56\u5b57\u5178.\n\n    \u4ee5\u53c2\u6570\u540d\u4e3a\u952e,\u4f9d\u8d56\u4fe1\u606f\u4e3a\u503c\u7684\u5b57\u5178\u5f62\u5f0f\u8fd4\u56de\u4f9d\u8d56.\n\n    Args:\n        service_class: \u670d\u52a1\u7c7b\n\n    Returns:\n        \u4f9d\u8d56\u5b57\u5178\n    \"\"\"\n    dependencies = ConstructorInjector.analyze_dependencies(service_class)\n    return {dep.parameter_name: dep for dep in dependencies}\n</code></pre>"},{"location":"en/guaids/injector-dependency-info/","title":"DependencyInfo","text":""},{"location":"en/guaids/injector-dependency-info/#symphra_container.injector.DependencyInfo","title":"<code>symphra_container.injector.DependencyInfo</code>","text":"<p>\u4f9d\u8d56\u4fe1\u606f.</p> <p>\u5b58\u50a8\u5355\u4e2a\u4f9d\u8d56\u7684\u76f8\u5173\u4fe1\u606f.</p> <p>\u5c5e\u6027\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 <code>parameter_name</code> <p>\u53c2\u6570\u540d\u79f0</p> <code>service_key</code> <p>\u670d\u52a1\u952e(\u7c7b\u578b\u6216\u5b57\u7b26\u4e32)</p> <code>service_type</code> <p>\u670d\u52a1\u7c7b\u578b</p> <code>is_optional</code> <p>\u662f\u5426\u53ef\u9009</p> <code>default_value</code> <p>\u9ed8\u8ba4\u503c</p> <code>is_injected</code> <p>\u662f\u5426\u4f7f\u7528 Injected \u6807\u8bb0</p> Source code in <code>src/symphra_container/injector.py</code> <pre><code>class DependencyInfo:\n    \"\"\"\u4f9d\u8d56\u4fe1\u606f.\n\n    \u5b58\u50a8\u5355\u4e2a\u4f9d\u8d56\u7684\u76f8\u5173\u4fe1\u606f.\n\n    Attributes:\n        parameter_name: \u53c2\u6570\u540d\u79f0\n        service_key: \u670d\u52a1\u952e(\u7c7b\u578b\u6216\u5b57\u7b26\u4e32)\n        service_type: \u670d\u52a1\u7c7b\u578b\n        is_optional: \u662f\u5426\u53ef\u9009\n        default_value: \u9ed8\u8ba4\u503c\n        is_injected: \u662f\u5426\u4f7f\u7528 Injected \u6807\u8bb0\n    \"\"\"\n\n    def __init__(\n        self,\n        parameter_name: str,\n        service_key: ServiceKey,\n        service_type: type,\n        is_optional: bool = False,\n        default_value: Any = inspect.Parameter.empty,\n        is_injected: bool = False,\n    ) -&gt; None:\n        \"\"\"\u521d\u59cb\u5316\u4f9d\u8d56\u4fe1\u606f.\n\n        Args:\n            parameter_name: \u53c2\u6570\u540d\u79f0\n            service_key: \u670d\u52a1\u952e\n            service_type: \u670d\u52a1\u7c7b\u578b\n            is_optional: \u662f\u5426\u53ef\u9009\n            default_value: \u9ed8\u8ba4\u503c\n            is_injected: \u662f\u5426\u4f7f\u7528 Injected \u6807\u8bb0\n        \"\"\"\n        self.parameter_name = parameter_name\n        self.service_key = service_key\n        self.service_type = service_type\n        self.is_optional = is_optional\n        self.default_value = default_value\n        self.is_injected = is_injected\n\n    def __repr__(self) -&gt; str:\n        \"\"\"\u8fd4\u56de\u5b57\u7b26\u4e32\u8868\u793a.\"\"\"\n        optional_str = \" (optional)\" if self.is_optional else \"\"\n        injected_str = \" (injected)\" if self.is_injected else \"\"\n        return f\"DependencyInfo({self.parameter_name}: {self.service_key}{optional_str}{injected_str})\"\n</code></pre>"},{"location":"en/guaids/injector-dependency-info/#symphra_container.injector.DependencyInfo.__init__","title":"<code>__init__(parameter_name, service_key, service_type, is_optional=False, default_value=inspect.Parameter.empty, is_injected=False)</code>","text":"<p>\u521d\u59cb\u5316\u4f9d\u8d56\u4fe1\u606f.</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>parameter_name</code> <code>str</code> <p>\u53c2\u6570\u540d\u79f0</p> \u5fc5\u9700 <code>service_key</code> <code>ServiceKey</code> <p>\u670d\u52a1\u952e</p> \u5fc5\u9700 <code>service_type</code> <code>type</code> <p>\u670d\u52a1\u7c7b\u578b</p> \u5fc5\u9700 <code>is_optional</code> <code>bool</code> <p>\u662f\u5426\u53ef\u9009</p> <code>False</code> <code>default_value</code> <code>Any</code> <p>\u9ed8\u8ba4\u503c</p> <code>empty</code> <code>is_injected</code> <code>bool</code> <p>\u662f\u5426\u4f7f\u7528 Injected \u6807\u8bb0</p> <code>False</code> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/injector.py</code> <pre><code>def __init__(\n    self,\n    parameter_name: str,\n    service_key: ServiceKey,\n    service_type: type,\n    is_optional: bool = False,\n    default_value: Any = inspect.Parameter.empty,\n    is_injected: bool = False,\n) -&gt; None:\n    \"\"\"\u521d\u59cb\u5316\u4f9d\u8d56\u4fe1\u606f.\n\n    Args:\n        parameter_name: \u53c2\u6570\u540d\u79f0\n        service_key: \u670d\u52a1\u952e\n        service_type: \u670d\u52a1\u7c7b\u578b\n        is_optional: \u662f\u5426\u53ef\u9009\n        default_value: \u9ed8\u8ba4\u503c\n        is_injected: \u662f\u5426\u4f7f\u7528 Injected \u6807\u8bb0\n    \"\"\"\n    self.parameter_name = parameter_name\n    self.service_key = service_key\n    self.service_type = service_type\n    self.is_optional = is_optional\n    self.default_value = default_value\n    self.is_injected = is_injected\n</code></pre>"},{"location":"en/guaids/injector-dependency-info/#symphra_container.injector.DependencyInfo.__repr__","title":"<code>__repr__()</code>","text":"<p>\u8fd4\u56de\u5b57\u7b26\u4e32\u8868\u793a.</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/injector.py</code> <pre><code>def __repr__(self) -&gt; str:\n    \"\"\"\u8fd4\u56de\u5b57\u7b26\u4e32\u8868\u793a.\"\"\"\n    optional_str = \" (optional)\" if self.is_optional else \"\"\n    injected_str = \" (injected)\" if self.is_injected else \"\"\n    return f\"DependencyInfo({self.parameter_name}: {self.service_key}{optional_str}{injected_str})\"\n</code></pre>"},{"location":"en/guaids/integrations-django-container/","title":"DjangoContainer","text":""},{"location":"en/guaids/integrations-django-container/#symphra_container.integrations.DjangoContainer","title":"<code>symphra_container.integrations.DjangoContainer</code>","text":"<p>Django \u5e94\u7528\u7684\u5bb9\u5668\u5305\u88c5\u5668.</p> <p>\u63d0\u4f9b\u4e0e Django \u8bf7\u6c42\u751f\u547d\u5468\u671f\u96c6\u6210\u7684\u4f9d\u8d56\u6ce8\u5165\u529f\u80fd\u3002</p> <p>\u5c5e\u6027\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 <code>_container</code> <code>Container | None</code> <p>\u5168\u5c40\u5bb9\u5668\u5b9e\u4f8b</p> \u793a\u4f8b Source code in <code>src/symphra_container/integrations/django.py</code> <pre><code>class DjangoContainer:\n    \"\"\"Django \u5e94\u7528\u7684\u5bb9\u5668\u5305\u88c5\u5668.\n\n    \u63d0\u4f9b\u4e0e Django \u8bf7\u6c42\u751f\u547d\u5468\u671f\u96c6\u6210\u7684\u4f9d\u8d56\u6ce8\u5165\u529f\u80fd\u3002\n\n    Attributes:\n        _container: \u5168\u5c40\u5bb9\u5668\u5b9e\u4f8b\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; # \u5728 settings.py \u4e2d\n        &gt;&gt;&gt; from django.conf import settings\n        &gt;&gt;&gt; settings.CONTAINER = Container()\n        &gt;&gt;&gt; # \u5728\u89c6\u56fe\u4e2d\n        &gt;&gt;&gt; user_service = DjangoContainer.resolve(UserService)\n    \"\"\"\n\n    _container: Container | None = None\n\n    @classmethod\n    def setup(cls, container: Container) -&gt; None:\n        \"\"\"\u8bbe\u7f6e\u5168\u5c40\u5bb9\u5668\u5b9e\u4f8b.\n\n        \u901a\u5e38\u5728 settings.py \u6216\u5e94\u7528\u542f\u52a8\u65f6\u8c03\u7528\u3002\n\n        Args:\n            container: \u5bb9\u5668\u5b9e\u4f8b\n\n        Raises:\n            ImportError: \u5982\u679c\u672a\u5b89\u88c5 Django\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; from django.conf import settings\n            &gt;&gt;&gt; container = Container()\n            &gt;&gt;&gt; DjangoContainer.setup(container)\n        \"\"\"\n        try:\n            import django  # noqa: F401\n        except ImportError as e:\n            raise ImportError(\"Django is not installed. Install it with: pip install symphra-container[django]\") from e\n\n        cls._container = container\n\n    @classmethod\n    def get_container(cls) -&gt; Container:\n        \"\"\"\u83b7\u53d6\u5168\u5c40\u5bb9\u5668\u5b9e\u4f8b.\n\n        Returns:\n            Container: \u5bb9\u5668\u5b9e\u4f8b\n\n        Raises:\n            RuntimeError: \u5982\u679c\u5bb9\u5668\u672a\u521d\u59cb\u5316\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; container = DjangoContainer.get_container()\n        \"\"\"\n        if cls._container is None:\n            # \u5c1d\u8bd5\u4ece Django settings \u83b7\u53d6\n            try:\n                from django.conf import settings\n\n                if hasattr(settings, \"CONTAINER\"):\n                    cls._container = settings.CONTAINER\n            except Exception:\n                pass\n\n        if cls._container is None:\n            raise RuntimeError(\"Container not initialized. Call DjangoContainer.setup() or set settings.CONTAINER\")\n\n        return cls._container\n\n    @classmethod\n    def resolve(cls, service_type: type[T]) -&gt; T:\n        \"\"\"\u89e3\u6790\u670d\u52a1\u5b9e\u4f8b.\n\n        \u5728\u8bf7\u6c42\u4e0a\u4e0b\u6587\u4e2d\u4f7f\u7528\u4f5c\u7528\u57df\u5bb9\u5668(\u5982\u679c\u6709)\uff0c\u5426\u5219\u4f7f\u7528\u6839\u5bb9\u5668\u3002\n\n        Args:\n            service_type: \u8981\u89e3\u6790\u7684\u670d\u52a1\u7c7b\u578b\n\n        Returns:\n            T: \u670d\u52a1\u5b9e\u4f8b\n\n        Raises:\n            RuntimeError: \u5982\u679c\u5bb9\u5668\u672a\u521d\u59cb\u5316\n            ServiceNotFoundError: \u5982\u679c\u670d\u52a1\u672a\u6ce8\u518c\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; user_service = DjangoContainer.resolve(UserService)\n        \"\"\"\n        # \u5c1d\u8bd5\u4ece\u5f53\u524d\u7ebf\u7a0b\u83b7\u53d6\u8bf7\u6c42\u5bf9\u8c61\n        try:\n            import threading\n\n            local = threading.local()\n            request: HttpRequest | None = getattr(local, \"request\", None)\n            if request and hasattr(request, \"container_scope\"):\n                return request.container_scope.resolve(service_type)\n        except Exception:\n            pass\n\n        # \u4f7f\u7528\u6839\u5bb9\u5668\n        container = cls.get_container()\n        return container.resolve(service_type)\n\n    @classmethod\n    def inject(cls, func: F) -&gt; F:\n        \"\"\"\u88c5\u9970\u5668: \u81ea\u52a8\u6ce8\u5165\u51fd\u6570\u53c2\u6570.\n\n        \u5206\u6790\u51fd\u6570\u7b7e\u540d(\u8df3\u8fc7 request \u53c2\u6570)\uff0c\u6839\u636e\u7c7b\u578b\u6ce8\u89e3\u81ea\u52a8\u6ce8\u5165\u670d\u52a1\u3002\n\n        Args:\n            func: \u8981\u88c5\u9970\u7684\u51fd\u6570(Django \u89c6\u56fe\u51fd\u6570)\n\n        Returns:\n            F: \u88c5\u9970\u540e\u7684\u51fd\u6570\n\n        Raises:\n            RuntimeError: \u5982\u679c\u670d\u52a1\u89e3\u6790\u5931\u8d25\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; @DjangoContainer.inject\n            ... def view(request, user_service: UserService):\n            ...     return JsonResponse(user_service.get_all())\n        \"\"\"\n        sig = inspect.signature(func)\n\n        @functools.wraps(func)\n        def wrapper(*args: Any, **kwargs: Any) -&gt; Any:\n            # \u5206\u6790\u9700\u8981\u6ce8\u5165\u7684\u53c2\u6570\n            bound_args = sig.bind_partial(*args, **kwargs)\n            bound_args.apply_defaults()\n\n            for param_name, param in sig.parameters.items():\n                # \u8df3\u8fc7 request \u53c2\u6570\u548c\u5df2\u63d0\u4f9b\u7684\u53c2\u6570\n                if param_name == \"request\" or param_name in bound_args.arguments:\n                    continue\n\n                # \u68c0\u67e5\u662f\u5426\u6709\u7c7b\u578b\u6ce8\u89e3\n                if param.annotation == inspect.Parameter.empty:\n                    continue\n\n                # \u5c1d\u8bd5\u89e3\u6790\u670d\u52a1\n                try:\n                    service = cls.resolve(param.annotation)\n                    bound_args.arguments[param_name] = service\n                except Exception:\n                    # \u65e0\u6cd5\u89e3\u6790\uff0c\u53ef\u80fd\u4e0d\u662f\u5bb9\u5668\u7ba1\u7406\u7684\u670d\u52a1\n                    continue\n\n            return func(*bound_args.args, **bound_args.kwargs)\n\n        return cast(F, wrapper)\n</code></pre>"},{"location":"en/guaids/integrations-django-container/#symphra_container.integrations.DjangoContainer--settingspy","title":"\u5728 settings.py \u4e2d","text":"<p>from django.conf import settings settings.CONTAINER = Container()</p>"},{"location":"en/guaids/integrations-django-container/#symphra_container.integrations.DjangoContainer--_1","title":"\u5728\u89c6\u56fe\u4e2d","text":"<p>user_service = DjangoContainer.resolve(UserService)</p>"},{"location":"en/guaids/integrations-django-container/#symphra_container.integrations.DjangoContainer.get_container","title":"<code>get_container()</code>  <code>classmethod</code>","text":"<p>\u83b7\u53d6\u5168\u5c40\u5bb9\u5668\u5b9e\u4f8b.</p> <p>\u8fd4\u56de\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 <code>Container</code> <code>Container</code> <p>\u5bb9\u5668\u5b9e\u4f8b</p> <p>\u5f15\u53d1\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>RuntimeError</code> <p>\u5982\u679c\u5bb9\u5668\u672a\u521d\u59cb\u5316</p> \u793a\u4f8b <p>container = DjangoContainer.get_container()</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/integrations/django.py</code> <pre><code>@classmethod\ndef get_container(cls) -&gt; Container:\n    \"\"\"\u83b7\u53d6\u5168\u5c40\u5bb9\u5668\u5b9e\u4f8b.\n\n    Returns:\n        Container: \u5bb9\u5668\u5b9e\u4f8b\n\n    Raises:\n        RuntimeError: \u5982\u679c\u5bb9\u5668\u672a\u521d\u59cb\u5316\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; container = DjangoContainer.get_container()\n    \"\"\"\n    if cls._container is None:\n        # \u5c1d\u8bd5\u4ece Django settings \u83b7\u53d6\n        try:\n            from django.conf import settings\n\n            if hasattr(settings, \"CONTAINER\"):\n                cls._container = settings.CONTAINER\n        except Exception:\n            pass\n\n    if cls._container is None:\n        raise RuntimeError(\"Container not initialized. Call DjangoContainer.setup() or set settings.CONTAINER\")\n\n    return cls._container\n</code></pre>"},{"location":"en/guaids/integrations-django-container/#symphra_container.integrations.DjangoContainer.inject","title":"<code>inject(func)</code>  <code>classmethod</code>","text":"<p>\u88c5\u9970\u5668: \u81ea\u52a8\u6ce8\u5165\u51fd\u6570\u53c2\u6570.</p> <p>\u5206\u6790\u51fd\u6570\u7b7e\u540d(\u8df3\u8fc7 request \u53c2\u6570)\uff0c\u6839\u636e\u7c7b\u578b\u6ce8\u89e3\u81ea\u52a8\u6ce8\u5165\u670d\u52a1\u3002</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>func</code> <code>F</code> <p>\u8981\u88c5\u9970\u7684\u51fd\u6570(Django \u89c6\u56fe\u51fd\u6570)</p> \u5fc5\u9700 <p>\u8fd4\u56de\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 <code>F</code> <code>F</code> <p>\u88c5\u9970\u540e\u7684\u51fd\u6570</p> <p>\u5f15\u53d1\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>RuntimeError</code> <p>\u5982\u679c\u670d\u52a1\u89e3\u6790\u5931\u8d25</p> \u793a\u4f8b <p>@DjangoContainer.inject ... def view(request, user_service: UserService): ...     return JsonResponse(user_service.get_all())</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/integrations/django.py</code> <pre><code>@classmethod\ndef inject(cls, func: F) -&gt; F:\n    \"\"\"\u88c5\u9970\u5668: \u81ea\u52a8\u6ce8\u5165\u51fd\u6570\u53c2\u6570.\n\n    \u5206\u6790\u51fd\u6570\u7b7e\u540d(\u8df3\u8fc7 request \u53c2\u6570)\uff0c\u6839\u636e\u7c7b\u578b\u6ce8\u89e3\u81ea\u52a8\u6ce8\u5165\u670d\u52a1\u3002\n\n    Args:\n        func: \u8981\u88c5\u9970\u7684\u51fd\u6570(Django \u89c6\u56fe\u51fd\u6570)\n\n    Returns:\n        F: \u88c5\u9970\u540e\u7684\u51fd\u6570\n\n    Raises:\n        RuntimeError: \u5982\u679c\u670d\u52a1\u89e3\u6790\u5931\u8d25\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; @DjangoContainer.inject\n        ... def view(request, user_service: UserService):\n        ...     return JsonResponse(user_service.get_all())\n    \"\"\"\n    sig = inspect.signature(func)\n\n    @functools.wraps(func)\n    def wrapper(*args: Any, **kwargs: Any) -&gt; Any:\n        # \u5206\u6790\u9700\u8981\u6ce8\u5165\u7684\u53c2\u6570\n        bound_args = sig.bind_partial(*args, **kwargs)\n        bound_args.apply_defaults()\n\n        for param_name, param in sig.parameters.items():\n            # \u8df3\u8fc7 request \u53c2\u6570\u548c\u5df2\u63d0\u4f9b\u7684\u53c2\u6570\n            if param_name == \"request\" or param_name in bound_args.arguments:\n                continue\n\n            # \u68c0\u67e5\u662f\u5426\u6709\u7c7b\u578b\u6ce8\u89e3\n            if param.annotation == inspect.Parameter.empty:\n                continue\n\n            # \u5c1d\u8bd5\u89e3\u6790\u670d\u52a1\n            try:\n                service = cls.resolve(param.annotation)\n                bound_args.arguments[param_name] = service\n            except Exception:\n                # \u65e0\u6cd5\u89e3\u6790\uff0c\u53ef\u80fd\u4e0d\u662f\u5bb9\u5668\u7ba1\u7406\u7684\u670d\u52a1\n                continue\n\n        return func(*bound_args.args, **bound_args.kwargs)\n\n    return cast(F, wrapper)\n</code></pre>"},{"location":"en/guaids/integrations-django-container/#symphra_container.integrations.DjangoContainer.resolve","title":"<code>resolve(service_type)</code>  <code>classmethod</code>","text":"<p>\u89e3\u6790\u670d\u52a1\u5b9e\u4f8b.</p> <p>\u5728\u8bf7\u6c42\u4e0a\u4e0b\u6587\u4e2d\u4f7f\u7528\u4f5c\u7528\u57df\u5bb9\u5668(\u5982\u679c\u6709)\uff0c\u5426\u5219\u4f7f\u7528\u6839\u5bb9\u5668\u3002</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>service_type</code> <code>type[T]</code> <p>\u8981\u89e3\u6790\u7684\u670d\u52a1\u7c7b\u578b</p> \u5fc5\u9700 <p>\u8fd4\u56de\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 <code>T</code> <code>T</code> <p>\u670d\u52a1\u5b9e\u4f8b</p> <p>\u5f15\u53d1\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>RuntimeError</code> <p>\u5982\u679c\u5bb9\u5668\u672a\u521d\u59cb\u5316</p> <code>ServiceNotFoundError</code> <p>\u5982\u679c\u670d\u52a1\u672a\u6ce8\u518c</p> \u793a\u4f8b <p>user_service = DjangoContainer.resolve(UserService)</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/integrations/django.py</code> <pre><code>@classmethod\ndef resolve(cls, service_type: type[T]) -&gt; T:\n    \"\"\"\u89e3\u6790\u670d\u52a1\u5b9e\u4f8b.\n\n    \u5728\u8bf7\u6c42\u4e0a\u4e0b\u6587\u4e2d\u4f7f\u7528\u4f5c\u7528\u57df\u5bb9\u5668(\u5982\u679c\u6709)\uff0c\u5426\u5219\u4f7f\u7528\u6839\u5bb9\u5668\u3002\n\n    Args:\n        service_type: \u8981\u89e3\u6790\u7684\u670d\u52a1\u7c7b\u578b\n\n    Returns:\n        T: \u670d\u52a1\u5b9e\u4f8b\n\n    Raises:\n        RuntimeError: \u5982\u679c\u5bb9\u5668\u672a\u521d\u59cb\u5316\n        ServiceNotFoundError: \u5982\u679c\u670d\u52a1\u672a\u6ce8\u518c\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; user_service = DjangoContainer.resolve(UserService)\n    \"\"\"\n    # \u5c1d\u8bd5\u4ece\u5f53\u524d\u7ebf\u7a0b\u83b7\u53d6\u8bf7\u6c42\u5bf9\u8c61\n    try:\n        import threading\n\n        local = threading.local()\n        request: HttpRequest | None = getattr(local, \"request\", None)\n        if request and hasattr(request, \"container_scope\"):\n            return request.container_scope.resolve(service_type)\n    except Exception:\n        pass\n\n    # \u4f7f\u7528\u6839\u5bb9\u5668\n    container = cls.get_container()\n    return container.resolve(service_type)\n</code></pre>"},{"location":"en/guaids/integrations-django-container/#symphra_container.integrations.DjangoContainer.setup","title":"<code>setup(container)</code>  <code>classmethod</code>","text":"<p>\u8bbe\u7f6e\u5168\u5c40\u5bb9\u5668\u5b9e\u4f8b.</p> <p>\u901a\u5e38\u5728 settings.py \u6216\u5e94\u7528\u542f\u52a8\u65f6\u8c03\u7528\u3002</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>container</code> <code>Container</code> <p>\u5bb9\u5668\u5b9e\u4f8b</p> \u5fc5\u9700 <p>\u5f15\u53d1\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>ImportError</code> <p>\u5982\u679c\u672a\u5b89\u88c5 Django</p> \u793a\u4f8b <p>from django.conf import settings container = Container() DjangoContainer.setup(container)</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/integrations/django.py</code> <pre><code>@classmethod\ndef setup(cls, container: Container) -&gt; None:\n    \"\"\"\u8bbe\u7f6e\u5168\u5c40\u5bb9\u5668\u5b9e\u4f8b.\n\n    \u901a\u5e38\u5728 settings.py \u6216\u5e94\u7528\u542f\u52a8\u65f6\u8c03\u7528\u3002\n\n    Args:\n        container: \u5bb9\u5668\u5b9e\u4f8b\n\n    Raises:\n        ImportError: \u5982\u679c\u672a\u5b89\u88c5 Django\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; from django.conf import settings\n        &gt;&gt;&gt; container = Container()\n        &gt;&gt;&gt; DjangoContainer.setup(container)\n    \"\"\"\n    try:\n        import django  # noqa: F401\n    except ImportError as e:\n        raise ImportError(\"Django is not installed. Install it with: pip install symphra-container[django]\") from e\n\n    cls._container = container\n</code></pre>"},{"location":"en/guaids/integrations-fastapi-inject/","title":"fastapi_inject","text":""},{"location":"en/guaids/integrations-fastapi-inject/#symphra_container.integrations.fastapi_inject","title":"<code>symphra_container.integrations.fastapi_inject(service_type)</code>","text":"<p>\u521b\u5efa FastAPI \u4f9d\u8d56\u6ce8\u5165\u51fd\u6570.</p> <p>\u7528\u4e8e\u5728 FastAPI \u8def\u7531\u4e2d\u6ce8\u5165\u670d\u52a1\u3002\u8fd4\u56de\u7684\u51fd\u6570\u53ef\u4ee5\u4f5c\u4e3a Depends() \u7684\u53c2\u6570\u3002</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>service_type</code> <code>type[T]</code> <p>\u8981\u6ce8\u5165\u7684\u670d\u52a1\u7c7b\u578b</p> \u5fc5\u9700 <p>\u8fd4\u56de\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 <code>Callable</code> <code>Callable[[], T]</code> <p>\u53ef\u7528\u4e8e Depends() \u7684\u4f9d\u8d56\u51fd\u6570</p> <p>\u5f15\u53d1\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>RuntimeError</code> <p>\u5982\u679c\u5bb9\u5668\u672a\u521d\u59cb\u5316</p> <code>ServiceNotFoundError</code> <p>\u5982\u679c\u670d\u52a1\u672a\u6ce8\u518c</p> \u793a\u4f8b <p>@app.get(\"/users\") async def get_users( ...     user_service: UserService = Depends(inject(UserService)) ... ): ...     return await user_service.get_all()</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/integrations/fastapi.py</code> <pre><code>def inject(service_type: type[T]) -&gt; Callable[[], T]:\n    \"\"\"\u521b\u5efa FastAPI \u4f9d\u8d56\u6ce8\u5165\u51fd\u6570.\n\n    \u7528\u4e8e\u5728 FastAPI \u8def\u7531\u4e2d\u6ce8\u5165\u670d\u52a1\u3002\u8fd4\u56de\u7684\u51fd\u6570\u53ef\u4ee5\u4f5c\u4e3a Depends() \u7684\u53c2\u6570\u3002\n\n    Args:\n        service_type: \u8981\u6ce8\u5165\u7684\u670d\u52a1\u7c7b\u578b\n\n    Returns:\n        Callable: \u53ef\u7528\u4e8e Depends() \u7684\u4f9d\u8d56\u51fd\u6570\n\n    Raises:\n        RuntimeError: \u5982\u679c\u5bb9\u5668\u672a\u521d\u59cb\u5316\n        ServiceNotFoundError: \u5982\u679c\u670d\u52a1\u672a\u6ce8\u518c\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; @app.get(\"/users\")\n        &gt;&gt;&gt; async def get_users(\n        ...     user_service: UserService = Depends(inject(UserService))\n        ... ):\n        ...     return await user_service.get_all()\n    \"\"\"\n\n    def dependency() -&gt; T:\n        container = get_container()\n        # \u68c0\u67e5\u662f\u5426\u662f\u5f02\u6b65\u670d\u52a1\n        registration = container._registrations.get(service_type)\n        if registration and registration.is_async:\n            # \u5f02\u6b65\u670d\u52a1\u9700\u8981\u7528 resolve_async, \u4f46\u8fd9\u91cc\u662f\u540c\u6b65\u4e0a\u4e0b\u6587\n            # FastAPI \u4f1a\u81ea\u52a8\u5904\u7406\u5f02\u6b65\u4f9d\u8d56\uff0c\u6240\u4ee5\u8fd9\u91cc\u76f4\u63a5\u8fd4\u56de coroutine\n            import asyncio\n\n            coro = container.resolve_async(service_type)\n            # \u5982\u679c\u5f53\u524d\u5df2\u7ecf\u5728 async \u4e0a\u4e0b\u6587\u4e2d\uff0c\u76f4\u63a5\u8fd4\u56de coroutine\n            # FastAPI \u4f1a\u81ea\u52a8 await \u5b83\n            try:\n                asyncio.get_running_loop()\n                # \u5728 async \u4e0a\u4e0b\u6587\u4e2d\uff0c\u8fd4\u56de coroutine \u8ba9 FastAPI await\n                return coro  # type: ignore\n            except RuntimeError:\n                # \u4e0d\u5728 async \u4e0a\u4e0b\u6587\u4e2d\uff0c\u5c1d\u8bd5\u540c\u6b65\u89e3\u6790\n                return container.resolve(service_type)\n        else:\n            # \u540c\u6b65\u670d\u52a1\u76f4\u63a5\u89e3\u6790\n            return container.resolve(service_type)\n\n    return dependency\n</code></pre>"},{"location":"en/guaids/integrations-flask-container/","title":"FlaskContainer","text":""},{"location":"en/guaids/integrations-flask-container/#symphra_container.integrations.FlaskContainer","title":"<code>symphra_container.integrations.FlaskContainer</code>","text":"<p>Flask \u5e94\u7528\u7684\u5bb9\u5668\u5305\u88c5\u5668.</p> <p>\u63d0\u4f9b\u4e0e Flask \u8bf7\u6c42\u751f\u547d\u5468\u671f\u96c6\u6210\u7684\u4f9d\u8d56\u6ce8\u5165\u529f\u80fd\u3002</p> <p>\u5c5e\u6027\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 <code>app</code> <p>Flask \u5e94\u7528\u5b9e\u4f8b</p> <code>container</code> <p>\u5bb9\u5668\u5b9e\u4f8b</p> \u793a\u4f8b <p>app = Flask(name) container = Container() flask_container = FlaskContainer(app, container) @flask_container.inject ... def view(user_service: UserService): ...     return user_service.get_users()</p> Source code in <code>src/symphra_container/integrations/flask.py</code> <pre><code>class FlaskContainer:\n    \"\"\"Flask \u5e94\u7528\u7684\u5bb9\u5668\u5305\u88c5\u5668.\n\n    \u63d0\u4f9b\u4e0e Flask \u8bf7\u6c42\u751f\u547d\u5468\u671f\u96c6\u6210\u7684\u4f9d\u8d56\u6ce8\u5165\u529f\u80fd\u3002\n\n    Attributes:\n        app: Flask \u5e94\u7528\u5b9e\u4f8b\n        container: \u5bb9\u5668\u5b9e\u4f8b\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; app = Flask(__name__)\n        &gt;&gt;&gt; container = Container()\n        &gt;&gt;&gt; flask_container = FlaskContainer(app, container)\n        &gt;&gt;&gt; @flask_container.inject\n        ... def view(user_service: UserService):\n        ...     return user_service.get_users()\n    \"\"\"\n\n    def __init__(self, app: Flask, container: Container) -&gt; None:\n        \"\"\"\u521d\u59cb\u5316 Flask \u5bb9\u5668.\n\n        Args:\n            app: Flask \u5e94\u7528\u5b9e\u4f8b\n            container: \u5bb9\u5668\u5b9e\u4f8b\n\n        Raises:\n            ImportError: \u5982\u679c\u672a\u5b89\u88c5 Flask\n        \"\"\"\n        try:\n            from flask import Flask, g\n        except ImportError as e:\n            raise ImportError(\"Flask is not installed. Install it with: pip install symphra-container[flask]\") from e\n\n        self.app = app\n        self.container = container\n        self._flask_g = g\n\n        # \u6ce8\u518c\u5e94\u7528\u4e0a\u4e0b\u6587\u94a9\u5b50\u6765\u7ba1\u7406\u4f5c\u7528\u57df\n        @app.teardown_appcontext\n        def teardown_context(exception: Exception | None = None) -&gt; None:\n            \"\"\"\u5728\u5e94\u7528\u4e0a\u4e0b\u6587\u7ed3\u675f\u65f6\u6e05\u7406\u4f5c\u7528\u57df.\"\"\"\n            scope = getattr(g, \"container_scope\", None)\n            if scope:\n                scope.__exit__(None, None, None)  # \u6b63\u786e\u9000\u51fa\u4f5c\u7528\u57df\n\n    def resolve(self, service_type: type[T]) -&gt; T:\n        \"\"\"\u89e3\u6790\u670d\u52a1\u5b9e\u4f8b.\n\n        \u5728\u8bf7\u6c42\u4e0a\u4e0b\u6587\u4e2d\u4f7f\u7528\u4f5c\u7528\u57df\u5bb9\u5668\uff0c\u5426\u5219\u4f7f\u7528\u6839\u5bb9\u5668\u3002\n\n        Args:\n            service_type: \u8981\u89e3\u6790\u7684\u670d\u52a1\u7c7b\u578b\n\n        Returns:\n            T: \u670d\u52a1\u5b9e\u4f8b\n\n        Raises:\n            RuntimeError: \u5982\u679c\u4e0d\u5728\u8bf7\u6c42\u4e0a\u4e0b\u6587\u4e2d\u4e14\u670d\u52a1\u662f SCOPED\n            ServiceNotFoundError: \u5982\u679c\u670d\u52a1\u672a\u6ce8\u518c\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; user_service = flask_container.resolve(UserService)\n        \"\"\"\n        try:\n            from flask import g\n\n            # \u5982\u679c\u8fd8\u6ca1\u6709\u4f5c\u7528\u57df,\u521b\u5efa\u4e00\u4e2a\n            scope = getattr(g, \"container_scope\", None)\n            if scope is None:\n                scope = self.container.create_scope()\n                scope.__enter__()  # \u6fc0\u6d3b\u4f5c\u7528\u57df\n                g.container_scope = scope\n\n            return scope.resolve(service_type)\n        except RuntimeError:\n            # \u4e0d\u5728\u8bf7\u6c42\u4e0a\u4e0b\u6587\u4e2d\n            pass\n\n        return self.container.resolve(service_type)\n\n    def inject(self, func: F) -&gt; F:\n        \"\"\"\u88c5\u9970\u5668: \u81ea\u52a8\u6ce8\u5165\u51fd\u6570\u53c2\u6570.\n\n        \u5206\u6790\u51fd\u6570\u7b7e\u540d\uff0c\u6839\u636e\u7c7b\u578b\u6ce8\u89e3\u81ea\u52a8\u6ce8\u5165\u670d\u52a1\u3002\n\n        Args:\n            func: \u8981\u88c5\u9970\u7684\u51fd\u6570\n\n        Returns:\n            F: \u88c5\u9970\u540e\u7684\u51fd\u6570\n\n        Raises:\n            RuntimeError: \u5982\u679c\u670d\u52a1\u89e3\u6790\u5931\u8d25\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; @flask_container.inject\n            ... def view(user_service: UserService, email_service: EmailService):\n            ...     # user_service \u548c email_service \u4f1a\u81ea\u52a8\u6ce8\u5165\n            ...     return user_service.get_all()\n        \"\"\"\n        sig = inspect.signature(func)\n\n        # \u83b7\u53d6\u51fd\u6570\u7684\u7c7b\u578b\u63d0\u793a, \u7528\u4e8e\u89e3\u6790\u5b57\u7b26\u4e32\u6ce8\u89e3\n        try:\n            type_hints = get_type_hints(func)\n        except (NameError, TypeError):\n            # \u5982\u679c\u65e0\u6cd5\u83b7\u53d6\u7c7b\u578b\u63d0\u793a, \u4f7f\u7528\u7a7a\u7684\u5b57\u5178\n            type_hints = {}\n\n        @functools.wraps(func)\n        def wrapper(*args: Any, **kwargs: Any) -&gt; Any:\n            # \u83b7\u53d6\u6240\u6709\u53c2\u6570\u7684\u7ed1\u5b9a\n            bound = sig.bind_partial(*args, **kwargs)\n            bound.apply_defaults()\n\n            # \u6536\u96c6\u9700\u8981\u6ce8\u5165\u7684\u53c2\u6570\n            for param_name, param in sig.parameters.items():\n                # \u8df3\u8fc7\u5df2\u63d0\u4f9b\u7684\u53c2\u6570\n                if param_name in bound.arguments:\n                    continue\n\n                # \u68c0\u67e5\u662f\u5426\u6709\u7c7b\u578b\u6ce8\u89e3\n                if param.annotation == inspect.Parameter.empty:\n                    continue\n\n                # \u89e3\u6790\u6ce8\u89e3\u7c7b\u578b\n                annotation = type_hints.get(param_name, param.annotation)\n                if annotation == inspect.Parameter.empty:\n                    continue\n\n                # \u5c1d\u8bd5\u89e3\u6790\u670d\u52a1\n                try:\n                    service = self.resolve(annotation)\n                    bound.arguments[param_name] = service\n                except Exception as e:\n                    # \u65e0\u6cd5\u89e3\u6790, \u53ef\u80fd\u4e0d\u662f\u5bb9\u5668\u7ba1\u7406\u7684\u670d\u52a1\n                    # \u6ce8\u610f: \u5982\u679c\u8fd9\u662f\u5bb9\u5668\u7ba1\u7406\u7684\u670d\u52a1\u4f46\u89e3\u6790\u5931\u8d25, \u5e94\u8be5\u629b\u51fa\u5f02\u5e38\n                    if hasattr(e, '__class__') and \"ServiceNotFoundError\" in e.__class__.__name__:\n                        # \u670d\u52a1\u672a\u627e\u5230, \u53ef\u80fd\u786e\u5b9e\u4e0d\u662f\u5bb9\u5668\u7ba1\u7406\u7684\n                        continue\n                    # \u5176\u4ed6\u5f02\u5e38\u5e94\u8be5\u91cd\u65b0\u629b\u51fa\n                    raise\n\n            # \u8c03\u7528\u51fd\u6570, \u4f7f\u7528\u5b8c\u6574\u7684\u53c2\u6570\u5b57\u5178\n            return func(**bound.arguments)\n\n        return cast(\"F\", wrapper)\n</code></pre>"},{"location":"en/guaids/integrations-flask-container/#symphra_container.integrations.FlaskContainer.__init__","title":"<code>__init__(app, container)</code>","text":"<p>\u521d\u59cb\u5316 Flask \u5bb9\u5668.</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>app</code> <code>Flask</code> <p>Flask \u5e94\u7528\u5b9e\u4f8b</p> \u5fc5\u9700 <code>container</code> <code>Container</code> <p>\u5bb9\u5668\u5b9e\u4f8b</p> \u5fc5\u9700 <p>\u5f15\u53d1\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>ImportError</code> <p>\u5982\u679c\u672a\u5b89\u88c5 Flask</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/integrations/flask.py</code> <pre><code>def __init__(self, app: Flask, container: Container) -&gt; None:\n    \"\"\"\u521d\u59cb\u5316 Flask \u5bb9\u5668.\n\n    Args:\n        app: Flask \u5e94\u7528\u5b9e\u4f8b\n        container: \u5bb9\u5668\u5b9e\u4f8b\n\n    Raises:\n        ImportError: \u5982\u679c\u672a\u5b89\u88c5 Flask\n    \"\"\"\n    try:\n        from flask import Flask, g\n    except ImportError as e:\n        raise ImportError(\"Flask is not installed. Install it with: pip install symphra-container[flask]\") from e\n\n    self.app = app\n    self.container = container\n    self._flask_g = g\n\n    # \u6ce8\u518c\u5e94\u7528\u4e0a\u4e0b\u6587\u94a9\u5b50\u6765\u7ba1\u7406\u4f5c\u7528\u57df\n    @app.teardown_appcontext\n    def teardown_context(exception: Exception | None = None) -&gt; None:\n        \"\"\"\u5728\u5e94\u7528\u4e0a\u4e0b\u6587\u7ed3\u675f\u65f6\u6e05\u7406\u4f5c\u7528\u57df.\"\"\"\n        scope = getattr(g, \"container_scope\", None)\n        if scope:\n            scope.__exit__(None, None, None)  # \u6b63\u786e\u9000\u51fa\u4f5c\u7528\u57df\n</code></pre>"},{"location":"en/guaids/integrations-flask-container/#symphra_container.integrations.FlaskContainer.inject","title":"<code>inject(func)</code>","text":"<p>\u88c5\u9970\u5668: \u81ea\u52a8\u6ce8\u5165\u51fd\u6570\u53c2\u6570.</p> <p>\u5206\u6790\u51fd\u6570\u7b7e\u540d\uff0c\u6839\u636e\u7c7b\u578b\u6ce8\u89e3\u81ea\u52a8\u6ce8\u5165\u670d\u52a1\u3002</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>func</code> <code>F</code> <p>\u8981\u88c5\u9970\u7684\u51fd\u6570</p> \u5fc5\u9700 <p>\u8fd4\u56de\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 <code>F</code> <code>F</code> <p>\u88c5\u9970\u540e\u7684\u51fd\u6570</p> <p>\u5f15\u53d1\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>RuntimeError</code> <p>\u5982\u679c\u670d\u52a1\u89e3\u6790\u5931\u8d25</p> \u793a\u4f8b <p>@flask_container.inject ... def view(user_service: UserService, email_service: EmailService): ...     # user_service \u548c email_service \u4f1a\u81ea\u52a8\u6ce8\u5165 ...     return user_service.get_all()</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/integrations/flask.py</code> <pre><code>def inject(self, func: F) -&gt; F:\n    \"\"\"\u88c5\u9970\u5668: \u81ea\u52a8\u6ce8\u5165\u51fd\u6570\u53c2\u6570.\n\n    \u5206\u6790\u51fd\u6570\u7b7e\u540d\uff0c\u6839\u636e\u7c7b\u578b\u6ce8\u89e3\u81ea\u52a8\u6ce8\u5165\u670d\u52a1\u3002\n\n    Args:\n        func: \u8981\u88c5\u9970\u7684\u51fd\u6570\n\n    Returns:\n        F: \u88c5\u9970\u540e\u7684\u51fd\u6570\n\n    Raises:\n        RuntimeError: \u5982\u679c\u670d\u52a1\u89e3\u6790\u5931\u8d25\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; @flask_container.inject\n        ... def view(user_service: UserService, email_service: EmailService):\n        ...     # user_service \u548c email_service \u4f1a\u81ea\u52a8\u6ce8\u5165\n        ...     return user_service.get_all()\n    \"\"\"\n    sig = inspect.signature(func)\n\n    # \u83b7\u53d6\u51fd\u6570\u7684\u7c7b\u578b\u63d0\u793a, \u7528\u4e8e\u89e3\u6790\u5b57\u7b26\u4e32\u6ce8\u89e3\n    try:\n        type_hints = get_type_hints(func)\n    except (NameError, TypeError):\n        # \u5982\u679c\u65e0\u6cd5\u83b7\u53d6\u7c7b\u578b\u63d0\u793a, \u4f7f\u7528\u7a7a\u7684\u5b57\u5178\n        type_hints = {}\n\n    @functools.wraps(func)\n    def wrapper(*args: Any, **kwargs: Any) -&gt; Any:\n        # \u83b7\u53d6\u6240\u6709\u53c2\u6570\u7684\u7ed1\u5b9a\n        bound = sig.bind_partial(*args, **kwargs)\n        bound.apply_defaults()\n\n        # \u6536\u96c6\u9700\u8981\u6ce8\u5165\u7684\u53c2\u6570\n        for param_name, param in sig.parameters.items():\n            # \u8df3\u8fc7\u5df2\u63d0\u4f9b\u7684\u53c2\u6570\n            if param_name in bound.arguments:\n                continue\n\n            # \u68c0\u67e5\u662f\u5426\u6709\u7c7b\u578b\u6ce8\u89e3\n            if param.annotation == inspect.Parameter.empty:\n                continue\n\n            # \u89e3\u6790\u6ce8\u89e3\u7c7b\u578b\n            annotation = type_hints.get(param_name, param.annotation)\n            if annotation == inspect.Parameter.empty:\n                continue\n\n            # \u5c1d\u8bd5\u89e3\u6790\u670d\u52a1\n            try:\n                service = self.resolve(annotation)\n                bound.arguments[param_name] = service\n            except Exception as e:\n                # \u65e0\u6cd5\u89e3\u6790, \u53ef\u80fd\u4e0d\u662f\u5bb9\u5668\u7ba1\u7406\u7684\u670d\u52a1\n                # \u6ce8\u610f: \u5982\u679c\u8fd9\u662f\u5bb9\u5668\u7ba1\u7406\u7684\u670d\u52a1\u4f46\u89e3\u6790\u5931\u8d25, \u5e94\u8be5\u629b\u51fa\u5f02\u5e38\n                if hasattr(e, '__class__') and \"ServiceNotFoundError\" in e.__class__.__name__:\n                    # \u670d\u52a1\u672a\u627e\u5230, \u53ef\u80fd\u786e\u5b9e\u4e0d\u662f\u5bb9\u5668\u7ba1\u7406\u7684\n                    continue\n                # \u5176\u4ed6\u5f02\u5e38\u5e94\u8be5\u91cd\u65b0\u629b\u51fa\n                raise\n\n        # \u8c03\u7528\u51fd\u6570, \u4f7f\u7528\u5b8c\u6574\u7684\u53c2\u6570\u5b57\u5178\n        return func(**bound.arguments)\n\n    return cast(\"F\", wrapper)\n</code></pre>"},{"location":"en/guaids/integrations-flask-container/#symphra_container.integrations.FlaskContainer.resolve","title":"<code>resolve(service_type)</code>","text":"<p>\u89e3\u6790\u670d\u52a1\u5b9e\u4f8b.</p> <p>\u5728\u8bf7\u6c42\u4e0a\u4e0b\u6587\u4e2d\u4f7f\u7528\u4f5c\u7528\u57df\u5bb9\u5668\uff0c\u5426\u5219\u4f7f\u7528\u6839\u5bb9\u5668\u3002</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>service_type</code> <code>type[T]</code> <p>\u8981\u89e3\u6790\u7684\u670d\u52a1\u7c7b\u578b</p> \u5fc5\u9700 <p>\u8fd4\u56de\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 <code>T</code> <code>T</code> <p>\u670d\u52a1\u5b9e\u4f8b</p> <p>\u5f15\u53d1\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>RuntimeError</code> <p>\u5982\u679c\u4e0d\u5728\u8bf7\u6c42\u4e0a\u4e0b\u6587\u4e2d\u4e14\u670d\u52a1\u662f SCOPED</p> <code>ServiceNotFoundError</code> <p>\u5982\u679c\u670d\u52a1\u672a\u6ce8\u518c</p> \u793a\u4f8b <p>user_service = flask_container.resolve(UserService)</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/integrations/flask.py</code> <pre><code>def resolve(self, service_type: type[T]) -&gt; T:\n    \"\"\"\u89e3\u6790\u670d\u52a1\u5b9e\u4f8b.\n\n    \u5728\u8bf7\u6c42\u4e0a\u4e0b\u6587\u4e2d\u4f7f\u7528\u4f5c\u7528\u57df\u5bb9\u5668\uff0c\u5426\u5219\u4f7f\u7528\u6839\u5bb9\u5668\u3002\n\n    Args:\n        service_type: \u8981\u89e3\u6790\u7684\u670d\u52a1\u7c7b\u578b\n\n    Returns:\n        T: \u670d\u52a1\u5b9e\u4f8b\n\n    Raises:\n        RuntimeError: \u5982\u679c\u4e0d\u5728\u8bf7\u6c42\u4e0a\u4e0b\u6587\u4e2d\u4e14\u670d\u52a1\u662f SCOPED\n        ServiceNotFoundError: \u5982\u679c\u670d\u52a1\u672a\u6ce8\u518c\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; user_service = flask_container.resolve(UserService)\n    \"\"\"\n    try:\n        from flask import g\n\n        # \u5982\u679c\u8fd8\u6ca1\u6709\u4f5c\u7528\u57df,\u521b\u5efa\u4e00\u4e2a\n        scope = getattr(g, \"container_scope\", None)\n        if scope is None:\n            scope = self.container.create_scope()\n            scope.__enter__()  # \u6fc0\u6d3b\u4f5c\u7528\u57df\n            g.container_scope = scope\n\n        return scope.resolve(service_type)\n    except RuntimeError:\n        # \u4e0d\u5728\u8bf7\u6c42\u4e0a\u4e0b\u6587\u4e2d\n        pass\n\n    return self.container.resolve(service_type)\n</code></pre>"},{"location":"en/guaids/integrations-setup-fastapi/","title":"setup_fastapi","text":""},{"location":"en/guaids/integrations-setup-fastapi/#symphra_container.integrations.setup_fastapi","title":"<code>symphra_container.integrations.setup_fastapi(app, container)</code>","text":"<p>\u5c06\u5bb9\u5668\u7ed1\u5b9a\u5230 FastAPI \u5e94\u7528.</p> <p>\u6b64\u51fd\u6570\u4f1a: 1. \u5c06\u5bb9\u5668\u5b58\u50a8\u5230\u5168\u5c40\u53d8\u91cf\u4e2d\u4f9b inject() \u4f7f\u7528 2. \u914d\u7f6e\u751f\u547d\u5468\u671f\u7ba1\u7406(\u81ea\u52a8\u5904\u7406 SCOPED \u670d\u52a1)</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>app</code> <code>FastAPI</code> <p>FastAPI \u5e94\u7528\u5b9e\u4f8b</p> \u5fc5\u9700 <code>container</code> <code>Container</code> <p>\u5bb9\u5668\u5b9e\u4f8b</p> \u5fc5\u9700 <p>\u5f15\u53d1\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>ImportError</code> <p>\u5982\u679c\u672a\u5b89\u88c5 FastAPI</p> \u793a\u4f8b <p>from fastapi import FastAPI app = FastAPI() container = Container() setup_container(app, container)</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/integrations/fastapi.py</code> <pre><code>def setup_container(app: FastAPI, container: Container) -&gt; None:\n    \"\"\"\u5c06\u5bb9\u5668\u7ed1\u5b9a\u5230 FastAPI \u5e94\u7528.\n\n    \u6b64\u51fd\u6570\u4f1a:\n    1. \u5c06\u5bb9\u5668\u5b58\u50a8\u5230\u5168\u5c40\u53d8\u91cf\u4e2d\u4f9b inject() \u4f7f\u7528\n    2. \u914d\u7f6e\u751f\u547d\u5468\u671f\u7ba1\u7406(\u81ea\u52a8\u5904\u7406 SCOPED \u670d\u52a1)\n\n    Args:\n        app: FastAPI \u5e94\u7528\u5b9e\u4f8b\n        container: \u5bb9\u5668\u5b9e\u4f8b\n\n    Raises:\n        ImportError: \u5982\u679c\u672a\u5b89\u88c5 FastAPI\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; from fastapi import FastAPI\n        &gt;&gt;&gt; app = FastAPI()\n        &gt;&gt;&gt; container = Container()\n        &gt;&gt;&gt; setup_container(app, container)\n    \"\"\"\n    try:\n        from fastapi import FastAPI\n    except ImportError as e:\n        raise ImportError(\"FastAPI is not installed. Install it with: pip install symphra-container[fastapi]\") from e\n\n    global _container, _lifespan_managed\n    _container = container\n\n    # \u6ce8\u518c\u751f\u547d\u5468\u671f\u94a9\u5b50\u7ba1\u7406 SCOPED \u4f5c\u7528\u57df\n    if not _lifespan_managed:\n        original_lifespan = app.router.lifespan_context\n\n        async def managed_lifespan(app_instance: FastAPI):\n            \"\"\"\u7ba1\u7406\u8bf7\u6c42\u4f5c\u7528\u57df\u751f\u547d\u5468\u671f.\"\"\"\n            async with container:  # \u8fdb\u5165\u5bb9\u5668\u4e0a\u4e0b\u6587\n                if original_lifespan:\n                    async with original_lifespan(app_instance):\n                        yield\n                else:\n                    yield\n\n        app.router.lifespan_context = managed_lifespan\n        _lifespan_managed = True\n</code></pre>"},{"location":"en/guaids/types-injected/","title":"Injected","text":""},{"location":"en/guaids/types-injected/#symphra_container.types.Injected","title":"<code>symphra_container.types.Injected = InjectionMarker()</code>  <code>module-attribute</code>","text":""},{"location":"en/guaids/types-injection-marker/","title":"InjectionMarker","text":""},{"location":"en/guaids/types-injection-marker/#symphra_container.types.InjectionMarker","title":"<code>symphra_container.types.InjectionMarker</code>","text":"<p>\u6ce8\u5165\u6807\u8bb0\u7c7b.</p> <p>\u7528\u4e8e\u6807\u8bb0\u51fd\u6570\u53c2\u6570\u5e94\u8be5\u88ab\u5bb9\u5668\u6ce8\u5165.</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>&gt;&gt;&gt; from symphra_container import Container, Injected\n&gt;&gt;&gt; container = Container()\n&gt;&gt;&gt; def my_function(service: UserService = Injected):\n...     # service \u4f1a\u88ab\u5bb9\u5668\u81ea\u52a8\u6ce8\u5165\n...     pass\n</code></pre> Source code in <code>src/symphra_container/types.py</code> <pre><code>class InjectionMarker:\n    \"\"\"\u6ce8\u5165\u6807\u8bb0\u7c7b.\n\n    \u7528\u4e8e\u6807\u8bb0\u51fd\u6570\u53c2\u6570\u5e94\u8be5\u88ab\u5bb9\u5668\u6ce8\u5165.\n\n    Examples:\n        &gt;&gt;&gt; from symphra_container import Container, Injected\n        &gt;&gt;&gt; container = Container()\n        &gt;&gt;&gt; def my_function(service: UserService = Injected):\n        ...     # service \u4f1a\u88ab\u5bb9\u5668\u81ea\u52a8\u6ce8\u5165\n        ...     pass\n    \"\"\"\n\n    def __init__(self) -&gt; None:\n        \"\"\"\u521d\u59cb\u5316\u6ce8\u5165\u6807\u8bb0.\"\"\"\n\n    def __repr__(self) -&gt; str:\n        \"\"\"\u8fd4\u56de\u5b57\u7b26\u4e32\u8868\u793a.\"\"\"\n        return \"Injected\"\n</code></pre>"},{"location":"en/guaids/types-injection-marker/#symphra_container.types.InjectionMarker.__init__","title":"<code>__init__()</code>","text":"<p>\u521d\u59cb\u5316\u6ce8\u5165\u6807\u8bb0.</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/types.py</code> <pre><code>def __init__(self) -&gt; None:\n    \"\"\"\u521d\u59cb\u5316\u6ce8\u5165\u6807\u8bb0.\"\"\"\n</code></pre>"},{"location":"en/guaids/types-injection-marker/#symphra_container.types.InjectionMarker.__repr__","title":"<code>__repr__()</code>","text":"<p>\u8fd4\u56de\u5b57\u7b26\u4e32\u8868\u793a.</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/types.py</code> <pre><code>def __repr__(self) -&gt; str:\n    \"\"\"\u8fd4\u56de\u5b57\u7b26\u4e32\u8868\u793a.\"\"\"\n    return \"Injected\"\n</code></pre>"},{"location":"en/guaids/types-lifetime/","title":"Lifetime","text":""},{"location":"en/guaids/types-lifetime/#symphra_container.types.Lifetime","title":"<code>symphra_container.types.Lifetime</code>","text":"<p>               Bases: <code>Enum</code></p> <p>\u670d\u52a1\u751f\u547d\u5468\u671f\u7c7b\u578b\u679a\u4e3e.</p> <p>\u5b9a\u4e49\u4e86\u670d\u52a1\u5b9e\u4f8b\u5728\u5bb9\u5668\u4e2d\u7684\u751f\u547d\u5468\u671f\u7ba1\u7406\u7b56\u7565:</p> <p>\u5c5e\u6027\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 <code>SINGLETON</code> <p>\u5168\u5c40\u5355\u4f8b,\u5bb9\u5668\u4e2d\u53ea\u6709\u4e00\u4e2a\u5b9e\u4f8b</p> <code>TRANSIENT</code> <p>\u77ac\u65f6\u6a21\u5f0f,\u6bcf\u6b21\u89e3\u6790\u90fd\u521b\u5efa\u65b0\u5b9e\u4f8b</p> <code>SCOPED</code> <p>\u4f5c\u7528\u57df\u6a21\u5f0f,\u540c\u4e00\u4f5c\u7528\u57df\u5185\u5171\u4eab\u5b9e\u4f8b</p> <code>FACTORY</code> <p>\u5de5\u5382\u6a21\u5f0f,\u4f7f\u7528\u5de5\u5382\u51fd\u6570\u521b\u5efa\u5b9e\u4f8b</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>&gt;&gt;&gt; container.register(UserService, lifetime=Lifetime.SINGLETON)\n&gt;&gt;&gt; service1 = container.resolve(UserService)\n&gt;&gt;&gt; service2 = container.resolve(UserService)\n&gt;&gt;&gt; assert service1 is service2  # \u540c\u4e00\u5b9e\u4f8b\n</code></pre> Source code in <code>src/symphra_container/types.py</code> <pre><code>class Lifetime(Enum):\n    \"\"\"\u670d\u52a1\u751f\u547d\u5468\u671f\u7c7b\u578b\u679a\u4e3e.\n\n    \u5b9a\u4e49\u4e86\u670d\u52a1\u5b9e\u4f8b\u5728\u5bb9\u5668\u4e2d\u7684\u751f\u547d\u5468\u671f\u7ba1\u7406\u7b56\u7565:\n\n    Attributes:\n        SINGLETON: \u5168\u5c40\u5355\u4f8b,\u5bb9\u5668\u4e2d\u53ea\u6709\u4e00\u4e2a\u5b9e\u4f8b\n        TRANSIENT: \u77ac\u65f6\u6a21\u5f0f,\u6bcf\u6b21\u89e3\u6790\u90fd\u521b\u5efa\u65b0\u5b9e\u4f8b\n        SCOPED: \u4f5c\u7528\u57df\u6a21\u5f0f,\u540c\u4e00\u4f5c\u7528\u57df\u5185\u5171\u4eab\u5b9e\u4f8b\n        FACTORY: \u5de5\u5382\u6a21\u5f0f,\u4f7f\u7528\u5de5\u5382\u51fd\u6570\u521b\u5efa\u5b9e\u4f8b\n\n    Examples:\n        &gt;&gt;&gt; container.register(UserService, lifetime=Lifetime.SINGLETON)\n        &gt;&gt;&gt; service1 = container.resolve(UserService)\n        &gt;&gt;&gt; service2 = container.resolve(UserService)\n        &gt;&gt;&gt; assert service1 is service2  # \u540c\u4e00\u5b9e\u4f8b\n    \"\"\"\n\n    # \u5355\u4f8b\u751f\u547d\u5468\u671f - \u5168\u5c40\u552f\u4e00\n    SINGLETON = auto()\n\n    # \u77ac\u65f6\u751f\u547d\u5468\u671f - \u6bcf\u6b21\u65b0\u5efa\n    TRANSIENT = auto()\n\n    # \u4f5c\u7528\u57df\u751f\u547d\u5468\u671f - \u4f5c\u7528\u57df\u5185\u5171\u4eab\n    SCOPED = auto()\n\n    # \u5de5\u5382\u751f\u547d\u5468\u671f - \u5de5\u5382\u51fd\u6570\u521b\u5efa\n    FACTORY = auto()\n</code></pre>"},{"location":"en/guaids/types-service-key/","title":"ServiceKey","text":""},{"location":"en/guaids/types-service-key/#symphra_container.types.ServiceKey","title":"<code>symphra_container.types.ServiceKey = type | str</code>  <code>module-attribute</code>","text":""},{"location":"en/guaids/visualization-container-diagnostic/","title":"ContainerDiagnostic","text":""},{"location":"en/guaids/visualization-container-diagnostic/#symphra_container.visualization.ContainerDiagnostic","title":"<code>symphra_container.visualization.ContainerDiagnostic</code>  <code>dataclass</code>","text":"<p>\u5bb9\u5668\u8bca\u65ad\u62a5\u544a.</p> <p>\u5c5e\u6027\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 <code>total_services</code> <code>int</code> <p>\u603b\u670d\u52a1\u6570</p> <code>singleton_count</code> <code>int</code> <p>\u5355\u4f8b\u670d\u52a1\u6570</p> <code>transient_count</code> <code>int</code> <p>\u77ac\u6001\u670d\u52a1\u6570</p> <code>scoped_count</code> <code>int</code> <p>\u4f5c\u7528\u57df\u670d\u52a1\u6570</p> <code>circular_dependencies</code> <code>list[tuple[Any, Any]]</code> <p>\u5faa\u73af\u4f9d\u8d56\u5217\u8868</p> <code>unresolvable_services</code> <code>list[Any]</code> <p>\u65e0\u6cd5\u89e3\u6790\u7684\u670d\u52a1\u5217\u8868</p> <code>warnings</code> <code>list[str]</code> <p>\u8b66\u544a\u4fe1\u606f\u5217\u8868</p> <code>health_score</code> <code>float</code> <p>\u5065\u5eb7\u8bc4\u5206 (0-100)</p> Source code in <code>src/symphra_container/visualization.py</code> <pre><code>@dataclass\nclass ContainerDiagnostic:\n    \"\"\"\u5bb9\u5668\u8bca\u65ad\u62a5\u544a.\n\n    Attributes:\n        total_services: \u603b\u670d\u52a1\u6570\n        singleton_count: \u5355\u4f8b\u670d\u52a1\u6570\n        transient_count: \u77ac\u6001\u670d\u52a1\u6570\n        scoped_count: \u4f5c\u7528\u57df\u670d\u52a1\u6570\n        circular_dependencies: \u5faa\u73af\u4f9d\u8d56\u5217\u8868\n        unresolvable_services: \u65e0\u6cd5\u89e3\u6790\u7684\u670d\u52a1\u5217\u8868\n        warnings: \u8b66\u544a\u4fe1\u606f\u5217\u8868\n        health_score: \u5065\u5eb7\u8bc4\u5206 (0-100)\n    \"\"\"\n\n    total_services: int\n    singleton_count: int\n    transient_count: int\n    scoped_count: int\n    circular_dependencies: list[tuple[Any, Any]]\n    unresolvable_services: list[Any]\n    warnings: list[str]\n    health_score: float\n</code></pre>"},{"location":"en/guaids/visualization-debug-resolution/","title":"debug_resolution","text":""},{"location":"en/guaids/visualization-debug-resolution/#symphra_container.visualization.debug_resolution","title":"<code>symphra_container.visualization.debug_resolution(container, key)</code>","text":"<p>\u8c03\u8bd5\u670d\u52a1\u89e3\u6790\u8fc7\u7a0b.</p> <p>\u6253\u5370\u8be6\u7ec6\u7684\u89e3\u6790\u6b65\u9aa4\u548c\u4f9d\u8d56\u4fe1\u606f, \u5e2e\u52a9\u8bca\u65ad\u95ee\u9898\u3002</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>container</code> <code>Container</code> <p>\u5bb9\u5668\u5b9e\u4f8b</p> \u5fc5\u9700 <code>key</code> <code>Any</code> <p>\u8981\u8c03\u8bd5\u7684\u670d\u52a1\u952e</p> \u5fc5\u9700 Example <p>debug_resolution(container, UserService) \ud83d\udd0d Resolving: UserService \u2705 Registration found: UserService (Singleton) \ud83d\udce6 Dependencies:   - UserRepository (registered: \u2705)   - Logger (registered: \u2705) \ud83c\udfaf Resolution order:   1. Logger   2. UserRepository   3. UserService \u2705 Resolution successful</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/visualization.py</code> <pre><code>def debug_resolution(container: Container, key: Any) -&gt; None:\n    \"\"\"\u8c03\u8bd5\u670d\u52a1\u89e3\u6790\u8fc7\u7a0b.\n\n    \u6253\u5370\u8be6\u7ec6\u7684\u89e3\u6790\u6b65\u9aa4\u548c\u4f9d\u8d56\u4fe1\u606f, \u5e2e\u52a9\u8bca\u65ad\u95ee\u9898\u3002\n\n    Args:\n        container: \u5bb9\u5668\u5b9e\u4f8b\n        key: \u8981\u8c03\u8bd5\u7684\u670d\u52a1\u952e\n\n    Example:\n        &gt;&gt;&gt; debug_resolution(container, UserService)\n        \ud83d\udd0d Resolving: UserService\n        \u2705 Registration found: UserService (Singleton)\n        \ud83d\udce6 Dependencies:\n          - UserRepository (registered: \u2705)\n          - Logger (registered: \u2705)\n        \ud83c\udfaf Resolution order:\n          1. Logger\n          2. UserRepository\n          3. UserService\n        \u2705 Resolution successful\n    \"\"\"\n    print(f\"\ud83d\udd0d Resolving: {_format_key(key)}\")\n\n    registration = container._registrations.get(key)\n    if not registration:\n        print(f\"\u274c Service not registered: {_format_key(key)}\")\n        return\n\n    lifetime = registration.lifetime.name\n    print(f\"\u2705 Registration found: {_format_key(key)} ({lifetime})\")\n\n    if registration.factory:\n        dependencies = _extract_dependencies(registration.factory)\n        if dependencies:\n            print(\"\ud83d\udce6 Dependencies:\")\n            for dep in dependencies:\n                is_registered = dep in container._registrations\n                status = \"\u2705\" if is_registered else \"\u274c\"\n                print(f\"  {status} {_format_key(dep)}\")\n\n            print(\"\\n\ud83c\udfaf Resolution order:\")\n            order = _resolve_order(container, key)\n            for i, service in enumerate(order, 1):\n                print(f\"  {i}. {_format_key(service)}\")\n        else:\n            print(\"\ud83d\udce6 No dependencies\")\n    else:\n        print(\"\ud83d\udce6 No factory (instance registration)\")\n\n    # \u5c1d\u8bd5\u5b9e\u9645\u89e3\u6790\n    try:\n        instance = container.resolve(key)\n        print(f\"\\n\u2705 Resolution successful: {type(instance).__name__}\")\n    except Exception as e:\n        print(f\"\\n\u274c Resolution failed: {e}\")\n</code></pre>"},{"location":"en/guaids/visualization-diagnose-container/","title":"diagnose_container","text":""},{"location":"en/guaids/visualization-diagnose-container/#symphra_container.visualization.diagnose_container","title":"<code>symphra_container.visualization.diagnose_container(container)</code>","text":"<p>\u8bca\u65ad\u5bb9\u5668\u5065\u5eb7\u72b6\u6001.</p> <p>\u68c0\u67e5\u5faa\u73af\u4f9d\u8d56\u3001\u65e0\u6cd5\u89e3\u6790\u7684\u670d\u52a1\u7b49\u95ee\u9898\u3002</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>container</code> <code>Container</code> <p>\u5bb9\u5668\u5b9e\u4f8b</p> \u5fc5\u9700 <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>ContainerDiagnostic</code> <p>\u8bca\u65ad\u62a5\u544a</p> Example <p>report = diagnose_container(container) print(f\"Health Score: {report.health_score}/100\") if report.circular_dependencies: ...     print(\"Circular dependencies found!\") if report.warnings: ...     for warning in report.warnings: ...         print(f\"\u26a0\ufe0f  {warning}\")</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/visualization.py</code> <pre><code>def diagnose_container(container: Container) -&gt; ContainerDiagnostic:\n    \"\"\"\u8bca\u65ad\u5bb9\u5668\u5065\u5eb7\u72b6\u6001.\n\n    \u68c0\u67e5\u5faa\u73af\u4f9d\u8d56\u3001\u65e0\u6cd5\u89e3\u6790\u7684\u670d\u52a1\u7b49\u95ee\u9898\u3002\n\n    Args:\n        container: \u5bb9\u5668\u5b9e\u4f8b\n\n    Returns:\n        \u8bca\u65ad\u62a5\u544a\n\n    Example:\n        &gt;&gt;&gt; report = diagnose_container(container)\n        &gt;&gt;&gt; print(f\"Health Score: {report.health_score}/100\")\n        &gt;&gt;&gt; if report.circular_dependencies:\n        ...     print(\"Circular dependencies found!\")\n        &gt;&gt;&gt; if report.warnings:\n        ...     for warning in report.warnings:\n        ...         print(f\"\u26a0\ufe0f  {warning}\")\n    \"\"\"\n    from .types import Lifetime\n\n    registrations = container._registrations\n    total = len(registrations)\n\n    # \u7edf\u8ba1\u751f\u547d\u5468\u671f\n    singleton_count = 0\n    transient_count = 0\n    scoped_count = 0\n\n    for registration in registrations.values():\n        # lifetime \u662f Lifetime \u679a\u4e3e\n        if registration.lifetime == Lifetime.SINGLETON:\n            singleton_count += 1\n        elif registration.lifetime == Lifetime.TRANSIENT:\n            transient_count += 1\n        elif registration.lifetime == Lifetime.SCOPED:\n            scoped_count += 1\n\n    # \u68c0\u67e5\u5faa\u73af\u4f9d\u8d56\n    circular = _detect_circular_dependencies(container)\n\n    # \u68c0\u67e5\u65e0\u6cd5\u89e3\u6790\u7684\u670d\u52a1\n    unresolvable = []\n    warnings = []\n\n    for key in registrations:\n        try:\n            container.resolve(key)\n        except Exception as e:\n            unresolvable.append(key)\n            warnings.append(f\"{_format_key(key)}: {e}\")\n\n    # \u8ba1\u7b97\u5065\u5eb7\u8bc4\u5206\n    health_score = 100.0\n    if circular:\n        health_score -= len(circular) * 20\n    if unresolvable:\n        health_score -= len(unresolvable) * 10\n    health_score = max(0, health_score)\n\n    return ContainerDiagnostic(\n        total_services=total,\n        singleton_count=singleton_count,\n        transient_count=transient_count,\n        scoped_count=scoped_count,\n        circular_dependencies=circular,\n        unresolvable_services=unresolvable,\n        warnings=warnings,\n        health_score=health_score,\n    )\n</code></pre>"},{"location":"en/guaids/visualization-print-dependency-graph/","title":"print_dependency_graph","text":""},{"location":"en/guaids/visualization-print-dependency-graph/#symphra_container.visualization.print_dependency_graph","title":"<code>symphra_container.visualization.print_dependency_graph(container, key=None, indent=0)</code>","text":"<p>\u6253\u5370\u4f9d\u8d56\u5173\u7cfb\u6811.</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>container</code> <code>Container</code> <p>\u5bb9\u5668\u5b9e\u4f8b</p> \u5fc5\u9700 <code>key</code> <code>Any</code> <p>\u670d\u52a1\u952e (None \u8868\u793a\u6253\u5370\u6240\u6709\u670d\u52a1)</p> <code>None</code> <code>indent</code> <code>int</code> <p>\u7f29\u8fdb\u7ea7\u522b (\u5185\u90e8\u4f7f\u7528)</p> <code>0</code> Example <p>print_dependency_graph(container) UserService (Singleton)   \u251c\u2500 UserRepository (Scoped)   \u2502  \u2514\u2500 DatabaseContext (Singleton)   \u2514\u2500 Logger (Singleton)</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/visualization.py</code> <pre><code>def print_dependency_graph(container: Container, key: Any = None, indent: int = 0) -&gt; None:\n    \"\"\"\u6253\u5370\u4f9d\u8d56\u5173\u7cfb\u6811.\n\n    Args:\n        container: \u5bb9\u5668\u5b9e\u4f8b\n        key: \u670d\u52a1\u952e (None \u8868\u793a\u6253\u5370\u6240\u6709\u670d\u52a1)\n        indent: \u7f29\u8fdb\u7ea7\u522b (\u5185\u90e8\u4f7f\u7528)\n\n    Example:\n        &gt;&gt;&gt; print_dependency_graph(container)\n        UserService (Singleton)\n          \u251c\u2500 UserRepository (Scoped)\n          \u2502  \u2514\u2500 DatabaseContext (Singleton)\n          \u2514\u2500 Logger (Singleton)\n\n        &gt;&gt;&gt; # \u6253\u5370\u7279\u5b9a\u670d\u52a1\u7684\u4f9d\u8d56\u6811\n        &gt;&gt;&gt; print_dependency_graph(container, UserService)\n    \"\"\"\n    if key is None:\n        # \u6253\u5370\u6240\u6709\u9876\u5c42\u670d\u52a1\n        for service_key in container._registrations:\n            print_dependency_graph(container, service_key, 0)\n            print()\n        return\n\n    registration = container._registrations.get(key)\n    if not registration:\n        print(f\"{'  ' * indent}\u274c {_format_key(key)} (Not registered)\")\n        return\n\n    # \u4f7f\u7528\u679a\u4e3e\u7684 name \u5c5e\u6027\u800c\u4e0d\u662f\u7c7b\u540d\n    lifetime = registration.lifetime.name\n    key_name = _format_key(key)\n\n    print(f\"{'  ' * indent}{key_name} ({lifetime})\")\n\n    if registration.factory:\n        dependencies = _extract_dependencies(registration.factory)\n        for i, dep in enumerate(dependencies):\n            is_last = i == len(dependencies) - 1\n            prefix = \"\u2514\u2500\" if is_last else \"\u251c\u2500\"\n            print(f\"{'  ' * indent}{prefix} \", end=\"\")\n            print_dependency_graph(container, dep, indent + 1)\n</code></pre>"},{"location":"en/guaids/visualization-print-dependency-graph/#symphra_container.visualization.print_dependency_graph--_1","title":"\u6253\u5370\u7279\u5b9a\u670d\u52a1\u7684\u4f9d\u8d56\u6811","text":"<p>print_dependency_graph(container, UserService)</p>"},{"location":"en/guaids/visualization-visualize-container/","title":"visualize_container","text":""},{"location":"en/guaids/visualization-visualize-container/#symphra_container.visualization.visualize_container","title":"<code>symphra_container.visualization.visualize_container(container, format='dot')</code>","text":"<p>\u751f\u6210\u5bb9\u5668\u670d\u52a1\u4f9d\u8d56\u5173\u7cfb\u7684\u53ef\u89c6\u5316\u56fe.</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>container</code> <code>Container</code> <p>\u5bb9\u5668\u5b9e\u4f8b</p> \u5fc5\u9700 <code>format</code> <code>str</code> <p>\u8f93\u51fa\u683c\u5f0f, \u652f\u6301 'dot' (Graphviz) \u6216 'mermaid'</p> <code>'dot'</code> <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>str</code> <p>\u53ef\u89c6\u5316\u56fe\u7684\u5b57\u7b26\u4e32\u8868\u793a</p> Example <p>dot = visualize_container(container, format='dot')</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/visualization.py</code> <pre><code>def visualize_container(container: Container, format: str = \"dot\") -&gt; str:\n    \"\"\"\u751f\u6210\u5bb9\u5668\u670d\u52a1\u4f9d\u8d56\u5173\u7cfb\u7684\u53ef\u89c6\u5316\u56fe.\n\n    Args:\n        container: \u5bb9\u5668\u5b9e\u4f8b\n        format: \u8f93\u51fa\u683c\u5f0f, \u652f\u6301 'dot' (Graphviz) \u6216 'mermaid'\n\n    Returns:\n        \u53ef\u89c6\u5316\u56fe\u7684\u5b57\u7b26\u4e32\u8868\u793a\n\n    Example:\n        &gt;&gt;&gt; dot = visualize_container(container, format='dot')\n        &gt;&gt;&gt; # \u4fdd\u5b58\u4e3a\u6587\u4ef6\u4f9b Graphviz \u6e32\u67d3\n        &gt;&gt;&gt; with open('container.dot', 'w') as f:\n        ...     f.write(dot)\n        &gt;&gt;&gt;\n        &gt;&gt;&gt; # \u6216\u8005\u4f7f\u7528 Mermaid\n        &gt;&gt;&gt; mermaid = visualize_container(container, format='mermaid')\n    \"\"\"\n    if format == \"dot\":\n        return _generate_dot(container)\n    if format == \"mermaid\":\n        return _generate_mermaid(container)\n    msg = f\"Unsupported format: {format}\"\n    raise ValueError(msg)\n</code></pre>"},{"location":"en/guaids/visualization-visualize-container/#symphra_container.visualization.visualize_container--graphviz","title":"\u4fdd\u5b58\u4e3a\u6587\u4ef6\u4f9b Graphviz \u6e32\u67d3","text":"<p>with open('container.dot', 'w') as f: ...     f.write(dot)</p>"},{"location":"en/guaids/visualization-visualize-container/#symphra_container.visualization.visualize_container--mermaid","title":"\u6216\u8005\u4f7f\u7528 Mermaid","text":"<p>mermaid = visualize_container(container, format='mermaid')</p>"},{"location":"en/integrations/django/","title":"Django Integration","text":""},{"location":"en/integrations/django/#install","title":"Install","text":"<pre><code>pip install symphra-container[django]\n</code></pre>"},{"location":"en/integrations/django/#settings","title":"Settings","text":"<pre><code># settings.py\nfrom symphra_container import Container, Lifetime\n\nCONTAINER = Container()\n\nclass Repo:\n    def get(self, uid: int) -&gt; dict: return {\"id\": uid}\n\nCONTAINER.register(Repo, lifetime=Lifetime.SINGLETON)\n</code></pre>"},{"location":"en/integrations/django/#usage-in-views","title":"Usage in views","text":"<pre><code># views.py\nfrom django.http import JsonResponse\nfrom django.conf import settings\n\ndef get_user(request, uid: int):\n    repo = settings.CONTAINER.resolve(Repo)\n    return JsonResponse(repo.get(uid))\n</code></pre>"},{"location":"en/integrations/fastapi/","title":"FastAPI Integration","text":""},{"location":"en/integrations/fastapi/#install","title":"Install","text":"<pre><code>pip install symphra-container[fastapi]\n</code></pre>"},{"location":"en/integrations/fastapi/#minimal-example","title":"Minimal Example","text":"<pre><code>from fastapi import FastAPI, Depends\nfrom symphra_container import Container, Lifetime\n\napp = FastAPI()\ncontainer = Container()\n\nclass Repo:\n    def get(self, uid: int) -&gt; dict: return {\"id\": uid}\n\ncontainer.register(Repo, lifetime=Lifetime.SINGLETON)\n\n# Integration helper (pseudo)\nfrom symphra_container.integrations.fastapi import inject\n\n@app.get(\"/users/{uid}\")\ndef get_user(uid: int, repo: Repo = Depends(inject(Repo))):\n    return repo.get(uid)\n</code></pre>"},{"location":"en/integrations/flask/","title":"Flask Integration","text":""},{"location":"en/integrations/flask/#install","title":"Install","text":"<pre><code>pip install symphra-container[flask]\n</code></pre>"},{"location":"en/integrations/flask/#minimal-example","title":"Minimal Example","text":"<pre><code>from flask import Flask\nfrom symphra_container import Container, Lifetime\n\napp = Flask(__name__)\ncontainer = Container()\n\nclass Repo:\n    def get(self, uid: int) -&gt; dict: return {\"id\": uid}\n\ncontainer.register(Repo, lifetime=Lifetime.SINGLETON)\n\n@app.route(\"/users/&lt;int:uid&gt;\")\ndef get_user(uid: int):\n    repo = container.resolve(Repo)\n    return repo.get(uid)\n</code></pre>"},{"location":"zh/INDEX/","title":"\ud83d\udcda Symphra Container \u6587\u6863\u7d22\u5f15# Symphra Container - \u5b8c\u6574\u6587\u6863\u7d22\u5f15","text":""},{"location":"zh/INDEX/#10-187-kb","title":"\ud83d\ude80 \u5feb\u901f\u5f00\u59cb## \ud83d\udcda \u6240\u6709\u6587\u6863\u603b\u89c8 (10 \u4efd\uff0c187 KB)","text":"<p>| \u6587\u6863 | \u7528\u9014 | \u63a8\u8350\u9605\u8bfb |### \u6838\u5fc3\u89c4\u5212\u6587\u6863</p> <p>|------|------|---------|</p> <p>| README.md | \u9879\u76ee\u6982\u8ff0\u548c\u5feb\u901f\u5165\u95e8 | \u2b50\u2b50\u2b50 \u5fc5\u8bfb || # | \u6587\u4ef6\u540d | \u5927\u5c0f | \u884c\u6570 | \u91cd\u8981\u6027 | \u9996\u6b21\u67e5\u770b |</p> <p>| QUICK_START_UV.md | \u4f7f\u7528 uv \u5feb\u901f\u542f\u52a8 | \u2b50\u2b50\u2b50 \u63a8\u8350 ||---|--------|------|------|--------|---------|</p> <p>| DEVELOPMENT_SETUP.md | \u5f00\u53d1\u73af\u5883\u914d\u7f6e | \u2b50\u2b50 \u5f00\u53d1\u8005\u5fc5\u8bfb || 1 | QUICK_REFERENCE.md | 11 KB | 400+ | \u2b50\u2b50\u2b50\u2b50\u2b50 | \u7b2c 1 \u4e2a |</p> <p>| 2 | INTEGRATED_ROADMAP.md | 27 KB | 900+ | \u2b50\u2b50\u2b50\u2b50\u2b50 | \u7b2c 2 \u4e2a |</p>"},{"location":"zh/INDEX/#3-api_designmd-24-kb-800-3","title":"\ud83d\udcd6 \u6838\u5fc3\u6587\u6863| 3 | API_DESIGN.md | 24 KB | 800+ | \u2b50\u2b50\u2b50\u2b50\u2b50 | \u7b2c 3 \u4e2a |","text":"<p>| 4 | TECHNICAL_SPEC.md | 17 KB | 600+ | \u2b50\u2b50\u2b50\u2b50 | \u7b2c 4 \u4e2a |</p> <p>| \u6587\u6863 | \u7528\u9014 | \u63a8\u8350\u9605\u8bfb || 5 | OPTIMIZATION_ANALYSIS.md | 30 KB | 1000+ | \u2b50\u2b50\u2b50 | \u7b2c 5 \u4e2a |</p> <p>|------|------|---------|| 6 | OPTIMIZATION_SUMMARY.md | 7.5 KB | 300+ | \u2b50\u2b50\u2b50 | \u53c2\u8003 |</p> <p>| API_DESIGN.md | \u5b8c\u6574\u7684 API \u8bbe\u8ba1\u89c4\u8303 | \u2b50\u2b50\u2b50 \u6838\u5fc3 || 7 | IMPLEMENTATION_CHECKLIST.md | 16 KB | 500+ | \u2b50\u2b50\u2b50 | \u5b9e\u65bd\u524d |</p> <p>| TECHNICAL_SPEC.md | \u6280\u672f\u89c4\u8303\u548c\u67b6\u6784\u8bbe\u8ba1 | \u2b50\u2b50\u2b50 \u6838\u5fc3 || 8 | PROJECT_SUMMARY.md | 11 KB | 400+ | \u2b50\u2b50\u2b50 | \u603b\u89c8 |</p> <p>| PHASE4_API_REFERENCE.md | Phase 4 \u65b0\u589e API \u5feb\u901f\u53c2\u8003 | \u2b50\u2b50\u2b50 \u63a8\u8350 || 9 | PROJECT_STATUS.txt | 12 KB | 300+ | \u2b50\u2b50 | \u5feb\u901f\u67e5\u770b |</p> <p>| 10 | STARTUP_GUIDE.sh | 23 KB | 400+ | \u2b50\u2b50\u2b50\u2b50\u2b50 | \u521d\u59cb\u5316 |</p>"},{"location":"zh/INDEX/#_1","title":"\ud83d\udcca \u9879\u76ee\u72b6\u6001","text":"<p>| \u6587\u6863 | \u7528\u9014 | \u63a8\u8350\u9605\u8bfb |</p> <p>|------|------|---------|## \ud83c\udfaf \u6309\u4f7f\u7528\u573a\u666f\u63a8\u8350</p> <p>| PROJECT_STATUS_FINAL.md | \u6700\u65b0\u9879\u76ee\u72b6\u6001\u603b\u89c8 | \u2b50\u2b50\u2b50 \u6700\u65b0 |</p> <p>| PHASE4_SUMMARY.md | Phase 4 \u5b8c\u6210\u603b\u7ed3 | \u2b50\u2b50\u2b50 \u6700\u65b0 |### \u573a\u666f 1: \u65b0\u624b\u5feb\u901f\u4e0a\u624b (20 \u5206\u949f)</p> <p>| PHASE4_COMPLETION_REPORT.md | Phase 4 \u8be6\u7ec6\u62a5\u544a | \u2b50\u2b50 \u6df1\u5165\u4e86\u89e3 |```</p> <ol> <li>\u8bfb QUICK_REFERENCE.md \u7684\"\u5feb\u901f\u542f\u52a8\"\u90e8\u5206 (5 \u5206\u949f)</li> </ol>"},{"location":"zh/INDEX/#2-project_statustxt-5","title":"\ud83d\udcdd \u9636\u6bb5\u62a5\u544a2. \u8bfb PROJECT_STATUS.txt \u4e86\u89e3\u9879\u76ee\u89c4\u6a21 (5 \u5206\u949f)","text":"<ol> <li>\u8bfb INTEGRATED_ROADMAP.md \u7684\"5 \u9636\u6bb5\u5b9e\u65bd\u8ba1\u5212\"\u7ae0\u8282 (10 \u5206\u949f)</li> </ol> <p>| \u6587\u6863 | \u9636\u6bb5 | \u72b6\u6001 |```</p> <p>|------|------|------|\u2192 \u7acb\u5373\u542f\u52a8: bash STARTUP_GUIDE.sh</p> <p>| PHASE_1_COMPLETION_REPORT.md | Phase 1: \u57fa\u7840\u529f\u80fd | \u2705 \u5b8c\u6210 |</p> <p>| PHASE2_SUMMARY.md | Phase 2: \u9ad8\u7ea7\u529f\u80fd | \u2705 \u5b8c\u6210 |---</p> <p>| PHASE3_SUMMARY.md | Phase 3: \u4ee3\u7801\u4f18\u5316 | \u2705 \u5b8c\u6210 |</p> <p>| PHASE4_SUMMARY.md | Phase 4: API \u589e\u5f3a | \u2705 \u5b8c\u6210 |### \u573a\u666f 2: \u6df1\u5165\u7406\u89e3\u8bbe\u8ba1 (1-2 \u5c0f\u65f6)</p> <pre><code>## \ud83d\udd27 \u5f00\u53d1\u4e0e\u89c4\u52121. TECHNICAL_SPEC.md - \u6280\u672f\u89c4\u8303\u548c\u8bbe\u8ba1\u51b3\u7b56 (30 \u5206\u949f)\n\n2. API_DESIGN.md - \u5b8c\u6574 API \u8bbe\u8ba1 (30 \u5206\u949f)\n\n| \u6587\u6863 | \u7528\u9014 | \u63a8\u8350\u9605\u8bfb |3. OPTIMIZATION_ANALYSIS.md - \u4f18\u5316\u8be6\u89e3 (\u9009\u8bfb 30 \u5206\u949f)\n\n|------|------|---------|```\n\n| **INTEGRATED_ROADMAP.md** | 5 \u9636\u6bb5\u5b8c\u6574\u5b9e\u65bd\u8ba1\u5212 | \u2b50\u2b50 \u4e86\u89e3\u8def\u7ebf\u56fe |\u2192 **\u51c6\u5907\u5f00\u53d1**: \u7406\u89e3\u6838\u5fc3\u6982\u5ff5\n\n| **IMPLEMENTATION_CHECKLIST.md** | \u5b9e\u65bd\u524d\u68c0\u67e5\u6e05\u5355 | \u2b50\u2b50 \u5b9e\u65bd\u53c2\u8003 |\n\n| **MISSING_FEATURES_ANALYSIS.md** | \u7f3a\u5931\u529f\u80fd\u5206\u6790 | \u2b50 \u529f\u80fd\u89c4\u5212 |---\n\n\n\n## \ud83d\udcc8 \u4f18\u5316\u4e0e\u8d28\u91cf### \u573a\u666f 3: \u6309\u9636\u6bb5\u5b9e\u65bd (\u6bcf\u9636\u6bb5 6-8 \u5929)\n</code></pre> <p>| \u6587\u6863 | \u7528\u9014 | \u63a8\u8350\u9605\u8bfb |\u9636\u6bb5 1-5: \u53c2\u8003 INTEGRATED_ROADMAP.md \u7684\u5bf9\u5e94\u7ae0\u8282</p> <p>|------|------|---------|\u65e5\u5e38\u5f00\u53d1: \u67e5\u9605 QUICK_REFERENCE.md \u5feb\u901f\u53c2\u8003\u5361</p> <p>| CODE_QUALITY_REPORT.md | \u4ee3\u7801\u8d28\u91cf\u7efc\u5408\u62a5\u544a | \u2b50\u2b50 \u8d28\u91cf\u53c2\u8003 |\u9047\u5230\u95ee\u9898: \u67e5\u627e\u5bf9\u5e94\u7684\u6587\u6863\u7ae0\u8282</p> <p>| OPTIMIZATION_ANALYSIS.md | 28 \u9879\u4f18\u5316\u6df1\u5ea6\u5206\u6790 | \u2b50\u2b50 \u4f18\u5316\u53c2\u8003 |```</p> <p>| OPTIMIZATION_SUMMARY.md | \u4f18\u5316\u5feb\u901f\u53c2\u8003 | \u2b50 \u5feb\u901f\u67e5\u9605 |\u2192 \u6301\u7eed\u5f00\u53d1: 30-39 \u5929\u5b8c\u6210</p>"},{"location":"zh/INDEX/#-","title":"\ud83c\udfaf \u5feb\u901f\u53c2\u8003---","text":"<p>| \u6587\u6863 | \u7528\u9014 | \u63a8\u8350\u9605\u8bfb |### \u573a\u666f 4: \u5feb\u901f\u67e5\u9605\u67d0\u4e2a\u6982\u5ff5</p> <p>|------|------|---------|```</p> <p>| QUICK_REFERENCE.md | API \u5feb\u901f\u53c2\u8003 | \u2b50\u2b50\u2b50 \u5e38\u7528 |\"\u6211\u60f3\u67e5 Optional \u4f9d\u8d56\u5982\u4f55\u5904\u7406\" </p> <p>\u2192 API_DESIGN.md \u641c\u7d22 \"Optional\"</p>"},{"location":"zh/INDEX/#_2","title":"\ud83d\udee0\ufe0f \u5de5\u5177\u4e0e\u811a\u672c","text":"<p>\"\u6211\u60f3\u770b API \u7edf\u4e00\u7684\u5b9e\u73b0\u7ec6\u8282\"</p> <p>| \u6587\u4ef6 | \u7528\u9014 |  \u2192 OPTIMIZATION_ANALYSIS.md \u641c\u7d22 \"API \u7edf\u4e00\"</p> <p>|------|------|  </p> <p>| Makefile | \u6784\u5efa\u548c\u6d4b\u8bd5\u547d\u4ee4 |\"\u6211\u60f3\u77e5\u9053 Lazy Proxy \u600e\u4e48\u5de5\u4f5c\"</p> <p>| STARTUP_GUIDE.sh | \u81ea\u52a8\u5316\u542f\u52a8\u811a\u672c |  \u2192 TECHNICAL_SPEC.md \u641c\u7d22 \"Lazy Proxy\"</p> <p>| pyproject.toml | Python \u9879\u76ee\u914d\u7f6e |  </p> <p>| mkdocs.yml | MkDocs \u6587\u6863\u914d\u7f6e |\"\u6211\u9700\u8981\u4e86\u89e3\u62e6\u622a\u5668\u7cfb\u7edf\"</p> <p>\u2192 API_DESIGN.md \u641c\u7d22 \"\u62e6\u622a\u5668\"</p>"},{"location":"zh/INDEX/#_3","title":"\ud83d\udce6 \u76ee\u5f55\u7ed3\u6784```","text":"<p>\u2192 \u5feb\u901f\u627e\u5230\u7b54\u6848: \u4f7f\u7528 Ctrl+F \u641c\u7d22</p> <p><pre><code>/opt/data/www/yfb/packages/symphra-container/---\n\n\u251c\u2500\u2500 src/symphra_container/     # \u6e90\u4ee3\u7801\n\n\u251c\u2500\u2500 tests/                     # \u6d4b\u8bd5\u4ee3\u7801## \ud83d\udcd6 \u6587\u6863\u8be6\u7ec6\u8bf4\u660e\n\n\u251c\u2500\u2500 docs/                      # \u6587\u6863\u76ee\u5f55\n\n\u2502   \u251c\u2500\u2500 zh/                    # \u4e2d\u6587\u6587\u6863### 1. QUICK_REFERENCE.md (\u5fc5\u8bfb!)\n\n\u2502   \u2514\u2500\u2500 archive/               # \u5f52\u6863\u6587\u6863**\u7528\u9014**: \u5feb\u901f\u53c2\u8003\u5361\uff0c\u6db5\u76d6\u6240\u6709\u8981\u70b9\n\n\u251c\u2500\u2500 htmlcov/                   # \u8986\u76d6\u7387\u62a5\u544a**\u5305\u542b**:\n\n\u2514\u2500\u2500 *.md                       # \u6839\u76ee\u5f55\u6587\u6863- \u2705 5 \u4efd\u6587\u6863\u603b\u89c8\n\n```- \u2705 \u6838\u5fc3\u51b3\u7b56\u4e00\u89c8\u8868\n\n- \u2705 \u5feb\u901f\u542f\u52a8 3 \u6b65\n\n## \ud83d\udd0d \u6309\u9700\u6c42\u67e5\u627e\u6587\u6863- \u2705 \u5173\u952e\u6982\u5ff5\u901f\u67e5\n\n- \u2705 \u751f\u547d\u5468\u671f\u4e00\u89c8\n\n### \u6211\u60f3\u4e86\u89e3\u9879\u76ee\u6982\u51b5- \u2705 \u5faa\u73af\u4f9d\u8d56\u5904\u7406\n\n\ud83d\udc49 \u9605\u8bfb\u987a\u5e8f\uff1a- \u2705 \u6d4b\u8bd5\u6a21\u677f\n\n1. **README.md** - \u9879\u76ee\u6982\u8ff0- \u2705 \u5e38\u89c1\u95ee\u9898\n\n2. **PROJECT_STATUS_FINAL.md** - \u9879\u76ee\u72b6\u6001\n\n3. **PHASE4_SUMMARY.md** - \u6700\u65b0\u8fdb\u5c55**\u4f55\u65f6\u67e5\u770b**: \u7b2c\u4e00\u6b21\u63a5\u89e6\u9879\u76ee\uff0c\u65e5\u5e38\u5f00\u53d1\u53c2\u8003\n\n\n\n### \u6211\u60f3\u5f00\u59cb\u4f7f\u7528---\n\n\ud83d\udc49 \u9605\u8bfb\u987a\u5e8f\uff1a\n\n1. **QUICK_START_UV.md** - \u5feb\u901f\u5f00\u59cb### 2. INTEGRATED_ROADMAP.md (\u5fc5\u8bfb!)\n\n2. **PHASE4_API_REFERENCE.md** - API \u53c2\u8003**\u7528\u9014**: \u5b8c\u6574\u7684 5 \u9636\u6bb5\u5b9e\u65bd\u8ba1\u5212\n\n3. **QUICK_REFERENCE.md** - \u5feb\u901f\u67e5\u9605**\u5305\u542b**:\n\n- \u2705 \u9636\u6bb5 1-5 \u7684\u8be6\u7ec6\u5206\u89e3 (\u5171 8-9 \u4e2a\u5b50\u4efb\u52a1)\n\n### \u6211\u60f3\u53c2\u4e0e\u5f00\u53d1- \u2705 \u6bcf\u4e2a\u5b50\u4efb\u52a1\u7684\u8be6\u7ec6\u8bf4\u660e\n\n\ud83d\udc49 \u9605\u8bfb\u987a\u5e8f\uff1a- \u2705 \u6bcf\u65e5\u8fdb\u5ea6\u89c4\u5212 (\u7b2c 1-8 \u5929)\n\n1. **DEVELOPMENT_SETUP.md** - \u73af\u5883\u914d\u7f6e- \u2705 \u5173\u952e\u4ee3\u7801\u793a\u4f8b\n\n2. **API_DESIGN.md** - API \u8bbe\u8ba1- \u2705 \u5b8c\u6210\u6807\u51c6\u68c0\u67e5\u6e05\u5355\n\n3. **TECHNICAL_SPEC.md** - \u6280\u672f\u89c4\u8303\n\n4. **CODE_QUALITY_REPORT.md** - \u8d28\u91cf\u6807\u51c6**\u4f55\u65f6\u67e5\u770b**: \u5b9e\u65bd\u4ee3\u7801\u65f6\u7684\u8be6\u7ec6\u6307\u5357\uff0c\u5fc5\u987b\u9010\u6b65\u53c2\u8003\n\n\n\n### \u6211\u60f3\u4e86\u89e3\u5b9e\u73b0\u7ec6\u8282---\n\n\ud83d\udc49 \u9605\u8bfb\u987a\u5e8f\uff1a\n\n1. **TECHNICAL_SPEC.md** - \u6280\u672f\u89c4\u8303### 3. API_DESIGN.md\n\n2. **PHASE4_COMPLETION_REPORT.md** - \u8be6\u7ec6\u62a5\u544a**\u7528\u9014**: \u5b8c\u6574\u7684 API \u89c4\u8303\n\n3. **OPTIMIZATION_ANALYSIS.md** - \u4f18\u5316\u5206\u6790**\u5305\u542b**:\n\n- \u2705 \u7c7b\u578b\u5b9a\u4e49\u8be6\u89e3\n\n### \u6211\u60f3\u4e86\u89e3\u9879\u76ee\u5386\u53f2- \u2705 \u6240\u6709 50+ \u4e2a\u65b9\u6cd5\u7684\u5b8c\u6574\u6587\u6863\n\n\ud83d\udc49 \u9605\u8bfb\u987a\u5e8f\uff1a- \u2705 \u5b9e\u9645\u4ee3\u7801\u793a\u4f8b\n\n1. **PHASE_1_COMPLETION_REPORT.md** - Phase 1- \u2705 \u88c5\u9970\u5668\u4f7f\u7528\u65b9\u6cd5\n\n2. **PHASE2_SUMMARY.md** - Phase 2- \u2705 \u6846\u67b6\u96c6\u6210\u793a\u4f8b (FastAPI, Flask)\n\n3. **PHASE3_SUMMARY.md** - Phase 3- \u2705 \u5b8c\u6574\u4f7f\u7528\u793a\u4f8b\n\n4. **PHASE4_SUMMARY.md** - Phase 4\n\n5. **docs/archive/** - \u5386\u53f2\u6587\u6863**\u4f55\u65f6\u67e5\u770b**: \u8bbe\u8ba1 API \u65f6\uff0c\u5b66\u4e60\u4f7f\u7528\u65b9\u6cd5\u65f6\n\n\n\n## \ud83d\udccc \u91cd\u8981\u63d0\u793a---\n\n\n\n- \u2b50\u2b50\u2b50 **\u5fc5\u8bfb** - \u5f3a\u70c8\u63a8\u8350\u9605\u8bfb### 4. TECHNICAL_SPEC.md\n\n- \u2b50\u2b50 **\u63a8\u8350** - \u5efa\u8bae\u9605\u8bfb**\u7528\u9014**: \u6280\u672f\u89c4\u8303\u548c\u67b6\u6784\u8bbe\u8ba1\n\n- \u2b50 **\u53ef\u9009** - \u6309\u9700\u9605\u8bfb**\u5305\u542b**:\n\n- \u2705 \u6240\u6709 10 \u9879\u6838\u5fc3\u8bbe\u8ba1\u51b3\u7b56\n\n## \ud83c\udd95 \u6700\u65b0\u66f4\u65b0- \u2705 \u7c7b\u578b\u7cfb\u7edf\u8be6\u89e3\n\n- \u2705 \u5faa\u73af\u4f9d\u8d56 3 \u79cd\u89e3\u51b3\u65b9\u6848\n\n**2025-10-26**:- \u2705 \u751f\u547d\u5468\u671f\u8be6\u7ec6\u7ba1\u7406\n\n- \u2705 Phase 4 \u5b8c\u6210\uff0c\u65b0\u589e 9 \u4e2a\u6838\u5fc3 API- \u2705 \u4f9d\u8d56\u6ce8\u5165 3 \u79cd\u6a21\u5f0f\n\n- \u2705 \u6d4b\u8bd5\u8986\u76d6\u7387 82.16%- \u2705 \u9519\u8bef\u5904\u7406\u89c4\u8303\n\n- \u2705 \u4ee3\u7801\u8d28\u91cf 85+/100- \u2705 \u6027\u80fd\u76ee\u6807\n\n- \u2705 291 \u4e2a\u6d4b\u8bd5\u5168\u90e8\u901a\u8fc7- \u2705 \u9879\u76ee\u7ed3\u6784\u89c4\u5212\n\n- \u2705 \u6e05\u7406\u6839\u76ee\u5f55\uff0c\u5f52\u6863\u8fc7\u65f6\u6587\u6863\n\n**\u4f55\u65f6\u67e5\u770b**: \u7406\u89e3\u8bbe\u8ba1\u539f\u5219\uff0c\u638c\u63e1\u6280\u672f\u7ec6\u8282\n\n## \ud83d\udcde \u8054\u7cfb\u65b9\u5f0f\n\n---\n\n- **\u9879\u76ee\u8def\u5f84**: `/opt/data/www/yfb/packages/symphra-container`\n\n- **\u8bb8\u53ef\u534f\u8bae**: MIT### 5. OPTIMIZATION_ANALYSIS.md\n\n- **\u7ef4\u62a4\u72b6\u6001**: \ud83d\udfe2 \u6d3b\u8dc3\u5f00\u53d1\u4e2d**\u7528\u9014**: 28 \u9879\u4f18\u5316\u7684\u6df1\u5ea6\u5206\u6790\n\n**\u5305\u542b**:\n\n---- \u2705 28 \u9879\u4f18\u5316\u7684\u5b8c\u6574\u5206\u6790\n\n- \u2705 \u6bcf\u9879\u4f18\u5316\u7684\u4ee3\u7801\u5b9e\u73b0\u65b9\u6848\n\n*\u66f4\u65b0\u65f6\u95f4: 2025-10-26*- \u2705 \u6f5c\u5728\u7684\u6280\u672f\u6311\u6218\u548c\u89e3\u51b3\u65b9\u6848\n\n- \u2705 \u4f18\u5316\u7684\u4f18\u5148\u7ea7\u548c\u65f6\u95f4\u8868\n- \u2705 \u8be6\u7ec6\u7684\u4ee3\u7801\u793a\u4f8b\n\n**\u4f55\u65f6\u67e5\u770b**: \u7406\u89e3\u4e3a\u4ec0\u4e48\u9700\u8981\u67d0\u4e2a\u4f18\u5316\uff0c\u5982\u4f55\u5b9e\u73b0\n\n---\n\n### 6. OPTIMIZATION_SUMMARY.md\n**\u7528\u9014**: \u4f18\u5316\u7684\u5feb\u901f\u53c2\u8003\n**\u5305\u542b**:\n- \u2705 \u4f18\u5316\u77e9\u9635 (\u5fc5\u9700/\u63a8\u8350/\u53ef\u9009)\n- \u2705 \u4e24\u79cd\u5b9e\u65bd\u8def\u7ebf\u5bf9\u6bd4\n- \u2705 \u5173\u952e\u4f18\u5316\u7684\u4ee3\u7801\u901f\u67e5\n- \u2705 \u5feb\u901f\u51b3\u7b56\u8868\n\n**\u4f55\u65f6\u67e5\u770b**: \u5feb\u901f\u4e86\u89e3\u4f18\u5316\u7684\u5168\u8c8c\n\n---\n\n### 7. IMPLEMENTATION_CHECKLIST.md\n**\u7528\u9014**: \u5b9e\u65bd\u524d\u68c0\u67e5\u548c\u542f\u52a8\u6307\u5357\n**\u5305\u542b**:\n- \u2705 \u6700\u7ec8\u786e\u8ba4\u6e05\u5355 (13 \u9879)\n- \u2705 \u73af\u5883\u51c6\u5907\u6b65\u9aa4 (4 \u6b65)\n- \u2705 \u9879\u76ee\u914d\u7f6e\u8be6\u89e3\n- \u2705 \u7b2c\u4e00\u6b65\u4ee3\u7801\u6587\u4ef6\u521b\u5efa\n- \u2705 \u9a8c\u8bc1\u73af\u5883\u811a\u672c\n- \u2705 \u9636\u6bb5 1 \u5b9e\u65bd\u8ba1\u5212\u8be6\u89e3\n- \u2705 \u9636\u6bb5 1 \u6bcf\u65e5\u8fdb\u5ea6\u89c4\u5212 (\u7b2c 1-8 \u5929)\n- \u2705 TDD \u5f00\u53d1\u6d41\u7a0b\n\n**\u4f55\u65f6\u67e5\u770b**: \u9879\u76ee\u542f\u52a8\u524d\u5fc5\u8bfb\n\n---\n\n### 8. PROJECT_SUMMARY.md\n**\u7528\u9014**: \u9879\u76ee\u6982\u89c8\u548c\u5bfc\u822a\n**\u5305\u542b**:\n- \u2705 \u9879\u76ee\u6982\u8ff0\n- \u2705 \u6587\u6863\u5bfc\u822a\u5730\u56fe\n- \u2705 \u6838\u5fc3\u8bbe\u8ba1\u51b3\u7b56\n- \u2705 5 \u9636\u6bb5\u5b9e\u65bd\u8ba1\u5212\u6982\u89c8\n- \u2705 \u5de5\u4f5c\u91cf\u5206\u5e03\n- \u2705 \u6210\u529f\u6807\u51c6\n- \u2705 \u6309\u573a\u666f\u63a8\u8350\u6587\u6863\n- \u2705 \u6309\u5f00\u53d1\u9636\u6bb5\u63a8\u8350\u6587\u6863\n\n**\u4f55\u65f6\u67e5\u770b**: \u9879\u76ee\u603b\u89c8\uff0c\u5feb\u901f\u5b9a\u4f4d\u9700\u8981\u7684\u6587\u6863\n\n---\n\n### 9. PROJECT_STATUS.txt\n**\u7528\u9014**: \u542f\u52a8\u72b6\u6001\u62a5\u544a\n**\u5305\u542b**:\n- \u2705 \u9879\u76ee\u4fe1\u606f\u6982\u89c8\n- \u2705 \u6838\u5fc3\u8bbe\u8ba1\u51b3\u7b56\n- \u2705 \u6587\u6863\u603b\u89c8\n- \u2705 \u9879\u76ee\u89c4\u6a21\n- \u2705 5 \u9636\u6bb5\u8ba1\u5212\n- \u2705 \u6587\u6863\u4f7f\u7528\u6307\u5357\n- \u2705 \u7acb\u5373\u5f00\u59cb 3 \u6b65\n- \u2705 \u6210\u529f\u6807\u51c6\n- \u2705 \u9879\u76ee\u72b6\u6001\n\n**\u4f55\u65f6\u67e5\u770b**: \u5feb\u901f\u4e86\u89e3\u9879\u76ee\u72b6\u6001\n\n---\n\n### 10. STARTUP_GUIDE.sh (\u53ef\u6267\u884c\u811a\u672c)\n**\u7528\u9014**: \u81ea\u52a8\u521d\u59cb\u5316\u9879\u76ee\n**\u5305\u542b**:\n- \u2705 \u81ea\u52a8\u521b\u5efa\u76ee\u5f55\u7ed3\u6784\n- \u2705 \u81ea\u52a8\u521b\u5efa\u6838\u5fc3\u6587\u4ef6 (types.py, container.py, exceptions.py)\n- \u2705 \u81ea\u52a8\u521b\u5efa\u6d4b\u8bd5\u6587\u4ef6\n- \u2705 \u81ea\u52a8\u521b\u5efa pyproject.toml\n- \u2705 \u81ea\u52a8\u5b89\u88c5\u4f9d\u8d56\n- \u2705 \u81ea\u52a8\u8fd0\u884c\u521d\u59cb\u6d4b\u8bd5\n\n**\u5982\u4f55\u4f7f\u7528**: bash STARTUP_GUIDE.sh\n\n---\n\n## \ud83d\uddfa\ufe0f \u6587\u6863\u5bfc\u822a\u5730\u56fe\n</code></pre>                     \u5f00\u59cb\u9879\u76ee                         \u2193         \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510         \u2193               \u2193               \u2193    (10 \u5206\u949f)       (2 \u5c0f\u65f6)        (\u5b9e\u65bd\u4e2d)         \u2193               \u2193               \u2193   QUICK_REF      TECHNICAL_SPEC    INTEGRATED_   PROJECT_ST       API_DESIGN       ROADMAP   STARTUP_GU                         (\u5173\u952e!)</p> <pre><code>    \u2193               \u2193               \u2193\n</code></pre> <p>\u7406\u89e3\u5168\u8c8c        \u638c\u63e1\u6280\u672f          \u6309\u6b65\u5b9e\u65bd         \u2193               \u2193               \u2193       \u542f\u52a8\u9879\u76ee          \u6df1\u5316\u7406\u89e3        \u9010\u6b65\u5f00\u53d1         \u2193               \u2193               \u2193   bash STARTUP_    \u8bbe\u8ba1 API         \u9636\u6bb5 1-5   GUIDE.sh        \u4f18\u5316\u8bbe\u8ba1          \u5b8c\u6210\u68c0\u67e5 ```</p>"},{"location":"zh/INDEX/#_4","title":"\u26a1 \u5feb\u901f\u67e5\u8be2\u8868","text":"\u6211\u9700\u8981... \u67e5\u770b\u8fd9\u4e2a\u6587\u4ef6 \u4f4d\u7f6e \u5feb\u901f\u4e0a\u624b QUICK_REFERENCE.md \"\u5feb\u901f\u542f\u52a8\" \u7ae0\u8282 \u5b9e\u65bd\u6b65\u9aa4 INTEGRATED_ROADMAP.md \"5 \u9636\u6bb5\u5b9e\u65bd\u8ba1\u5212\" API \u89c4\u8303 API_DESIGN.md \u5b8c\u6574\u5185\u5bb9 \u6280\u672f\u7ec6\u8282 TECHNICAL_SPEC.md \u5bf9\u5e94\u7ae0\u8282 \u4f18\u5316\u8bf4\u660e OPTIMIZATION_ANALYSIS.md \u5bf9\u5e94\u4f18\u5316\u7f16\u53f7 \u751f\u547d\u5468\u671f API_DESIGN.md or QUICK_REFERENCE.md \"\u751f\u547d\u5468\u671f\u4e00\u89c8\" \u5faa\u73af\u4f9d\u8d56 TECHNICAL_SPEC.md or API_DESIGN.md \"\u5faa\u73af\u4f9d\u8d56\u5904\u7406\" \u542f\u52a8\u9879\u76ee STARTUP_GUIDE.sh \u76f4\u63a5\u8fd0\u884c \u73af\u5883\u68c0\u67e5 IMPLEMENTATION_CHECKLIST.md \"\u542f\u52a8\u6307\u5357\" \u9879\u76ee\u6982\u89c8 PROJECT_SUMMARY.md or PROJECT_STATUS.txt \u5168\u6587 \u88c5\u9970\u5668\u7528\u6cd5 API_DESIGN.md \"\u88c5\u9970\u5668\u4f7f\u7528\" \u6846\u67b6\u96c6\u6210 API_DESIGN.md \"FastAPI/Flask \u96c6\u6210\" \u6d4b\u8bd5\u6a21\u677f QUICK_REFERENCE.md \"\u6d4b\u8bd5\u6a21\u677f\" \u5e38\u89c1\u95ee\u9898 QUICK_REFERENCE.md \"\u5e38\u89c1\u95ee\u9898\" --- ## \ud83d\udcca \u6587\u6863\u5927\u5c0f\u548c\u9605\u8bfb\u65f6\u95f4 \u6587\u4ef6 \u5927\u5c0f \u9605\u8bfb\u65f6\u95f4 ----- ------ --------- QUICK_REFERENCE.md 11 KB 15 \u5206\u949f PROJECT_STATUS.txt 12 KB 10 \u5206\u949f OPTIMIZATION_SUMMARY.md 7.5 KB 15 \u5206\u949f PROJECT_SUMMARY.md 11 KB 20 \u5206\u949f IMPLEMENTATION_CHECKLIST.md 16 KB 30 \u5206\u949f API_DESIGN.md 24 KB 1 \u5c0f\u65f6 TECHNICAL_SPEC.md 17 KB 1 \u5c0f\u65f6 OPTIMIZATION_ANALYSIS.md 30 KB 1.5 \u5c0f\u65f6 INTEGRATED_ROADMAP.md 27 KB 1 \u5c0f\u65f6 STARTUP_GUIDE.sh 23 KB 10 \u5206\u949f (\u6267\u884c) \u603b\u8ba1: ~188 KB\uff0c\u7ea6 5-6 \u5c0f\u65f6\u9605\u8bfb\uff0c\u975e\u5e38\u8be6\u5c3d\uff01 --- ## \ud83d\ude80 \u5efa\u8bae\u7684\u9605\u8bfb\u987a\u5e8f ### \u5982\u679c\u60a8\u6709 20 \u5206\u949f: 1. QUICK_REFERENCE.md (\u5168\u90e8) 2. PROJECT_STATUS.txt (\u5168\u90e8) ### \u5982\u679c\u60a8\u6709 1 \u5c0f\u65f6: 1. QUICK_REFERENCE.md (\u5168\u90e8) 2. INTEGRATED_ROADMAP.md (\u524d 30%) 3. PROJECT_STATUS.txt (\u5168\u90e8) ### \u5982\u679c\u60a8\u6709 3 \u5c0f\u65f6: 1. QUICK_REFERENCE.md (\u5168\u90e8) - 15 \u5206\u949f 2. TECHNICAL_SPEC.md (\u5168\u90e8) - 1 \u5c0f\u65f6 3. API_DESIGN.md (\u5168\u90e8) - 1 \u5c0f\u65f6 4. PROJECT_SUMMARY.md (\u5168\u90e8) - 15 \u5206\u949f ### \u5982\u679c\u60a8\u6709 1 \u5929 (8 \u5c0f\u65f6): 1. QUICK_REFERENCE.md - 15 \u5206\u949f 2. TECHNICAL_SPEC.md - 1 \u5c0f\u65f6 3. API_DESIGN.md - 1 \u5c0f\u65f6 4. OPTIMIZATION_ANALYSIS.md - 1.5 \u5c0f\u65f6 5. INTEGRATED_ROADMAP.md - 1 \u5c0f\u65f6 6. IMPLEMENTATION_CHECKLIST.md - 30 \u5206\u949f 7. PROJECT_SUMMARY.md + PROJECT_STATUS.txt - 30 \u5206\u949f 8. STARTUP_GUIDE.sh (\u6267\u884c) - 10 \u5206\u949f --- ## \ud83c\udf93 \u6838\u5fc3\u6982\u5ff5\u5b66\u4e60\u8def\u5f84 ### \u8def\u5f84 1: \u5feb\u901f\u4e86\u89e3 (30 \u5206\u949f) ``` QUICK_REFERENCE.md \u2192 PROJECT_STATUS.txt \u2192 \u5b8c\u6210\uff01 ``` ### \u8def\u5f84 2: \u5168\u9762\u7406\u89e3 (3 \u5c0f\u65f6) ``` QUICK_REFERENCE.md \u2193 (\u7406\u89e3\u57fa\u7840) TECHNICAL_SPEC.md \u2193 (\u7406\u89e3 API) API_DESIGN.md \u2193 (\u7406\u89e3\u4f18\u5316) OPTIMIZATION_SUMMARY.md \u2193 (\u51c6\u5907\u5b9e\u65bd) INTEGRATED_ROADMAP.md ``` ### \u8def\u5f84 3: \u6df1\u5ea6\u638c\u63e1 (8 \u5c0f\u65f6+) ``` \u5b8c\u6574\u9605\u8bfb\u6240\u6709\u6587\u6863\uff0c\u6df1\u5165\u7406\u89e3\u6bcf\u4e2a\u7ec6\u8282 ```"},{"location":"zh/INDEX/#_5","title":"\ud83d\udcbe \u6587\u4ef6\u6e05\u5355","text":""},{"location":"zh/INDEX/#8","title":"\u6587\u6863\u6587\u4ef6 (8 \u4e2a)","text":"<ul> <li> API_DESIGN.md</li> <li> TECHNICAL_SPEC.md</li> <li> OPTIMIZATION_ANALYSIS.md</li> <li> OPTIMIZATION_SUMMARY.md</li> <li> INTEGRATED_ROADMAP.md</li> <li> IMPLEMENTATION_CHECKLIST.md</li> <li> QUICK_REFERENCE.md</li> <li> PROJECT_SUMMARY.md</li> </ul>"},{"location":"zh/INDEX/#1","title":"\u62a5\u544a\u6587\u4ef6 (1 \u4e2a)","text":"<ul> <li> PROJECT_STATUS.txt</li> </ul>"},{"location":"zh/INDEX/#1_1","title":"\u811a\u672c\u6587\u4ef6 (1 \u4e2a)","text":"<ul> <li> STARTUP_GUIDE.sh</li> </ul> <p>\u603b\u8ba1: 10 \u4efd\u6587\u4ef6\uff0c187 KB</p>"},{"location":"zh/INDEX/#_6","title":"\u2705 \u63a8\u8350\u68c0\u67e5\u6e05\u5355","text":"<p>\u5f00\u59cb\u4e4b\u524d\uff0c\u786e\u4fdd\u4f60\u5df2\u7ecf: - [ ] \u8bfb\u8fc7 QUICK_REFERENCE.md - [ ] \u7406\u89e3\u4e86 10 \u9879\u6838\u5fc3\u8bbe\u8ba1\u51b3\u7b56 - [ ] \u77e5\u9053 5 \u4e2a\u9636\u6bb5\u7684\u6982\u7565\u5185\u5bb9 - [ ] \u51c6\u5907\u597d\u4e86 Python 3.9+ \u73af\u5883 - [ ] \u7406\u89e3\u4e86 TDD \u5f00\u53d1\u6d41\u7a0b</p>"},{"location":"zh/INDEX/#_7","title":"\ud83c\udfaf \u6700\u540e\u7684\u8bdd","text":"<p>\u8fd9 10 \u4efd\u6587\u6863\u5305\u542b\u4e86\u8bbe\u8ba1 Symphra Container \u6240\u9700\u7684\u6240\u6709\u4fe1\u606f:</p> <p>\u2705 23,000+ \u884c\u6587\u5b57 - \u5b8c\u6574\u8be6\u5c3d \u2705 500+ \u4ee3\u7801\u793a\u4f8b - \u53ef\u76f4\u63a5\u53c2\u8003 \u2705 28 \u9879\u4f18\u5316\u8be6\u89e3 - \u5faa\u5e8f\u6e10\u8fdb \u2705 5 \u9636\u6bb5\u8ba1\u5212 - \u53ef\u7acb\u5373\u6267\u884c \u2705 \u6027\u80fd\u57fa\u51c6 - \u91cf\u5316\u76ee\u6807 \u2705 \u81ea\u52a8\u5316\u811a\u672c - \u4e00\u952e\u542f\u52a8</p> <p>\u4e00\u5207\u90fd\u5df2\u51c6\u5907\u597d\uff0c\u73b0\u5728\u5c31\u53ef\u4ee5\u5f00\u59cb\uff01 \ud83d\ude80</p> <p>\u751f\u6210\u65f6\u95f4: 2024-10-26 \u603b\u5927\u5c0f: 187 KB \u884c\u6570: 23,000+ \u96be\u5ea6: \u2b50\u2b50\u2b50 (\u4e2d\u7b49\uff0c\u7531\u6d45\u5165\u6df1) \u5b8c\u6210\u5ea6: \u2705 100%</p>"},{"location":"zh/best-practices/","title":"\u6700\u4f73\u5b9e\u8df5","text":"<ul> <li>\u4f18\u5148\u4f7f\u7528\u7c7b\u578b\u952e\u4f5c\u4e3a\u670d\u52a1\u952e\uff0c\u5b57\u7b26\u4e32\u952e\u7528\u4e8e\u52a8\u6001\u573a\u666f</li> <li>\u5bf9\u5916\u90e8\u8d44\u6e90\uff08\u6570\u636e\u5e93\u3001\u8fde\u63a5\u3001\u5ba2\u6237\u7aef\uff09\u4f7f\u7528 <code>SINGLETON</code> \u6216 <code>SCOPED</code></li> <li>\u8f7b\u91cf\u7eaf\u903b\u8f91\u670d\u52a1\u53ef\u4f7f\u7528 <code>TRANSIENT</code></li> <li>\u5de5\u5382\u51fd\u6570\u7528\u4e8e\u9700\u8981\u53c2\u6570\u5316\u6216\u590d\u6742\u521d\u59cb\u5316\u7684\u573a\u666f\uff08<code>FACTORY</code>\uff09</li> <li>\u901a\u8fc7\u62e6\u622a\u5668\u8bb0\u5f55\u89e3\u6790\u8017\u65f6\u4e0e\u5173\u952e\u65e5\u5fd7</li> <li>\u4e3a\u590d\u6742\u4f9d\u8d56\u542f\u7528\u53ef\u89c6\u5316\u4e0e\u8bca\u65ad\uff0c\u5b9a\u4f4d\u5faa\u73af\u4f9d\u8d56\u6216\u7f3a\u5931\u6ce8\u518c</li> <li>\u5355\u5143\u6d4b\u8bd5\u4e2d\u4f7f\u7528\u5bb9\u5668\u8986\u76d6\u6ce8\u518c\uff08<code>override=True</code>\uff09\u8fdb\u884c Mock</li> <li>\u5728 Web \u6846\u67b6\u4e2d\u4f7f\u7528\u8bf7\u6c42\u4f5c\u7528\u57df\u9694\u79bb\u5bf9\u8c61\u751f\u547d\u5468\u671f</li> <li>\u9488\u5bf9\u6cdb\u578b\u4ed3\u5e93\u7b49\uff0c\u4f7f\u7528 <code>register_generic</code> \u7cbe\u786e\u7ed1\u5b9a\u5b9e\u73b0</li> </ul>"},{"location":"zh/changelog/","title":"\u53d8\u66f4\u65e5\u5fd7","text":"<p>\u8bf4\u660e\uff1a\u5386\u53f2\u7248\u672c\u4ee5 Git \u63d0\u4ea4\u8bb0\u5f55\u4e3a\u51c6\u3002\u6b64\u5904\u4ec5\u603b\u7ed3\u5173\u952e\u7279\u6027\u53d8\u66f4\u3002</p>"},{"location":"zh/changelog/#010","title":"0.1.0","text":"<ul> <li>\u521d\u59cb\u53d1\u5e03\uff1a\u5bb9\u5668\u6838\u5fc3\u3001\u751f\u547d\u5468\u671f\u7ba1\u7406\u3001\u6784\u9020\u51fd\u6570\u6ce8\u5165</li> <li>\u652f\u6301\u6cdb\u578b\u670d\u52a1\u952e\u4e0e\u62e6\u622a\u5668\u7cfb\u7edf</li> <li>\u63d0\u4f9b\u53ef\u89c6\u5316\u4e0e\u8bca\u65ad\u5de5\u5177</li> <li>\u96c6\u6210 FastAPI / Flask / Django\uff08\u53ef\u9009\uff09</li> </ul>"},{"location":"zh/concepts/","title":"\u6838\u5fc3\u6982\u5ff5","text":""},{"location":"zh/concepts/#lifetime","title":"\u751f\u547d\u5468\u671f\uff08Lifetime\uff09","text":"<ul> <li><code>SINGLETON</code>\uff1a\u5168\u5c40\u552f\u4e00\u5b9e\u4f8b\uff0c\u9002\u5408\u65e0\u72b6\u6001\u670d\u52a1\u6216\u5171\u4eab\u8d44\u6e90</li> <li><code>TRANSIENT</code>\uff1a\u6bcf\u6b21\u89e3\u6790\u65b0\u5efa\u5b9e\u4f8b\uff0c\u9002\u5408\u8f7b\u91cf\u3001\u65e0\u8d44\u6e90\u538b\u529b\u7684\u670d\u52a1</li> <li><code>SCOPED</code>\uff1a\u5728\u4f5c\u7528\u57df\u5185\u552f\u4e00\uff08\u5982\u4e00\u6b21 Web \u8bf7\u6c42\uff09\uff0c\u9002\u5408\u5e26\u4e0a\u4e0b\u6587\u7684\u670d\u52a1</li> <li><code>FACTORY</code>\uff1a\u4ee5\u5de5\u5382\u51fd\u6570\u521b\u5efa\u5b9e\u4f8b\uff0c\u7075\u6d3b\u63a7\u5236\u521d\u59cb\u5316\u903b\u8f91</li> </ul>"},{"location":"zh/concepts/#servicekey","title":"\u670d\u52a1\u952e\uff08ServiceKey\uff09","text":"<ul> <li>\u652f\u6301\u7c7b\u578b\u952e\u4e0e\u5b57\u7b26\u4e32\u952e\u6df7\u5408\u6a21\u5f0f</li> <li>\u63a8\u8350\u4f7f\u7528\u7c7b\u578b\u952e\uff0c\u5b57\u7b26\u4e32\u952e\u7528\u4e8e\u52a8\u6001\u6216\u8de8\u6a21\u5757\u573a\u666f</li> </ul>"},{"location":"zh/concepts/#_2","title":"\u6784\u9020\u51fd\u6570\u6ce8\u5165","text":"<ul> <li>\u81ea\u52a8\u5206\u6790 <code>__init__</code> \u53c2\u6570\u7c7b\u578b\u5e76\u6ce8\u5165\u4f9d\u8d56\uff08\u89c1 <code>ConstructorInjector</code>\uff09</li> <li>\u652f\u6301 <code>Optional[T]</code> \u4e0e\u9ed8\u8ba4\u503c</li> <li>\u652f\u6301 <code>Injected</code> \u6807\u8bb0\u8fdb\u884c\u53c2\u6570\u6ce8\u5165\u6807\u8bc6</li> </ul>"},{"location":"zh/concepts/#scope","title":"\u4f5c\u7528\u57df\uff08Scope\uff09","text":"<ul> <li>\u4f7f\u7528 <code>container.create_scope()</code> \u521b\u5efa\u4f5c\u7528\u57df</li> <li>\u4f5c\u7528\u57df\u5185\u7684 <code>SCOPED</code> \u670d\u52a1\u5b9e\u4f8b\u4fdd\u6301\u552f\u4e00</li> <li>\u4f5c\u7528\u57df\u7ed3\u675f\u65f6\u8d1f\u8d23\u8d44\u6e90\u91ca\u653e</li> </ul>"},{"location":"zh/concepts/#interceptor","title":"\u62e6\u622a\u5668\uff08Interceptor\uff09","text":"<ul> <li>\u652f\u6301\u8bf7\u6c42\u524d/\u540e/\u9519\u8bef\u62e6\u622a\uff0c\u7edf\u4e00\u8bb0\u5f55\u65e5\u5fd7\u4e0e\u6027\u80fd</li> <li>\u53ef\u5bf9\u89e3\u6790\u4e0e\u751f\u547d\u5468\u671f\u4e8b\u4ef6\u8fdb\u884c\u62e6\u622a</li> </ul>"},{"location":"zh/concepts/#_3","title":"\u6cdb\u578b\u652f\u6301","text":"<ul> <li>\u901a\u8fc7 <code>GenericKey</code> \u533a\u5206\u5177\u4f53\u7c7b\u578b\u53c2\u6570</li> <li>\u4f7f\u7528 <code>register_generic(container, Repository[User], UserRepository)</code> \u6ce8\u518c\u5177\u4f53\u5b9e\u73b0</li> </ul>"},{"location":"zh/concepts/#_4","title":"\u5faa\u73af\u4f9d\u8d56\u68c0\u6d4b","text":"<ul> <li>\u89e3\u6790\u65f6\u8fdb\u884c\u5faa\u73af\u4f9d\u8d56\u68c0\u6d4b\uff08\u89c1 <code>CircularDependencyDetector</code>\uff09</li> <li>\u63d0\u4f9b\u8bca\u65ad\u5de5\u5177\u4e0e\u53ef\u89c6\u5316\uff08\u89c1 <code>visualization</code> \u6a21\u5757\uff09</li> </ul>"},{"location":"zh/concepts/#_5","title":"\u5f02\u6b65\u652f\u6301","text":"<ul> <li>\u540c\u6b65\u4e0e\u5f02\u6b65\u7edf\u4e00\u89e3\u6790\u63a5\u53e3\uff0c\u5bb9\u5668\u5185\u90e8\u5728\u9700\u8981\u65f6\u4f7f\u7528 <code>asyncio</code> \u9a71\u52a8</li> </ul>"},{"location":"zh/concepts/#_6","title":"\u6027\u80fd\u4e0e\u8bca\u65ad","text":"<ul> <li>\u5185\u7f6e\u6027\u80fd\u6307\u6807\u4e0e\u8ba1\u65f6\u5668\uff0c\u652f\u6301\u8bca\u65ad\u62a5\u544a\u4e0e\u4f9d\u8d56\u56fe\u5bfc\u51fa</li> </ul>"},{"location":"zh/faq/","title":"\u5e38\u89c1\u95ee\u9898\uff08FAQ\uff09","text":""},{"location":"zh/faq/#servicenotfounderror","title":"\u89e3\u6790\u5931\u8d25\uff1aServiceNotFoundError","text":"<ul> <li>\u68c0\u67e5\u662f\u5426\u5df2\u6ce8\u518c\u5bf9\u5e94\u7c7b\u578b\u6216\u6cdb\u578b\u952e</li> <li>\u5bf9\u4e8e <code>Optional[T]</code>\uff0c\u672a\u6ce8\u518c\u65f6\u4e0d\u4f1a\u629b\u9519</li> </ul>"},{"location":"zh/faq/#_1","title":"\u5faa\u73af\u4f9d\u8d56\u5982\u4f55\u5b9a\u4f4d\uff1f","text":"<ul> <li>\u4f7f\u7528\u8bca\u65ad\u5de5\u5177\u4e0e\u4f9d\u8d56\u56fe\u53ef\u89c6\u5316\uff08\u89c1\u300cAPI \u53c2\u8003\u300d\u4e2d\u7684 <code>visualization</code> \u6a21\u5757\uff09</li> </ul>"},{"location":"zh/faq/#_2","title":"\u5f02\u6b65\u670d\u52a1\u5982\u4f55\u89e3\u6790\uff1f","text":"<ul> <li>\u5bb9\u5668\u7edf\u4e00\u63a5\u53e3\u652f\u6301\u5f02\u6b65\uff0c\u76f4\u63a5 <code>await</code> \u670d\u52a1\u65b9\u6cd5\u5373\u53ef</li> </ul>"},{"location":"zh/faq/#mock","title":"\u5728\u6d4b\u8bd5\u4e2d\u5982\u4f55 Mock\uff1f","text":"<ul> <li>\u4f7f\u7528 <code>register(..., override=True)</code> \u8986\u76d6\u5df2\u6709\u6ce8\u518c\u5b9e\u73b0</li> </ul>"},{"location":"zh/installation/","title":"\u5b89\u88c5\u6307\u5357","text":"<p>Symphra \u5bb9\u5668\u652f\u6301\u7eaf Python \u73af\u5883\uff0c\u5e76\u63d0\u4f9b\u53ef\u9009\u7684\u6846\u67b6\u96c6\u6210\u3002</p>"},{"location":"zh/installation/#_2","title":"\u5b89\u88c5\u6838\u5fc3\u5e93","text":"<pre><code>pip install symphra-container\n</code></pre>"},{"location":"zh/installation/#_3","title":"\u53ef\u9009\u6846\u67b6\u96c6\u6210","text":"<p>\u6309\u9700\u5b89\u88c5\u5bf9\u5e94\u7684\u53ef\u9009\u4f9d\u8d56\uff1a <pre><code># FastAPI \u96c6\u6210\npip install symphra-container[fastapi]\n\n# Flask \u96c6\u6210\npip install symphra-container[flask]\n\n# Django \u96c6\u6210\npip install symphra-container[django]\n\n# \u5b89\u88c5\u6240\u6709\u96c6\u6210\npip install symphra-container[all]\n</code></pre></p>"},{"location":"zh/installation/#python","title":"Python \u7248\u672c\u8981\u6c42","text":"<ul> <li>Python 3.10+\uff08\u63a8\u8350 3.11/3.12\uff09</li> </ul>"},{"location":"zh/installation/#_4","title":"\u4f9d\u8d56\u8bf4\u660e","text":"<ul> <li>\u6838\u5fc3\u5e93\u65e0\u5f3a\u5236\u7b2c\u4e09\u65b9\u4f9d\u8d56</li> <li>\u96c6\u6210\u6a21\u5757\u6839\u636e\u6846\u67b6\u81ea\u52a8\u5bfc\u5165\uff0c\u672a\u5b89\u88c5\u65f6\u5177\u5907\u53cb\u597d\u9519\u8bef\u63d0\u793a\uff08\u89c1 <code>symphra_container.integrations.__init__</code>\uff09</li> </ul>"},{"location":"zh/installation/#_5","title":"\u9a8c\u8bc1\u5b89\u88c5","text":"<pre><code>import symphra_container\nprint(symphra_container.__version__)\n</code></pre>"},{"location":"zh/quick-start/","title":"\u5feb\u901f\u5f00\u59cb","text":"<p>\u672c\u6307\u5357\u5e2e\u52a9\u4f60\u5728 5 \u5206\u949f\u5185\u4e0a\u624b Symphra \u5bb9\u5668\u3002</p>"},{"location":"zh/quick-start/#1","title":"1. \u521b\u5efa\u5bb9\u5668\u5e76\u6ce8\u518c\u670d\u52a1","text":"<pre><code>from symphra_container import Container, Lifetime\n\nclass EmailService:\n    def send(self, to: str, text: str):\n        print(f\"send to {to}: {text}\")\n\nclass UserService:\n    def __init__(self, email: EmailService):\n        self.email = email\n    def onboard(self, user_email: str):\n        self.email.send(user_email, \"Welcome!\")\n\ncontainer = Container()\ncontainer.register(EmailService, lifetime=Lifetime.SINGLETON)\ncontainer.register(UserService, lifetime=Lifetime.TRANSIENT)\n</code></pre>"},{"location":"zh/quick-start/#2","title":"2. \u89e3\u6790\u670d\u52a1\uff08\u81ea\u52a8\u6ce8\u5165\u4f9d\u8d56\uff09","text":"<pre><code>service = container.resolve(UserService)\nservice.onboard(\"alice@example.com\")\n</code></pre>"},{"location":"zh/quick-start/#3-web","title":"3. \u4f7f\u7528\u4f5c\u7528\u57df\uff08\u5982 Web \u8bf7\u6c42\uff09","text":"<pre><code>with container.create_scope() as scope:\n    scoped_service = scope.resolve(UserService)\n    scoped_service.onboard(\"bob@example.com\")\n</code></pre>"},{"location":"zh/quick-start/#4","title":"4. \u5f02\u6b65\u652f\u6301","text":"<pre><code>import asyncio\n\nclass AsyncRepo:\n    async def get(self, uid: int) -&gt; dict:\n        return {\"id\": uid}\n\nclass AsyncService:\n    def __init__(self, repo: AsyncRepo):\n        self.repo = repo\n    async def fetch(self, uid: int):\n        return await self.repo.get(uid)\n\ncontainer.register(AsyncRepo, lifetime=Lifetime.SINGLETON)\ncontainer.register(AsyncService, lifetime=Lifetime.SCOPED)\n\nasync def main():\n    s = container.resolve(AsyncService)\n    print(await s.fetch(1))\n\nasyncio.run(main())\n</code></pre>"},{"location":"zh/quick-start/#5","title":"5. \u6cdb\u578b\u670d\u52a1\u952e","text":"<pre><code>from typing import Generic, TypeVar\nfrom symphra_container.generics import register_generic\n\nT = TypeVar(\"T\")\n\nclass Repository(Generic[T]):\n    def get(self, id: int) -&gt; T: ...\n\nclass User: ...\nclass UserRepository(Repository[User]):\n    def get(self, id: int) -&gt; User: return User()\n\nregister_generic(container, Repository[User], UserRepository)\nuser_repo = container.resolve(Repository[User])\n</code></pre>"},{"location":"zh/quick-start/#_2","title":"\u4e0b\u4e00\u6b65","text":"<ul> <li>\u9605\u8bfb\u300c\u5b89\u88c5\u6307\u5357\u300d\u300c\u6838\u5fc3\u6982\u5ff5\u300d</li> <li>\u67e5\u770b\u300cAPI \u53c2\u8003\u300d\u83b7\u53d6\u5b8c\u6574\u63a5\u53e3\u8bf4\u660e</li> </ul>"},{"location":"zh/testing-guide/","title":"\u6d4b\u8bd5\u6307\u5357","text":""},{"location":"zh/testing-guide/#_2","title":"\u6982\u8ff0","text":"<p>Symphra Container \u9879\u76ee\u9075\u5faa\u4ee5\u4e0b\u6d4b\u8bd5\u6807\u51c6\uff1a</p> <ul> <li>\u5355\u5143\u6d4b\u8bd5\u8986\u76d6\u7387: &gt;= 90%</li> <li>\u96c6\u6210\u6d4b\u8bd5\u8986\u76d6: \u6240\u6709\u6846\u67b6\u96c6\u6210</li> <li>\u6027\u80fd\u6d4b\u8bd5: \u5173\u952e\u64cd\u4f5c\u7684\u6027\u80fd\u57fa\u51c6</li> <li>\u6d4b\u8bd5\u6846\u67b6: pytest + pytest-asyncio + pytest-cov</li> </ul>"},{"location":"zh/testing-guide/#_3","title":"\u5355\u5143\u6d4b\u8bd5","text":""},{"location":"zh/testing-guide/#_4","title":"\u6d4b\u8bd5\u76ee\u5f55\u7ed3\u6784","text":"<pre><code>tests/\n\u251c\u2500\u2500 unit/                      # \u5355\u5143\u6d4b\u8bd5\n\u2502   \u251c\u2500\u2500 test_container.py     # \u5bb9\u5668\u57fa\u7840\u529f\u80fd\n\u2502   \u251c\u2500\u2500 test_lifetimes.py     # \u751f\u547d\u5468\u671f\u7ba1\u7406\n\u2502   \u251c\u2500\u2500 test_injection.py     # \u4f9d\u8d56\u6ce8\u5165\n\u2502   \u251c\u2500\u2500 test_circular.py      # \u5faa\u73af\u4f9d\u8d56\u5904\u7406\n\u2502   \u251c\u2500\u2500 test_interceptors.py  # \u62e6\u622a\u5668\u7cfb\u7edf\n\u2502   \u251c\u2500\u2500 test_decorators.py    # \u88c5\u9970\u5668\u7cfb\u7edf\n\u2502   \u2514\u2500\u2500 test_async.py         # \u5f02\u6b65\u652f\u6301\n\u2502\n\u251c\u2500\u2500 integration/               # \u96c6\u6210\u6d4b\u8bd5\n\u2502   \u251c\u2500\u2500 test_fastapi.py       # FastAPI \u96c6\u6210\n\u2502   \u251c\u2500\u2500 test_flask.py         # Flask \u96c6\u6210\n\u2502   \u251c\u2500\u2500 test_sqlalchemy.py    # SQLAlchemy \u96c6\u6210\n\u2502   \u2514\u2500\u2500 test_pydantic.py      # Pydantic \u96c6\u6210\n\u2502\n\u251c\u2500\u2500 performance/               # \u6027\u80fd\u6d4b\u8bd5\n\u2502   \u251c\u2500\u2500 test_resolution_speed.py\n\u2502   \u251c\u2500\u2500 test_memory_usage.py\n\u2502   \u2514\u2500\u2500 test_startup_time.py\n\u2502\n\u2514\u2500\u2500 conftest.py               # \u6d4b\u8bd5\u914d\u7f6e\u548c\u5171\u4eab\u5939\u5177\n</code></pre>"},{"location":"zh/testing-guide/#_5","title":"\u5355\u5143\u6d4b\u8bd5\u793a\u4f8b","text":"<pre><code># tests/unit/test_container.py\n\nimport pytest\nfrom symphra_container import Container, Lifetime\nfrom symphra_container.exceptions import ServiceNotFoundError\n\n\nclass TestContainer:\n    \"\"\"\u5bb9\u5668\u57fa\u7840\u529f\u80fd\u6d4b\u8bd5\"\"\"\n\n    def test_register_and_resolve_instance(self):\n        \"\"\"\u6d4b\u8bd5\u57fa\u7840\u7684\u670d\u52a1\u6ce8\u518c\u548c\u89e3\u6790\"\"\"\n        # \u51c6\u5907\n        container = Container()\n        test_obj = object()\n\n        # \u6267\u884c\n        container.register_instance(\"test_service\", test_obj)\n        resolved = container.resolve(\"test_service\")\n\n        # \u65ad\u8a00\n        assert resolved is test_obj\n\n    def test_resolve_nonexistent_service_raises_error(self):\n        \"\"\"\u6d4b\u8bd5\u89e3\u6790\u4e0d\u5b58\u5728\u7684\u670d\u52a1\u4f1a\u629b\u51fa\u5f02\u5e38\"\"\"\n        container = Container()\n\n        with pytest.raises(ServiceNotFoundError) as exc_info:\n            container.resolve(\"non_existent\")\n\n        assert \"non_existent\" in str(exc_info.value)\n\n    @pytest.mark.parametrize(\"lifetime\", [\n        Lifetime.SINGLETON,\n        Lifetime.TRANSIENT,\n        Lifetime.SCOPED,\n    ])\n    def test_different_lifetimes(self, lifetime):\n        \"\"\"\u6d4b\u8bd5\u4e0d\u540c\u7684\u751f\u547d\u5468\u671f\u884c\u4e3a\"\"\"\n        container = Container()\n\n        class Service:\n            pass\n\n        container.register(Service, lifetime=lifetime)\n        service1 = container.resolve(Service)\n        service2 = container.resolve(Service)\n\n        if lifetime == Lifetime.SINGLETON:\n            assert service1 is service2\n        else:\n            assert service1 is not service2\n\n\nclass TestInjection:\n    \"\"\"\u4f9d\u8d56\u6ce8\u5165\u6d4b\u8bd5\"\"\"\n\n    def test_constructor_injection(self):\n        \"\"\"\u6d4b\u8bd5\u6784\u9020\u51fd\u6570\u6ce8\u5165\"\"\"\n        container = Container()\n\n        class Database:\n            pass\n\n        class UserService:\n            def __init__(self, db: Database):\n                self.db = db\n\n        container.register(Database)\n        container.register(UserService)\n\n        service = container.resolve(UserService)\n        assert isinstance(service.db, Database)\n\n    def test_optional_dependency(self):\n        \"\"\"\u6d4b\u8bd5\u53ef\u9009\u4f9d\u8d56\u7684\u5904\u7406\"\"\"\n        from typing import Optional\n\n        container = Container()\n\n        class Service:\n            def __init__(self, optional: Optional[str] = None):\n                self.optional = optional\n\n        container.register(Service)\n        service = container.resolve(Service)\n        assert service.optional is None\n\n\nclass TestAsyncSupport:\n    \"\"\"\u5f02\u6b65\u652f\u6301\u6d4b\u8bd5\"\"\"\n\n    @pytest.mark.asyncio\n    async def test_async_factory(self):\n        \"\"\"\u6d4b\u8bd5\u5f02\u6b65\u5de5\u5382\u51fd\u6570\"\"\"\n        container = Container()\n\n        async def create_service():\n            # \u6a21\u62df\u5f02\u6b65\u64cd\u4f5c\n            return \"async_service\"\n\n        container.register_async_factory(\"service\", create_service)\n        result = await container.resolve_async(\"service\")\n        assert result == \"async_service\"\n</code></pre>"},{"location":"zh/testing-guide/#_6","title":"\u96c6\u6210\u6d4b\u8bd5","text":""},{"location":"zh/testing-guide/#fastapi","title":"FastAPI \u96c6\u6210\u6d4b\u8bd5","text":"<pre><code># tests/integration/test_fastapi.py\n\nimport pytest\nfrom fastapi import FastAPI\nfrom fastapi.testclient import TestClient\nfrom symphra_container import Container, Injected\nfrom symphra_container.integrations.fastapi import DIMiddleware\n\n\n@pytest.fixture\ndef app_with_container():\n    \"\"\"\u521b\u5efa\u96c6\u6210 DI \u5bb9\u5668\u7684 FastAPI \u5e94\u7528\"\"\"\n    app = FastAPI()\n    container = Container()\n\n    # \u6ce8\u518c\u670d\u52a1\n    class UserService:\n        def get_user(self, user_id: int):\n            return {\"id\": user_id, \"name\": \"Test User\"}\n\n    container.register(UserService)\n    app.add_middleware(DIMiddleware, container=container)\n\n    return app, container\n\n\ndef test_fastapi_injection(app_with_container):\n    \"\"\"\u6d4b\u8bd5 FastAPI \u4e2d\u7684\u4f9d\u8d56\u6ce8\u5165\"\"\"\n    app, container = app_with_container\n\n    @app.get(\"/users/{user_id}\")\n    def get_user(user_id: int, service: \"UserService\" = Injected):\n        return service.get_user(user_id)\n\n    client = TestClient(app)\n    response = client.get(\"/users/1\")\n\n    assert response.status_code == 200\n    assert response.json()[\"id\"] == 1\n\n\n@pytest.mark.asyncio\nasync def test_fastapi_async_injection():\n    \"\"\"\u6d4b\u8bd5 FastAPI \u4e2d\u7684\u5f02\u6b65\u4f9d\u8d56\u6ce8\u5165\"\"\"\n    app = FastAPI()\n    container = Container()\n\n    class AsyncService:\n        async def process(self, data: str):\n            return f\"processed: {data}\"\n\n    container.register(AsyncService)\n    app.add_middleware(DIMiddleware, container=container)\n\n    @app.get(\"/process\")\n    async def process(service: \"AsyncService\" = Injected):\n        return await service.process(\"test\")\n\n    from fastapi.testclient import TestClient\n    client = TestClient(app)\n    response = client.get(\"/process\")\n\n    assert response.status_code == 200\n</code></pre>"},{"location":"zh/testing-guide/#_7","title":"\u6027\u80fd\u6d4b\u8bd5","text":""},{"location":"zh/testing-guide/#_8","title":"\u6027\u80fd\u57fa\u51c6\u6d4b\u8bd5","text":"<pre><code># tests/performance/test_resolution_speed.py\n\nimport pytest\nimport time\nfrom symphra_container import Container, Lifetime\n\n\nclass TestResolutionPerformance:\n    \"\"\"\u89e3\u6790\u6027\u80fd\u6d4b\u8bd5\"\"\"\n\n    def test_singleton_resolution_speed(self):\n        \"\"\"\u6d4b\u8bd5\u5355\u4f8b\u89e3\u6790\u7684\u901f\u5ea6\uff08\u5e94\u8be5 &lt; 100ns\uff09\"\"\"\n        container = Container()\n\n        class Service:\n            pass\n\n        container.register(Service, lifetime=Lifetime.SINGLETON)\n\n        # \u9884\u70ed\n        container.resolve(Service)\n\n        # \u6027\u80fd\u6d4b\u8bd5\n        start = time.perf_counter_ns()\n        for _ in range(100000):\n            container.resolve(Service)\n        duration_ns = time.perf_counter_ns() - start\n\n        avg_ns = duration_ns / 100000\n        print(f\"\u5e73\u5747\u89e3\u6790\u65f6\u95f4: {avg_ns:.2f} ns\")\n\n        # \u65ad\u8a00\uff1a\u5e73\u5747\u89e3\u6790\u65f6\u95f4\u5e94\u8be5 &lt; 1000 ns (1 \u03bcs)\n        assert avg_ns &lt; 1000\n\n    def test_complex_dependency_resolution(self):\n        \"\"\"\u6d4b\u8bd5\u590d\u6742\u4f9d\u8d56\u89e3\u6790\u7684\u901f\u5ea6\"\"\"\n        container = Container()\n\n        class A:\n            pass\n\n        class B:\n            def __init__(self, a: A):\n                self.a = a\n\n        class C:\n            def __init__(self, b: B):\n                self.b = b\n\n        class D:\n            def __init__(self, c: C):\n                self.c = c\n\n        container.register(A, lifetime=Lifetime.SINGLETON)\n        container.register(B, lifetime=Lifetime.TRANSIENT)\n        container.register(C, lifetime=Lifetime.TRANSIENT)\n        container.register(D, lifetime=Lifetime.TRANSIENT)\n\n        start = time.perf_counter_ns()\n        for _ in range(10000):\n            container.resolve(D)\n        duration_ns = time.perf_counter_ns() - start\n\n        avg_ns = duration_ns / 10000\n        print(f\"\u590d\u6742\u4f9d\u8d56\u5e73\u5747\u89e3\u6790\u65f6\u95f4: {avg_ns:.2f} ns\")\n\n        # \u5e94\u8be5\u5728\u53ef\u63a5\u53d7\u8303\u56f4\u5185\n        assert avg_ns &lt; 50000  # &lt; 50 \u03bcs\n\n\nclass TestMemoryUsage:\n    \"\"\"\u5185\u5b58\u4f7f\u7528\u6d4b\u8bd5\"\"\"\n\n    def test_memory_efficiency(self):\n        \"\"\"\u6d4b\u8bd5\u5185\u5b58\u4f7f\u7528\u6548\u7387\"\"\"\n        import sys\n\n        container = Container()\n\n        # \u6ce8\u518c 1000 \u4e2a\u670d\u52a1\n        for i in range(1000):\n            class Service:\n                pass\n\n            container.register(f\"service_{i}\", Service)\n\n        # \u83b7\u53d6\u5bb9\u5668\u7684\u5927\u81f4\u5185\u5b58\u5360\u7528\n        size = sys.getsizeof(container)\n        print(f\"1000 \u4e2a\u670d\u52a1\u7684\u5bb9\u5668\u5927\u5c0f: {size / 1024:.2f} KB\")\n\n        # \u5e94\u8be5\u5728\u5408\u7406\u8303\u56f4\u5185 (&lt; 10 MB)\n        assert size &lt; 10 * 1024 * 1024\n</code></pre>"},{"location":"zh/testing-guide/#_9","title":"\u8fd0\u884c\u6d4b\u8bd5","text":""},{"location":"zh/testing-guide/#_10","title":"\u5feb\u901f\u6d4b\u8bd5","text":"<pre><code># \u8fd0\u884c\u6240\u6709\u5355\u5143\u6d4b\u8bd5\nuv run pytest tests/unit/ -v\n\n# \u8fd0\u884c\u7279\u5b9a\u6d4b\u8bd5\u6587\u4ef6\nuv run pytest tests/unit/test_container.py -v\n\n# \u8fd0\u884c\u7279\u5b9a\u6d4b\u8bd5\u51fd\u6570\nuv run pytest tests/unit/test_container.py::TestContainer::test_register_and_resolve_instance -v\n</code></pre>"},{"location":"zh/testing-guide/#_11","title":"\u5b8c\u6574\u6d4b\u8bd5\u548c\u8986\u76d6\u7387","text":"<pre><code># \u8fd0\u884c\u6240\u6709\u6d4b\u8bd5\u5e76\u751f\u6210\u8986\u76d6\u7387\u62a5\u544a\nuv run pytest tests/ -v --cov=src/symphra_container --cov-report=html\n\n# \u67e5\u770b HTML \u62a5\u544a\nopen htmlcov/index.html  # macOS\n# \u6216\nxdg-open htmlcov/index.html  # Linux\n# \u6216\nstart htmlcov/index.html  # Windows\n</code></pre>"},{"location":"zh/testing-guide/#_12","title":"\u5206\u7c7b\u8fd0\u884c\u6d4b\u8bd5","text":"<pre><code># \u53ea\u8fd0\u884c\u5355\u5143\u6d4b\u8bd5\nuv run pytest tests/unit/ -v -m \"not integration and not performance\"\n\n# \u53ea\u8fd0\u884c\u96c6\u6210\u6d4b\u8bd5\nuv run pytest tests/integration/ -v -m \"integration\"\n\n# \u53ea\u8fd0\u884c\u6027\u80fd\u6d4b\u8bd5\nuv run pytest tests/performance/ -v -m \"performance\"\n\n# \u8fd0\u884c\u9664\u4e86\u6162\u6d4b\u8bd5\u5916\u7684\u6240\u6709\u6d4b\u8bd5\nuv run pytest tests/ -v -m \"not slow\"\n</code></pre>"},{"location":"zh/testing-guide/#_13","title":"\u6d4b\u8bd5\u8986\u76d6\u7387\u8981\u6c42","text":""},{"location":"zh/testing-guide/#_14","title":"\u6700\u4f4e\u8981\u6c42","text":"<ul> <li>\u603b\u4f53\u8986\u76d6\u7387: &gt;= 90%</li> <li>\u5173\u952e\u6a21\u5757: 100%</li> <li><code>container.py</code></li> <li><code>injection/</code></li> <li><code>lifetimes/</code></li> <li><code>circular/</code></li> </ul>"},{"location":"zh/testing-guide/#_15","title":"\u67e5\u770b\u8be6\u7ec6\u8986\u76d6\u7387","text":"<pre><code># \u67e5\u770b\u54ea\u4e9b\u884c\u672a\u8986\u76d6\nuv run pytest tests/ --cov --cov-report=term-missing\n\n# \u751f\u6210 HTML \u62a5\u544a\uff08\u66f4\u6e05\u6670\uff09\nuv run pytest tests/ --cov --cov-report=html\n# \u6253\u5f00 htmlcov/index.html \u67e5\u770b\u5177\u4f53\u672a\u8986\u76d6\u7684\u4ee3\u7801\n</code></pre>"},{"location":"zh/testing-guide/#_16","title":"\u6700\u4f73\u5b9e\u8df5","text":""},{"location":"zh/testing-guide/#1","title":"1. \u7f16\u5199\u6e05\u6670\u7684\u6d4b\u8bd5","text":"<pre><code># \u2705 \u597d\u7684\u6d4b\u8bd5\ndef test_container_resolves_singleton_once():\n    \"\"\"\u5bb9\u5668\u5e94\u8be5\u4e3a\u5355\u4f8b\u751f\u547d\u5468\u671f\u7684\u670d\u52a1\u8fd4\u56de\u540c\u4e00\u5b9e\u4f8b\"\"\"\n    container = Container()\n    container.register(\"service\", Service, lifetime=Lifetime.SINGLETON)\n\n    instance1 = container.resolve(\"service\")\n    instance2 = container.resolve(\"service\")\n\n    assert instance1 is instance2\n\n# \u274c \u4e0d\u597d\u7684\u6d4b\u8bd5\ndef test_container():\n    container = Container()\n    container.register(\"s\", Service)\n    assert container.resolve(\"s\") is container.resolve(\"s\")\n</code></pre>"},{"location":"zh/testing-guide/#2-fixtures","title":"2. \u4f7f\u7528 fixtures \u51cf\u5c11\u91cd\u590d\u4ee3\u7801","text":"<pre><code>@pytest.fixture\ndef container():\n    \"\"\"\u6bcf\u4e2a\u6d4b\u8bd5\u90fd\u4f1a\u5f97\u5230\u4e00\u4e2a\u65b0\u7684\u5bb9\u5668\u5b9e\u4f8b\"\"\"\n    return Container()\n\ndef test_with_fixture(container):\n    container.register(\"service\", Service)\n    assert container.resolve(\"service\") is not None\n</code></pre>"},{"location":"zh/testing-guide/#3","title":"3. \u53c2\u6570\u5316\u6d4b\u8bd5","text":"<pre><code>@pytest.mark.parametrize(\"lifetime\", [\n    Lifetime.SINGLETON,\n    Lifetime.TRANSIENT,\n    Lifetime.SCOPED,\n])\ndef test_different_lifetimes(lifetime):\n    \"\"\"\u540c\u4e00\u4e2a\u6d4b\u8bd5\u903b\u8f91\uff0c\u591a\u4e2a\u53c2\u6570\u503c\"\"\"\n    container = Container()\n    container.register(Service, lifetime=lifetime)\n    # \u6d4b\u8bd5\u903b\u8f91...\n</code></pre>"},{"location":"zh/testing-guide/#4","title":"4. \u5f02\u6b65\u6d4b\u8bd5","text":"<pre><code>@pytest.mark.asyncio\nasync def test_async_operation():\n    \"\"\"\u5f02\u6b65\u6d4b\u8bd5\u9700\u8981 pytest.mark.asyncio \u6807\u8bb0\"\"\"\n    container = Container()\n    result = await container.resolve_async(AsyncService)\n    assert result is not None\n</code></pre>"},{"location":"zh/testing-guide/#_17","title":"\u6301\u7eed\u96c6\u6210","text":"<p>GitHub Actions \u4f1a\u81ea\u52a8\u8fd0\u884c\u6240\u6709\u6d4b\u8bd5\uff1a</p> <pre><code># \u5728\u672c\u5730\u6a21\u62df CI\nmake check  # \u8fd0\u884c\u6240\u6709\u68c0\u67e5\n</code></pre> <p>\u8be6\u89c1 <code>.github/workflows/ci.yml</code>\u3002</p>"},{"location":"zh/development/DEVELOPMENT_SETUP/","title":"Symphra Container - \u5f00\u53d1\u73af\u5883\u8bbe\u7f6e\u6307\u5357","text":""},{"location":"zh/development/DEVELOPMENT_SETUP/#uv","title":"\ud83d\ude80 \u4f7f\u7528 uv \u5feb\u901f\u542f\u52a8\uff08\u63a8\u8350\uff09","text":""},{"location":"zh/development/DEVELOPMENT_SETUP/#uv_1","title":"\u4ec0\u4e48\u662f uv\uff1f","text":"<p>uv \u662f\u4e00\u4e2a\u8d85\u5feb\u901f\u7684 Python \u5305\u7ba1\u7406\u5668\u548c resolver\uff0c\u7528 Rust \u7f16\u5199\u3002\u5b83\u6bd4 pip\u3001pip-tools \u548c poetry \u5feb 10-100 \u500d\u3002</p> <p>\u4f18\u52bf: - \u2705 \u6781\u5feb\u7684\u5b89\u88c5\u901f\u5ea6\uff08Rust \u5b9e\u73b0\uff09 - \u2705 \u786e\u5b9a\u6027\u7684\u4f9d\u8d56\u89e3\u6790 - \u2705 \u5185\u7f6e\u7684 Python \u7248\u672c\u7ba1\u7406 - \u2705 \u5b8c\u5168\u517c\u5bb9 pip \u548c PyPI - \u2705 \u7b80\u5355\u76f4\u89c2\u7684\u547d\u4ee4\u884c\u754c\u9762</p>"},{"location":"zh/development/DEVELOPMENT_SETUP/#uv_2","title":"\u5b89\u88c5 uv","text":""},{"location":"zh/development/DEVELOPMENT_SETUP/#macos-linux","title":"macOS / Linux","text":"<pre><code>curl -LsSf https://astral.sh/uv/install.sh | sh\n</code></pre>"},{"location":"zh/development/DEVELOPMENT_SETUP/#windows-powershell","title":"Windows (PowerShell)","text":"<pre><code>powershell -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n</code></pre>"},{"location":"zh/development/DEVELOPMENT_SETUP/#_1","title":"\u4f7f\u7528\u5305\u7ba1\u7406\u5668","text":"<pre><code># Homebrew (macOS)\nbrew install uv\n\n# Debian/Ubuntu\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n\n# Arch Linux\npacman -S uv\n</code></pre>"},{"location":"zh/development/DEVELOPMENT_SETUP/#_2","title":"\u9a8c\u8bc1\u5b89\u88c5","text":"<pre><code>uv --version  # \u5e94\u8be5\u663e\u793a uv 0.x.x\nuv python --version  # \u5e94\u8be5\u663e\u793a Python 3.11+\n</code></pre>"},{"location":"zh/development/DEVELOPMENT_SETUP/#_3","title":"\ud83d\udce6 \u9879\u76ee\u521d\u59cb\u5316","text":""},{"location":"zh/development/DEVELOPMENT_SETUP/#1-uv","title":"\u65b9\u5f0f 1: \u4f7f\u7528 uv \u4ece\u96f6\u5f00\u59cb\uff08\u63a8\u8350\uff09","text":"<pre><code># Step 1: \u8fdb\u5165\u9879\u76ee\u76ee\u5f55\ncd /opt/data/www/yfb/packages/symphra-container\n\n# Step 2: \u521d\u59cb\u5316 uv \u865a\u62df\u73af\u5883\nuv venv .venv\n\n# Step 3: \u6fc0\u6d3b\u865a\u62df\u73af\u5883\nsource .venv/bin/activate  # macOS/Linux\n# \u6216\n.venv\\Scripts\\activate  # Windows\n\n# Step 4: \u540c\u6b65\u4f9d\u8d56\uff08\u5b89\u88c5 dev \u548c frameworks\uff09\nuv sync --extra dev --extra frameworks\n\n# Step 5: \u9a8c\u8bc1\u5b89\u88c5\npython --version         # \u5e94\u8be5\u662f 3.11+\nuv pip list             # \u663e\u793a\u5df2\u5b89\u88c5\u7684\u5305\n</code></pre>"},{"location":"zh/development/DEVELOPMENT_SETUP/#2","title":"\u65b9\u5f0f 2: \u4f7f\u7528\u73b0\u6709\u7684\u865a\u62df\u73af\u5883","text":"<pre><code># Step 1: \u521b\u5efa\u865a\u62df\u73af\u5883\npython3.11 -m venv .venv\n\n# Step 2: \u6fc0\u6d3b\u865a\u62df\u73af\u5883\nsource .venv/bin/activate\n\n# Step 3: \u4f7f\u7528 uv \u5b89\u88c5\u4f9d\u8d56\nuv pip install -e \".[dev,frameworks]\"\n\n# \u6216\u540c\u6b65 pyproject.toml\nuv sync --extra dev --extra frameworks\n</code></pre>"},{"location":"zh/development/DEVELOPMENT_SETUP/#uv_3","title":"\ud83d\udd27 \u5e38\u7528 uv \u547d\u4ee4","text":""},{"location":"zh/development/DEVELOPMENT_SETUP/#_4","title":"\u4f9d\u8d56\u7ba1\u7406","text":"<pre><code># \u540c\u6b65\u4f9d\u8d56\uff08\u63a8\u8350\uff0c\u4f1a\u66f4\u65b0 uv.lock\uff09\nuv sync\n\n# \u540c\u6b65\u7279\u5b9a\u989d\u5916\u4f9d\u8d56\nuv sync --extra dev --extra frameworks\n\n# \u5b89\u88c5\u5355\u4e2a\u5305\nuv pip install package-name\n\n# \u5378\u8f7d\u5305\nuv pip uninstall package-name\n\n# \u5217\u51fa\u5df2\u5b89\u88c5\u7684\u5305\nuv pip list\n\n# \u67e5\u770b\u4f9d\u8d56\u6811\nuv pip tree\n\n# \u5bfc\u51fa requirements.txt\nuv pip freeze &gt; requirements.txt\nuv pip compile pyproject.toml -o requirements.txt\n</code></pre>"},{"location":"zh/development/DEVELOPMENT_SETUP/#_5","title":"\u865a\u62df\u73af\u5883\u7ba1\u7406","text":"<pre><code># \u521b\u5efa\u865a\u62df\u73af\u5883\nuv venv .venv\n\n# \u521b\u5efa\u6307\u5b9a Python \u7248\u672c\u7684\u865a\u62df\u73af\u5883\nuv venv .venv --python 3.12\n\n# \u5220\u9664\u865a\u62df\u73af\u5883\nrm -rf .venv  # macOS/Linux\nrmdir /s .venv  # Windows\n\n# \u67e5\u770b\u6240\u6709\u53ef\u7528\u7684 Python \u7248\u672c\nuv python list\n\n# \u4e0b\u8f7d\u7279\u5b9a Python \u7248\u672c\nuv python install 3.12\n</code></pre>"},{"location":"zh/development/DEVELOPMENT_SETUP/#_6","title":"\u5de5\u4f5c\u6d41\u547d\u4ee4","text":"<pre><code># \u4e00\u6b21\u6027\u8fd0\u884c\u547d\u4ee4\uff08\u81ea\u52a8\u521b\u5efa\u4e34\u65f6\u865a\u62df\u73af\u5883\uff09\nuv run ruff check src/\nuv run pytest tests/\n\n# \u6307\u5b9a Python \u7248\u672c\u8fd0\u884c\nuv run --python 3.12 pytest tests/\n</code></pre>"},{"location":"zh/development/DEVELOPMENT_SETUP/#_7","title":"\ud83e\uddea \u4ee3\u7801\u8d28\u91cf\u68c0\u67e5\u5de5\u4f5c\u6d41","text":""},{"location":"zh/development/DEVELOPMENT_SETUP/#_8","title":"\u81ea\u52a8\u683c\u5f0f\u5316\u548c\u68c0\u67e5","text":"<pre><code># 1. \u8fd0\u884c\u6240\u6709\u68c0\u67e5\u548c\u6d4b\u8bd5\uff08\u63a8\u8350\uff09\nuv run make check  # \u9700\u8981\u6709 Makefile\n\n# \u6216\u5206\u522b\u8fd0\u884c\uff1a\n\n# 2. Ruff \u4ee3\u7801\u68c0\u67e5\u548c\u81ea\u52a8\u4fee\u590d\nuv run ruff check src/ tests/ --fix\n\n# 3. Ruff \u4ee3\u7801\u683c\u5f0f\u5316\nuv run ruff format src/ tests/\n\n# 4. MyPy \u7c7b\u578b\u68c0\u67e5\nuv run mypy src/symphra_container --strict\n\n# 5. \u8fd0\u884c\u6d4b\u8bd5\u548c\u8986\u76d6\u7387\nuv run pytest tests/ -v --cov\n\n# 6. \u751f\u6210\u8986\u76d6\u7387 HTML \u62a5\u544a\nuv run pytest tests/ --cov --cov-report=html\n# \u6253\u5f00 htmlcov/index.html \u67e5\u770b\u8be6\u7ec6\u62a5\u544a\n</code></pre>"},{"location":"zh/development/DEVELOPMENT_SETUP/#_9","title":"\u6309\u4f18\u5148\u7ea7\u68c0\u67e5","text":"<p>P0 - \u5fc5\u987b\u901a\u8fc7: <pre><code>uv run ruff check src/ tests/        # Lint \u68c0\u67e5\nuv run ruff format src/ tests/       # \u683c\u5f0f\u68c0\u67e5\nuv run mypy src/ --strict            # \u7c7b\u578b\u68c0\u67e5\n</code></pre></p> <p>P1 - \u5f3a\u70c8\u5efa\u8bae: <pre><code>uv run pytest tests/ --cov=90        # \u6d4b\u8bd5\u548c\u8986\u76d6\u7387\n</code></pre></p> <p>P2 - \u53ef\u9009\u4f46\u63a8\u8350: <pre><code>uv run ruff check src/ --select RUF  # Ruff \u7279\u5b9a\u89c4\u5219\n</code></pre></p>"},{"location":"zh/development/DEVELOPMENT_SETUP/#makefile","title":"\ud83d\udccb Makefile \u4fbf\u6377\u547d\u4ee4\uff08\u53ef\u9009\uff09","text":"<p>\u521b\u5efa <code>Makefile</code> \u7b80\u5316\u547d\u4ee4\uff1a</p> <pre><code>.PHONY: help install check test format lint type clean\n\nhelp:\n    @echo \"Available commands:\"\n    @echo \"  make install     - Install dependencies with uv\"\n    @echo \"  make sync        - Sync dependencies with uv.lock\"\n    @echo \"  make check       - Run all checks (lint, format, type, test)\"\n    @echo \"  make format      - Format code with ruff\"\n    @echo \"  make lint        - Lint code with ruff\"\n    @echo \"  make type        - Check types with mypy\"\n    @echo \"  make test        - Run tests with pytest\"\n    @echo \"  make coverage    - Run tests with coverage report\"\n    @echo \"  make clean       - Remove build artifacts\"\n\ninstall:\n    uv sync --extra dev --extra frameworks\n\nsync:\n    uv sync\n\ncheck: format lint type test\n\nformat:\n    uv run ruff format src/ tests/\n    @echo \"\u2705 Code formatted\"\n\nlint:\n    uv run ruff check src/ tests/ --fix\n    @echo \"\u2705 Linting passed\"\n\ntype:\n    uv run mypy src/symphra_container --strict\n    @echo \"\u2705 Type checking passed\"\n\ntest:\n    uv run pytest tests/ -v\n    @echo \"\u2705 Tests passed\"\n\ncoverage:\n    uv run pytest tests/ -v --cov --cov-report=html\n    @echo \"\u2705 Coverage report generated: htmlcov/index.html\"\n\nclean:\n    find . -type d -name __pycache__ -exec rm -rf {} +\n    find . -type f -name \"*.pyc\" -delete\n    find . -type d -name \"*.egg-info\" -exec rm -rf {} +\n    rm -rf build/ dist/ .coverage htmlcov/ .pytest_cache/ .mypy_cache/\n    @echo \"\u2705 Cleaned\"\n</code></pre> <p>\u4f7f\u7528\uff1a <pre><code>make check       # \u8fd0\u884c\u6240\u6709\u68c0\u67e5\nmake format      # \u4ee3\u7801\u683c\u5f0f\u5316\nmake test        # \u8fd0\u884c\u6d4b\u8bd5\nmake coverage    # \u751f\u6210\u8986\u76d6\u7387\u62a5\u544a\nmake clean       # \u6e05\u7406\u4e34\u65f6\u6587\u4ef6\n</code></pre></p>"},{"location":"zh/development/DEVELOPMENT_SETUP/#_10","title":"\ud83c\udfaf \u5f00\u53d1\u6d41\u7a0b","text":""},{"location":"zh/development/DEVELOPMENT_SETUP/#1","title":"1. \u5f00\u59cb\u5de5\u4f5c","text":"<pre><code># \u6fc0\u6d3b\u865a\u62df\u73af\u5883\nsource .venv/bin/activate\n\n# \u540c\u6b65\u6700\u65b0\u4f9d\u8d56\nuv sync\n</code></pre>"},{"location":"zh/development/DEVELOPMENT_SETUP/#2_1","title":"2. \u7f16\u5199\u4ee3\u7801","text":"<pre><code># \u7f16\u5199\u60a8\u7684\u4ee3\u7801\n# src/symphra_container/container.py\n</code></pre>"},{"location":"zh/development/DEVELOPMENT_SETUP/#3","title":"3. \u683c\u5f0f\u5316\u548c\u68c0\u67e5","text":"<pre><code># \u81ea\u52a8\u683c\u5f0f\u5316\nuv run ruff format src/ tests/\n\n# \u8fd0\u884c lint \u68c0\u67e5\u5e76\u81ea\u52a8\u4fee\u590d\nuv run ruff check src/ tests/ --fix\n\n# \u8fd0\u884c\u7c7b\u578b\u68c0\u67e5\nuv run mypy src/symphra_container --strict\n\n# \u5982\u679c\u6709\u95ee\u9898\uff0c\u4fee\u590d\u540e\u518d\u68c0\u67e5\n</code></pre>"},{"location":"zh/development/DEVELOPMENT_SETUP/#4","title":"4. \u8fd0\u884c\u6d4b\u8bd5","text":"<pre><code># \u5feb\u901f\u8fd0\u884c\nuv run pytest tests/unit/ -v\n\n# \u5b8c\u6574\u6d4b\u8bd5\u548c\u8986\u76d6\u7387\nuv run pytest tests/ -v --cov\n\n# \u751f\u6210 HTML \u62a5\u544a\nuv run pytest tests/ --cov --cov-report=html\n</code></pre>"},{"location":"zh/development/DEVELOPMENT_SETUP/#5","title":"5. \u63d0\u4ea4\u4ee3\u7801","text":"<pre><code># \u786e\u4fdd\u6240\u6709\u68c0\u67e5\u90fd\u901a\u8fc7\nuv run ruff format src/ tests/\nuv run ruff check src/ tests/\nuv run mypy src/ --strict\nuv run pytest tests/ --cov=90\n\n# \u63d0\u4ea4\ngit add .\ngit commit -m \"feat: add new feature\"\n</code></pre>"},{"location":"zh/development/DEVELOPMENT_SETUP/#_11","title":"\ud83d\udcca \u4ee3\u7801\u8d28\u91cf\u68c0\u67e5\u8be6\u89e3","text":""},{"location":"zh/development/DEVELOPMENT_SETUP/#ruff","title":"Ruff \u68c0\u67e5\u89c4\u5219","text":"<p>\u542f\u7528\u7684\u4e3b\u8981\u89c4\u5219\u96c6:</p> \u4ee3\u7801 \u540d\u79f0 \u8bf4\u660e F Pyflakes \u67e5\u627e\u53ef\u80fd\u7684\u9519\u8bef E/W pycodestyle \u4ee3\u7801\u98ce\u683c\u95ee\u9898 C90 mccabe \u590d\u6742\u5ea6\u68c0\u67e5 I isort \u5bfc\u5165\u6392\u5e8f N pep8-naming \u547d\u540d\u89c4\u8303 D pydocstyle \u6587\u6863\u5b57\u7b26\u4e32 UP pyupgrade Python \u8bed\u6cd5\u5347\u7ea7 ANN flake8-annotations \u7c7b\u578b\u6ce8\u89e3\u68c0\u67e5 B flake8-bugbear \u5e38\u89c1\u9519\u8bef S flake8-bandit \u5b89\u5168\u95ee\u9898 RUF Ruff specific Ruff \u7279\u5b9a\u89c4\u5219 <p>\u7981\u7528\u7684\u89c4\u5219 (\u592a\u4e25\u683c): - <code>ANN101</code>: \u5ffd\u7565 <code>self</code> \u7684\u7c7b\u578b\u6ce8\u89e3 - <code>S101</code>: \u5ffd\u7565 assert - <code>D100/D104</code>: \u5ffd\u7565\u6587\u4ef6\u7ea7\u6587\u6863\u5b57\u7b26\u4e32</p> <p>\u8fd0\u884c\u68c0\u67e5: <pre><code># \u67e5\u770b\u6240\u6709\u95ee\u9898\uff08\u4e0d\u4fee\u590d\uff09\nuv run ruff check src/\n\n# \u81ea\u52a8\u4fee\u590d\u53ef\u4ee5\u4fee\u590d\u7684\u95ee\u9898\nuv run ruff check src/ --fix\n\n# \u53ea\u663e\u793a\u7279\u5b9a\u89c4\u5219\u7684\u95ee\u9898\nuv run ruff check src/ --select E,W\n\n# \u663e\u793a\u8be6\u7ec6\u4fe1\u606f\nuv run ruff check src/ --show-fixes\n</code></pre></p>"},{"location":"zh/development/DEVELOPMENT_SETUP/#mypy","title":"MyPy \u7c7b\u578b\u68c0\u67e5","text":"<p>\u4e25\u683c\u6a21\u5f0f\u8bbe\u7f6e (<code>--strict</code>): - \u8981\u6c42\u6240\u6709\u51fd\u6570\u90fd\u6709\u7c7b\u578b\u6ce8\u89e3 - \u7981\u6b62\u9690\u5f0f <code>Any</code> \u7c7b\u578b - \u7981\u6b62\u672a\u68c0\u67e5\u7684\u8f6c\u6362 - \u7b49\u7b49</p> <p>\u8fd0\u884c\u68c0\u67e5: <pre><code># \u4e25\u683c\u6a21\u5f0f\u68c0\u67e5\nuv run mypy src/symphra_container --strict\n\n# \u5ffd\u7565\u7279\u5b9a\u95ee\u9898\nuv run mypy src/ --ignore-missing-imports\n\n# \u751f\u6210\u62a5\u544a\nuv run mypy src/ --html htmlmypy/\n</code></pre></p>"},{"location":"zh/development/DEVELOPMENT_SETUP/#pytest","title":"Pytest \u8986\u76d6\u7387","text":"<p>\u76ee\u6807: &gt;= 90% \u8986\u76d6\u7387</p> <p>\u8fd0\u884c\u6d4b\u8bd5: <pre><code># \u7b80\u5355\u8fd0\u884c\nuv run pytest tests/\n\n# \u663e\u793a\u8986\u76d6\u7387\u6458\u8981\nuv run pytest tests/ --cov\n\n# \u663e\u793a\u7f3a\u5931\u7684\u884c\nuv run pytest tests/ --cov --cov-report=term-missing\n\n# \u751f\u6210 HTML \u62a5\u544a\nuv run pytest tests/ --cov --cov-report=html\n# \u6253\u5f00 htmlcov/index.html\n\n# \u5f3a\u5236\u8986\u76d6\u7387\u6700\u4f4e\u503c\nuv run pytest tests/ --cov=symphra_container --cov-fail-under=90\n</code></pre></p>"},{"location":"zh/development/DEVELOPMENT_SETUP/#_12","title":"\ud83d\udcdd \u63d0\u4ea4\u524d\u68c0\u67e5\u6e05\u5355","text":"<p>\u5728\u63d0\u4ea4\u4ee3\u7801\u524d\uff0c\u786e\u4fdd\uff1a</p> <pre><code># 1. \u683c\u5f0f\u5316\u68c0\u67e5\nuv run ruff format src/ tests/\n# \u68c0\u67e5\u662f\u5426\u6709\u6539\u52a8\uff0c\u5982\u6709\u5219\u4fee\u590d\u5e76\u786e\u8ba4\n\n# 2. Lint \u68c0\u67e5\nuv run ruff check src/ tests/ --fix\n# \u5e94\u8be5\u8f93\u51fa\uff1a\u2705 All checks passed\n\n# 3. \u7c7b\u578b\u68c0\u67e5\nuv run mypy src/symphra_container --strict\n# \u5e94\u8be5\u6ca1\u6709\u9519\u8bef\n\n# 4. \u6d4b\u8bd5\nuv run pytest tests/ --cov=90 -v\n# \u5e94\u8be5\u6240\u6709\u6d4b\u8bd5\u901a\u8fc7\uff0c\u8986\u76d6\u7387 &gt;= 90%\n\n# 5. \u9a8c\u8bc1 Python \u7248\u672c\npython --version\n# \u5e94\u8be5\u662f 3.11 \u6216\u66f4\u9ad8\n\n# \u5168\u90e8\u5b8c\u6210\u540e\u63d0\u4ea4\ngit add .\ngit commit -m \"your message\"\n</code></pre>"},{"location":"zh/development/DEVELOPMENT_SETUP/#_13","title":"\ud83d\udc1b \u5e38\u89c1\u95ee\u9898","text":""},{"location":"zh/development/DEVELOPMENT_SETUP/#q-uv","title":"Q: uv \u547d\u4ee4\u627e\u4e0d\u5230\uff1f","text":"<p>A: \u786e\u4fdd\u5df2\u5b89\u88c5 uv \u5e76\u5728 PATH \u4e2d\u3002\u8fd0\u884c <code>uv --version</code> \u9a8c\u8bc1\u3002</p>"},{"location":"zh/development/DEVELOPMENT_SETUP/#q","title":"Q: \u865a\u62df\u73af\u5883\u6ca1\u6fc0\u6d3b\uff1f","text":"<p>A: \u8fd0\u884c <code>source .venv/bin/activate</code> (macOS/Linux) \u6216 <code>.venv\\Scripts\\activate</code> (Windows)</p>"},{"location":"zh/development/DEVELOPMENT_SETUP/#q_1","title":"Q: \u4f9d\u8d56\u51b2\u7a81\uff1f","text":"<p>A: \u8fd0\u884c <code>uv sync</code> \u91cd\u65b0\u540c\u6b65\u4f9d\u8d56\uff0c\u8fd9\u4f1a\u8bfb\u53d6 <code>uv.lock</code> \u6587\u4ef6\u3002</p>"},{"location":"zh/development/DEVELOPMENT_SETUP/#q_2","title":"Q: \u60f3\u6dfb\u52a0\u65b0\u7684\u4f9d\u8d56\uff1f","text":"<p>A: \u7f16\u8f91 <code>pyproject.toml</code> \u540e\u8fd0\u884c <code>uv sync</code>\uff0c\u6216\u76f4\u63a5 <code>uv pip install package-name</code>\u3002</p>"},{"location":"zh/development/DEVELOPMENT_SETUP/#q-ruff","title":"Q: Ruff \u62a5\u9519\u592a\u591a\uff1f","text":"<p>A: \u9996\u5148\u8fd0\u884c <code>uv run ruff check --fix</code> \u81ea\u52a8\u4fee\u590d\uff0c\u7136\u540e\u624b\u52a8\u4fee\u590d\u5269\u4f59\u95ee\u9898\u3002</p>"},{"location":"zh/development/DEVELOPMENT_SETUP/#q-mypy","title":"Q: MyPy \u4e25\u683c\u6a21\u5f0f\u592a\u4e25\u683c\uff1f","text":"<p>A: \u8fd9\u662f\u4e00\u4e2a\u7279\u6027\uff0c\u4e0d\u662f bug\u3002\u4e25\u683c\u7c7b\u578b\u68c0\u67e5\u4f1a\u8ba9\u4ee3\u7801\u66f4\u5b89\u5168\u3002\u5982\u679c\u5fc5\u987b\u653e\u5bbd\uff0c\u7f16\u8f91 <code>pyproject.toml</code> \u7684 <code>[tool.mypy]</code> \u90e8\u5206\u3002</p>"},{"location":"zh/development/DEVELOPMENT_SETUP/#q-90","title":"Q: \u6d4b\u8bd5\u8986\u76d6\u7387\u4e0d\u8db3 90%\uff1f","text":"<p>A: \u6dfb\u52a0\u66f4\u591a\u5355\u5143\u6d4b\u8bd5\u3002\u4f7f\u7528 <code>pytest --cov --cov-report=html</code> \u67e5\u770b\u672a\u8986\u76d6\u7684\u4ee3\u7801\u3002</p>"},{"location":"zh/development/DEVELOPMENT_SETUP/#_14","title":"\ud83d\udd17 \u66f4\u591a\u8d44\u6e90","text":"<ul> <li>uv \u5b98\u65b9\u6587\u6863</li> <li>Ruff \u6587\u6863</li> <li>MyPy \u6587\u6863</li> <li>Pytest \u6587\u6863</li> </ul>"},{"location":"zh/development/DEVELOPMENT_SETUP/#_15","title":"\ud83c\udf93 \u5f00\u53d1\u6700\u4f73\u5b9e\u8df5","text":""},{"location":"zh/development/DEVELOPMENT_SETUP/#1_1","title":"1. \u59cb\u7ec8\u4fdd\u6301\u4ee3\u7801\u8d28\u91cf","text":"<pre><code># \u5728\u63d0\u4ea4\u524d\u8fd0\u884c\u8fd9\u4e2a\u4e00\u4f53\u5316\u547d\u4ee4\nuv run ruff format src/ tests/ &amp;&amp; \\\nuv run ruff check src/ tests/ --fix &amp;&amp; \\\nuv run mypy src/ --strict &amp;&amp; \\\nuv run pytest tests/ --cov=90\n</code></pre>"},{"location":"zh/development/DEVELOPMENT_SETUP/#2_2","title":"2. \u7f16\u5199\u53ef\u6d4b\u8bd5\u7684\u4ee3\u7801","text":"<ul> <li>\u4f9d\u8d56\u6ce8\u5165\uff0c\u65b9\u4fbf mock</li> <li>\u5c0f\u7684\u3001\u4e13\u6ce8\u7684\u51fd\u6570</li> <li>\u660e\u786e\u7684\u9519\u8bef\u5904\u7406</li> <li>\u5b8c\u6574\u7684\u7c7b\u578b\u6ce8\u89e3</li> </ul>"},{"location":"zh/development/DEVELOPMENT_SETUP/#3_1","title":"3. \u6301\u7eed\u96c6\u6210","text":"<p>\u8fd9\u4e9b\u68c0\u67e5\u5e94\u8be5\u5728 CI/CD \u6d41\u7a0b\u4e2d\u81ea\u52a8\u8fd0\u884c\uff1a</p> <pre><code># .github/workflows/ci.yml\n- name: Format check\n  run: uv run ruff format --check src/ tests/\n\n- name: Lint check\n  run: uv run ruff check src/ tests/\n\n- name: Type check\n  run: uv run mypy src/ --strict\n\n- name: Tests\n  run: uv run pytest tests/ --cov=90\n</code></pre>"},{"location":"zh/development/DEVELOPMENT_SETUP/#4_1","title":"4. \u6027\u80fd\u4f18\u5316","text":"<ul> <li>\u4f7f\u7528 uv \u66ff\u4ee3 pip\uff08\u5feb 10-100 \u500d\uff09</li> <li>\u5b9a\u671f\u66f4\u65b0\u4f9d\u8d56</li> <li>\u79fb\u9664\u672a\u4f7f\u7528\u7684\u5bfc\u5165\u548c\u4f9d\u8d56</li> <li>\u4f7f\u7528 <code>--no-cache</code> \u5f3a\u5236\u91cd\u65b0\u5b89\u88c5\uff08\u5982\u6709\u95ee\u9898\uff09</li> </ul> <p>\u73b0\u5728\u60a8\u5df2\u7ecf\u51c6\u5907\u597d\u5f00\u53d1\u4e86\uff01 \ud83d\ude80</p> <p>\u4e0b\u4e00\u6b65\uff1a 1. \u8fd0\u884c <code>uv sync --extra dev --extra frameworks</code> 2. \u8fd0\u884c <code>uv run pytest tests/</code> \u9a8c\u8bc1\u8bbe\u7f6e 3. \u6309\u7167 INTEGRATED_ROADMAP.md \u5f00\u59cb\u5f00\u53d1</p>"},{"location":"zh/guaids/container/","title":"\u5bb9\u5668\uff08Container\uff09","text":""},{"location":"zh/guaids/container/#symphra_container.container.Container","title":"<code>symphra_container.container.Container</code>","text":"<p>\u4f9d\u8d56\u6ce8\u5165\u5bb9\u5668.</p> <p>\u6838\u5fc3\u5bb9\u5668\u5b9e\u73b0,\u63d0\u4f9b\u4e86\u5b8c\u6574\u7684\u4f9d\u8d56\u6ce8\u5165\u529f\u80fd: - \u670d\u52a1\u6ce8\u518c\u548c\u89e3\u6790 - 4 \u79cd\u751f\u547d\u5468\u671f\u7ba1\u7406 - \u4f9d\u8d56\u6ce8\u5165 - \u62e6\u622a\u5668\u652f\u6301 - \u4f5c\u7528\u57df\u7ba1\u7406 - \u5faa\u73af\u4f9d\u8d56\u68c0\u6d4b</p> <p>\u5c5e\u6027\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 <code>_registrations</code> <code>dict[ServiceKey, ServiceRegistration]</code> <p>\u670d\u52a1\u6ce8\u518c\u5b57\u5178</p> <code>_lifetime_manager</code> <p>\u751f\u547d\u5468\u671f\u7ba1\u7406\u5668</p> <code>_interceptors</code> <code>dict[str, list[Any]]</code> <p>\u62e6\u622a\u5668\u5b57\u5178</p> <code>_circular_detector</code> <p>\u5faa\u73af\u4f9d\u8d56\u68c0\u6d4b\u5668</p> <code>_performance_metrics</code> <p>\u6027\u80fd\u6307\u6807\u6536\u96c6\u5668</p> <code>_enable_performance_tracking</code> <p>\u662f\u5426\u542f\u7528\u6027\u80fd\u8ddf\u8e2a</p> Source code in <code>src/symphra_container/container.py</code> <pre><code>class Container:\n    \"\"\"\u4f9d\u8d56\u6ce8\u5165\u5bb9\u5668.\n\n    \u6838\u5fc3\u5bb9\u5668\u5b9e\u73b0,\u63d0\u4f9b\u4e86\u5b8c\u6574\u7684\u4f9d\u8d56\u6ce8\u5165\u529f\u80fd:\n    - \u670d\u52a1\u6ce8\u518c\u548c\u89e3\u6790\n    - 4 \u79cd\u751f\u547d\u5468\u671f\u7ba1\u7406\n    - \u4f9d\u8d56\u6ce8\u5165\n    - \u62e6\u622a\u5668\u652f\u6301\n    - \u4f5c\u7528\u57df\u7ba1\u7406\n    - \u5faa\u73af\u4f9d\u8d56\u68c0\u6d4b\n\n    Attributes:\n        _registrations: \u670d\u52a1\u6ce8\u518c\u5b57\u5178\n        _lifetime_manager: \u751f\u547d\u5468\u671f\u7ba1\u7406\u5668\n        _interceptors: \u62e6\u622a\u5668\u5b57\u5178\n        _circular_detector: \u5faa\u73af\u4f9d\u8d56\u68c0\u6d4b\u5668\n        _performance_metrics: \u6027\u80fd\u6307\u6807\u6536\u96c6\u5668\n        _enable_performance_tracking: \u662f\u5426\u542f\u7528\u6027\u80fd\u8ddf\u8e2a\n    \"\"\"\n\n    def __init__(\n        self,\n        enable_auto_wiring: bool = False,\n        strict_mode: bool = False,\n        enable_performance_tracking: bool = False,\n    ) -&gt; None:\n        \"\"\"\u521d\u59cb\u5316\u5bb9\u5668.\n\n        Args:\n            enable_auto_wiring: \u662f\u5426\u542f\u7528\u81ea\u52a8\u88c5\u914d\n            strict_mode: \u662f\u5426\u542f\u7528\u4e25\u683c\u6a21\u5f0f\n            enable_performance_tracking: \u662f\u5426\u542f\u7528\u6027\u80fd\u8ddf\u8e2a\n\n        Raises:\n            InvalidConfigurationError: \u914d\u7f6e\u65e0\u6548\u65f6\n        \"\"\"\n        # \u68c0\u67e5\u914d\u7f6e\u6709\u6548\u6027\n        if enable_auto_wiring and strict_mode:\n            msg = \"Cannot enable both auto_wiring and strict_mode simultaneously\"\n            raise InvalidConfigurationError(\n                msg,\n            )\n\n        self._registrations: dict[ServiceKey, ServiceRegistration] = {}\n        self._lifetime_manager = LifetimeManager()\n        self._interceptors: dict[str, list[Any]] = {\n            \"before\": [],\n            \"after\": [],\n            \"error\": [],\n        }\n        self._circular_detector = CircularDependencyDetector()\n        self._performance_metrics = PerformanceMetrics()\n        self._enable_performance_tracking = enable_performance_tracking\n        self.enable_auto_wiring = enable_auto_wiring\n        self.strict_mode = strict_mode\n        # \u522b\u540d\u6620\u5c04: \u522b\u540d -&gt; \u5b9e\u9645\u952e\n        self._aliases: dict[str, ServiceKey] = {}\n\n    # ===================== \u6ce8\u518c\u65b9\u6cd5 =====================\n\n    def register(\n        self,\n        service_type: type,\n        *,\n        key: ServiceKey | None = None,\n        lifetime: Lifetime = Lifetime.TRANSIENT,\n        override: bool = False,\n    ) -&gt; Container:\n        \"\"\"\u6ce8\u518c\u4e00\u4e2a\u670d\u52a1.\n\n        \u6700\u57fa\u7840\u7684\u6ce8\u518c\u65b9\u6cd5,\u4f7f\u7528\u670d\u52a1\u7c7b\u672c\u8eab\u521b\u5efa\u5b9e\u4f8b.\n\n        Args:\n            service_type: \u670d\u52a1\u7c7b\u578b\n            key: \u670d\u52a1\u952e(\u9ed8\u8ba4\u4e3a service_type)\n            lifetime: \u751f\u547d\u5468\u671f(\u9ed8\u8ba4 TRANSIENT)\n            override: \u662f\u5426\u8986\u76d6\u5df2\u5b58\u5728\u7684\u670d\u52a1\n\n        Returns:\n            \u5bb9\u5668\u5b9e\u4f8b(\u652f\u6301\u94fe\u5f0f\u8c03\u7528)\n\n        Raises:\n            RegistrationError: \u6ce8\u518c\u5931\u8d25\u65f6\n\n        Examples:\n            &gt;&gt;&gt; container = Container()\n            &gt;&gt;&gt; container.register(UserService)\n            &gt;&gt;&gt; container.register(DatabaseService, lifetime=Lifetime.SINGLETON)\n            &gt;&gt;&gt; service = container.resolve(UserService)\n        \"\"\"\n        # \u5982\u679c\u670d\u52a1\u7c7b\u578b\u5e26\u6709\u88c5\u9970\u5668\u5143\u6570\u636e,\u4f18\u5148\u4f7f\u7528\u5143\u6570\u636e\u4e2d\u7684\u952e\u4e0e\u751f\u547d\u5468\u671f\n        metadata = get_service_metadata(service_type)\n        decorated_override = False\n        if metadata is not None:\n            # \u4f7f\u7528\u88c5\u9970\u5668\u63d0\u4f9b\u7684 key (\u5982\u672a\u663e\u5f0f\u4f20\u5165)\n            key = key or metadata.key or service_type\n            # \u4f7f\u7528\u88c5\u9970\u5668\u63d0\u4f9b\u7684\u751f\u547d\u5468\u671f\n            lifetime = metadata.lifetime\n            # \u5bf9\u88c5\u9970\u8fc7\u7684\u670d\u52a1\u9ed8\u8ba4\u5141\u8bb8\u91cd\u590d\u6ce8\u518c(\u8986\u76d6)\n            decorated_override = True\n        else:\n            key = key or service_type\n\n        # \u68c0\u67e5\u662f\u5426\u5df2\u6ce8\u518c\n        if key in self._registrations and not (override or decorated_override):\n            raise RegistrationError(\n                key,\n                \"Service already registered. Use override=True to replace it.\",\n            )\n\n        registration = ServiceRegistration(\n            key=key,\n            service_type=service_type,\n            factory=service_type,\n            lifetime=lifetime,\n            override=override or decorated_override,\n        )\n        self._registrations[key] = registration\n\n        return self\n\n    def register_instance(\n        self,\n        key: ServiceKey,\n        instance: Any,\n        override: bool = False,\n    ) -&gt; Container:\n        \"\"\"\u6ce8\u518c\u4e00\u4e2a\u5355\u4f8b\u5b9e\u4f8b.\n\n        \u76f4\u63a5\u6ce8\u518c\u4e00\u4e2a\u5df2\u7ecf\u521b\u5efa\u7684\u5b9e\u4f8b\u4f5c\u4e3a\u5355\u4f8b.\n\n        Args:\n            key: \u670d\u52a1\u952e\n            instance: \u670d\u52a1\u5b9e\u4f8b\n            override: \u662f\u5426\u8986\u76d6\u5df2\u5b58\u5728\u7684\u670d\u52a1\n\n        Returns:\n            \u5bb9\u5668\u5b9e\u4f8b(\u652f\u6301\u94fe\u5f0f\u8c03\u7528)\n\n        Raises:\n            RegistrationError: \u6ce8\u518c\u5931\u8d25\u65f6\n\n        Examples:\n            &gt;&gt;&gt; config = Config()\n            &gt;&gt;&gt; container.register_instance(\"config\", config)\n            &gt;&gt;&gt; resolved_config = container.resolve(\"config\")\n            &gt;&gt;&gt; assert resolved_config is config\n        \"\"\"\n        if key in self._registrations and not override:\n            raise RegistrationError(\n                key,\n                \"Service already registered. Use override=True to replace it.\",\n            )\n\n        # \u521b\u5efa\u4e00\u4e2a\u8fd4\u56de\u8be5\u5b9e\u4f8b\u7684\u5de5\u5382\n        def factory() -&gt; Any:\n            return instance\n\n        registration = ServiceRegistration(\n            key=key,\n            service_type=type(instance),\n            factory=factory,\n            lifetime=Lifetime.SINGLETON,\n            override=override,\n        )\n        self._registrations[key] = registration\n\n        # \u76f4\u63a5\u5b58\u50a8\u5230\u5355\u4f8b\u5b58\u50a8\n        self._lifetime_manager.set_instance(key, instance, Lifetime.SINGLETON)\n\n        return self\n\n    def register_factory(\n        self,\n        key: ServiceKey,\n        factory: Callable[..., T],\n        *,\n        service_type: type | None = None,\n        lifetime: Lifetime = Lifetime.TRANSIENT,\n        override: bool = False,\n    ) -&gt; Container:\n        \"\"\"\u6ce8\u518c\u4e00\u4e2a\u5de5\u5382\u51fd\u6570.\n\n        \u4f7f\u7528\u5de5\u5382\u51fd\u6570\u6765\u521b\u5efa\u670d\u52a1\u5b9e\u4f8b.\n\n        Args:\n            key: \u670d\u52a1\u952e\n            factory: \u5de5\u5382\u51fd\u6570\n            service_type: \u670d\u52a1\u7c7b\u578b(\u9ed8\u8ba4\u4e3a\u5de5\u5382\u7684\u8fd4\u56de\u7c7b\u578b)\n            lifetime: \u751f\u547d\u5468\u671f\n            override: \u662f\u5426\u8986\u76d6\u5df2\u5b58\u5728\u7684\u670d\u52a1\n\n        Returns:\n            \u5bb9\u5668\u5b9e\u4f8b(\u652f\u6301\u94fe\u5f0f\u8c03\u7528)\n\n        Raises:\n            RegistrationError: \u6ce8\u518c\u5931\u8d25\u65f6\n\n        Examples:\n            &gt;&gt;&gt; def create_db() -&gt; Database:\n            ...     db = Database()\n            ...     db.connect()\n            ...     return db\n            &gt;&gt;&gt; container.register_factory(\n            ...     \"database\",\n            ...     create_db,\n            ...     lifetime=Lifetime.SINGLETON\n            ... )\n        \"\"\"\n        if key in self._registrations and not override:\n            raise RegistrationError(\n                key,\n                \"Service already registered. Use override=True to replace it.\",\n            )\n\n        service_type = service_type or type(None)\n\n        registration = ServiceRegistration(\n            key=key,\n            service_type=service_type,\n            factory=factory,\n            lifetime=lifetime,\n            override=override,\n        )\n        self._registrations[key] = registration\n\n        return self\n\n    def register_async_factory(\n        self,\n        key: ServiceKey,\n        factory: Callable[..., T],\n        *,\n        service_type: type | None = None,\n        lifetime: Lifetime = Lifetime.TRANSIENT,\n        override: bool = False,\n    ) -&gt; Container:\n        \"\"\"\u6ce8\u518c\u4e00\u4e2a\u5f02\u6b65\u5de5\u5382\u51fd\u6570.\n\n        \u26a0\ufe0f DEPRECATED: \u6b64\u65b9\u6cd5\u5df2\u5e9f\u5f03,\u8bf7\u4f7f\u7528 register_factory() \u4ee3\u66ff\u3002\n        Container \u73b0\u5728\u81ea\u52a8\u68c0\u6d4b\u5de5\u5382\u51fd\u6570\u662f\u5426\u4e3a\u5f02\u6b65\u3002\n\n        Args:\n            key: \u670d\u52a1\u952e\n            factory: \u5f02\u6b65\u5de5\u5382\u51fd\u6570\n            service_type: \u670d\u52a1\u7c7b\u578b\n            lifetime: \u751f\u547d\u5468\u671f\n            override: \u662f\u5426\u8986\u76d6\u5df2\u5b58\u5728\u7684\u670d\u52a1\n\n        Returns:\n            \u5bb9\u5668\u5b9e\u4f8b(\u652f\u6301\u94fe\u5f0f\u8c03\u7528)\n        \"\"\"\n        # \u76f4\u63a5\u8c03\u7528 register_factory,\u5b83\u4f1a\u81ea\u52a8\u68c0\u6d4b\u5f02\u6b65\n        return self.register_factory(\n            key=key,\n            factory=factory,\n            service_type=service_type,\n            lifetime=lifetime,\n            override=override,\n        )\n\n    # ===================== \u89e3\u6790\u65b9\u6cd5 =====================\n\n    def _check_cached_instance(\n        self,\n        key: ServiceKey,\n        registration: ServiceRegistration,\n    ) -&gt; tuple[Any | None, bool]:\n        \"\"\"\u68c0\u67e5\u7f13\u5b58\u7684\u5b9e\u4f8b.\n\n        \u6027\u80fd\u4f18\u5316: \u5355\u4f8b\u8bbf\u95ee\u662f\u6700\u9891\u7e41\u7684\u64cd\u4f5c,\u4f18\u5316\u6b64\u8def\u5f84.\n\n        Args:\n            key: \u670d\u52a1\u952e\n            registration: \u670d\u52a1\u6ce8\u518c\u4fe1\u606f\n\n        Returns:\n            (\u5b9e\u4f8b, \u662f\u5426\u547d\u4e2d\u7f13\u5b58) \u5143\u7ec4\n        \"\"\"\n        # \u6027\u80fd\u4f18\u5316: \u5355\u4f8b\u662f\u6700\u5e38\u89c1\u7684\u60c5\u51b5,\u76f4\u63a5\u8bbf\u95ee\u5b57\u5178\u907f\u514d\u51fd\u6570\u8c03\u7528\u5f00\u9500\n        if registration.lifetime == Lifetime.SINGLETON:\n            # \u76f4\u63a5\u4ece\u5355\u4f8b\u5b58\u50a8\u4e2d\u83b7\u53d6,\u907f\u514d get_instance \u7684\u989d\u5916\u5f00\u9500\n            cached = self._lifetime_manager._singleton_store.get(key)\n            if cached is not None:\n                return cached, True\n\n        elif registration.lifetime == Lifetime.SCOPED:\n            if self._lifetime_manager.has_active_scope():\n                scope = self._lifetime_manager.current_scope\n                if scope is not None:\n                    cached = scope.get(key)\n                    if cached is not None:\n                        return cached, True\n\n        return None, False\n\n    async def _check_cached_instance_async(\n        self,\n        key: ServiceKey,\n        registration: ServiceRegistration,\n    ) -&gt; tuple[Any | None, bool]:\n        \"\"\"\u5f02\u6b65\u68c0\u67e5\u7f13\u5b58\u7684\u5b9e\u4f8b.\n\n        Args:\n            key: \u670d\u52a1\u952e\n            registration: \u670d\u52a1\u6ce8\u518c\u4fe1\u606f\n\n        Returns:\n            (\u5b9e\u4f8b, \u662f\u5426\u547d\u4e2d\u7f13\u5b58) \u5143\u7ec4\n        \"\"\"\n        if registration.lifetime == Lifetime.SINGLETON:\n            # \u68c0\u67e5\u662f\u5426\u5df2\u6709\u7f13\u5b58\n            cached = self._lifetime_manager._singleton_store.get(key)\n            if cached is not None:\n                return cached, True\n            # \u6ca1\u6709\u7f13\u5b58,\u8fd4\u56de None,\u7531\u8c03\u7528\u8005\u521b\u5efa\u5e76\u7f13\u5b58\n            return None, False\n\n        if registration.lifetime == Lifetime.SCOPED and self._lifetime_manager.has_active_scope():\n            scope = self._lifetime_manager.current_scope\n            if scope is not None:\n                cached = scope.get(key)\n                if cached is not None:\n                    return cached, True\n\n        return None, False\n\n    def _run_before_interceptors(self, key: ServiceKey, registration: ServiceRegistration) -&gt; None:\n        \"\"\"\u8fd0\u884c\u524d\u7f6e\u62e6\u622a\u5668.\n\n        Args:\n            key: \u670d\u52a1\u952e\n            registration: \u670d\u52a1\u6ce8\u518c\u4fe1\u606f\n\n        Raises:\n            ResolutionError: \u62e6\u622a\u5668\u62d2\u7edd\u89e3\u6790\u65f6\n        \"\"\"\n        for interceptor in self._interceptors[\"before\"]:\n            if not interceptor(key, registration):\n                raise ResolutionError(key, Exception(\"\u524d\u7f6e\u62e6\u622a\u5668\u62d2\u7edd\u4e86\u89e3\u6790\"))\n\n    def _run_after_interceptors(self, key: ServiceKey, instance: Any) -&gt; Any:\n        \"\"\"\u8fd0\u884c\u540e\u7f6e\u62e6\u622a\u5668.\n\n        Args:\n            key: \u670d\u52a1\u952e\n            instance: \u670d\u52a1\u5b9e\u4f8b\n\n        Returns:\n            \u5904\u7406\u540e\u7684\u5b9e\u4f8b\n        \"\"\"\n        result_instance = instance\n        for interceptor in self._interceptors[\"after\"]:\n            result = interceptor(key, result_instance)\n            if result is not None:\n                result_instance = result\n        return result_instance\n\n    def _run_error_interceptors(self, key: ServiceKey, error: Exception) -&gt; None:\n        \"\"\"\u8fd0\u884c\u9519\u8bef\u62e6\u622a\u5668.\n\n        Args:\n            key: \u670d\u52a1\u952e\n            error: \u5f02\u5e38\u5bf9\u8c61\n        \"\"\"\n        for interceptor in self._interceptors[\"error\"]:\n            interceptor(key, error)\n\n    @overload\n    def resolve(self, key: type[T]) -&gt; T: ...\n\n    @overload\n    def resolve(self, key: str) -&gt; Any: ...\n\n    def resolve(self, key: ServiceKey) -&gt; Any:\n        \"\"\"\u89e3\u6790\u670d\u52a1\u5b9e\u4f8b.\n\n        \u6839\u636e\u670d\u52a1\u952e\u4ece\u5bb9\u5668\u4e2d\u83b7\u53d6\u670d\u52a1\u5b9e\u4f8b. \u8fd9\u662f\u6574\u4e2a DI \u5bb9\u5668\u6700\u6838\u5fc3\u7684\u65b9\u6cd5,\n        \u5305\u542b\u4e86\u5b8c\u6574\u7684\u4f9d\u8d56\u89e3\u6790\u3001\u751f\u547d\u5468\u671f\u7ba1\u7406\u3001\u62e6\u622a\u5668\u6267\u884c\u548c\u6027\u80fd\u8ffd\u8e2a\u903b\u8f91.\n\n        \u5de5\u4f5c\u6d41\u7a0b:\n        1. \u9a8c\u8bc1\u670d\u52a1\u5df2\u6ce8\u518c\n        2. \u6267\u884c\u524d\u7f6e\u62e6\u622a\u5668(\u53ef\u80fd\u62d2\u7edd\u89e3\u6790)\n        3. \u521d\u59cb\u5316\u6027\u80fd\u8ffd\u8e2a(\u5982\u679c\u542f\u7528)\n        4. \u5faa\u73af\u4f9d\u8d56\u68c0\u6d4b\n        5. \u68c0\u67e5\u7f13\u5b58\u5b9e\u4f8b(Singleton/Scoped)\n        6. \u521b\u5efa\u65b0\u5b9e\u4f8b(\u9012\u5f52\u89e3\u6790\u4f9d\u8d56)\n        7. \u5b58\u50a8\u5b9e\u4f8b\u5230\u751f\u547d\u5468\u671f\u7ba1\u7406\u5668\n        8. \u6267\u884c\u540e\u7f6e\u62e6\u622a\u5668\u5e76\u8fd4\u56de\u6700\u7ec8\u5b9e\u4f8b\n\n        Args:\n            key: \u670d\u52a1\u952e(\u53ef\u4ee5\u662f\u7c7b\u578b\u6216\u5b57\u7b26\u4e32)\n\n        Returns:\n            \u89e3\u6790\u5f97\u5230\u7684\u670d\u52a1\u5b9e\u4f8b\n\n        Raises:\n            ServiceNotFoundError: \u670d\u52a1\u672a\u6ce8\u518c\n            CircularDependencyError: \u68c0\u6d4b\u5230\u5faa\u73af\u4f9d\u8d56\n            ResolutionError: \u89e3\u6790\u5931\u8d25(\u4f9d\u8d56\u6ce8\u5165\u9519\u8bef\u3001\u5de5\u5382\u5f02\u5e38\u7b49)\n\n        Examples:\n            &gt;&gt;&gt; container.register(UserService)\n            &gt;&gt;&gt; service = container.resolve(UserService)\n            &gt;&gt;&gt; assert isinstance(service, UserService)\n        \"\"\"\n        # \u6b65\u9aa4 0: \u68c0\u67e5\u662f\u5426\u4e3a\u522b\u540d, \u5982\u679c\u662f\u5219\u8f6c\u6362\u4e3a\u5b9e\u9645\u952e\n        if key in self._aliases:\n            key = self._aliases[key]\n\n        # Handle Lazy types\n        origin = get_origin(key)\n        if origin == LazyTypeMarker:\n            args = get_args(key)\n            if args:\n                inner_key = args[0]\n                return Lazy(inner_key, _resolver=self.resolve)\n            else:\n                raise ResolutionError(key, Exception(\"Lazy type must have arguments\"))\n        if key not in self._registrations:\n            available_services = list(self._registrations.keys())\n            raise ServiceNotFoundError(key, available_services)\n\n        registration = self._registrations[key]\n\n        # \u68c0\u67e5\u662f\u5426\u5c1d\u8bd5\u540c\u6b65\u89e3\u6790\u5f02\u6b65\u670d\u52a1\n        if registration.is_async:\n            raise ResolutionError(\n                key,\n                Exception(f\"Service {key} has async factory, use resolve_async() instead of resolve()\"),\n            )\n\n        # \u6b65\u9aa4 2: \u6267\u884c\u524d\u7f6e\u62e6\u622a\u5668(\u53ef\u80fd\u62d2\u7edd\u89e3\u6790)\n        self._run_before_interceptors(key, registration)\n\n        # \u6b65\u9aa4 3: \u521d\u59cb\u5316\u6027\u80fd\u8ffd\u8e2a(\u5982\u679c\u542f\u7528)\n        timer = ResolutionTimer() if self._enable_performance_tracking else None\n        cache_hit = False\n\n        try:\n            # \u5f00\u59cb\u8ba1\u65f6\n            if timer:\n                timer.__enter__()\n\n            # \u6b65\u9aa4 4: \u5faa\u73af\u4f9d\u8d56\u68c0\u6d4b - \u8fdb\u5165\u89e3\u6790\u5806\u6808\n            self._circular_detector.enter_resolution(key)\n\n            # \u6b65\u9aa4 5: \u68c0\u67e5\u662f\u5426\u6709\u7f13\u5b58\u5b9e\u4f8b(Singleton/Scoped)\n            cached, cache_hit = self._check_cached_instance(key, registration)\n            if cached is not None:\n                return cached\n\n            # \u6b65\u9aa4 6: \u521b\u5efa\u65b0\u5b9e\u4f8b(\u9012\u5f52\u89e3\u6790\u4f9d\u8d56)\n            instance = self._create_instance(registration)\n\n            # \u6b65\u9aa4 7: \u5b58\u50a8\u5b9e\u4f8b\u5230\u751f\u547d\u5468\u671f\u7ba1\u7406\u5668\n            self._lifetime_manager.set_instance(key, instance, registration.lifetime)\n\n            # \u6b65\u9aa4 8: \u6267\u884c\u540e\u7f6e\u62e6\u622a\u5668\u5e76\u8fd4\u56de\u6700\u7ec8\u5b9e\u4f8b\n            return self._run_after_interceptors(key, instance)\n\n        except ContainerException:\n            # \u5bb9\u5668\u5f02\u5e38\u76f4\u63a5\u91cd\u65b0\u629b\u51fa\n            raise\n        except Exception as e:\n            # \u5176\u4ed6\u5f02\u5e38: \u901a\u77e5\u9519\u8bef\u62e6\u622a\u5668\u5e76\u5305\u88c5\u4e3a ResolutionError\n            self._run_error_interceptors(key, e)\n            raise ResolutionError(key, e) from e\n        finally:\n            # \u6e05\u7406\u5de5\u4f5c: \u4ece\u5faa\u73af\u68c0\u6d4b\u5806\u6808\u4e2d\u79fb\u9664\n            self._circular_detector.exit_resolution(key)\n\n            # \u8bb0\u5f55\u6027\u80fd\u6307\u6807(\u5982\u679c\u542f\u7528\u8ffd\u8e2a)\n            if timer:\n                timer.__exit__(None, None, None)\n                self._performance_metrics.record_resolution(\n                    key,\n                    timer.elapsed_time,\n                    cache_hit=cache_hit,\n                )\n\n    @overload\n    async def resolve_async(self, key: type[T]) -&gt; T: ...\n\n    @overload\n    async def resolve_async(self, key: str) -&gt; Any: ...\n\n    async def resolve_async(self, key: ServiceKey) -&gt; Any:\n        \"\"\"\u5f02\u6b65\u89e3\u6790\u670d\u52a1\u5b9e\u4f8b.\n\n        \u4e0e resolve() \u7c7b\u4f3c,\u4f46\u652f\u6301\u5f02\u6b65\u5de5\u5382\u51fd\u6570\u548c\u5f02\u6b65\u4f9d\u8d56\u89e3\u6790.\n        \u53ef\u4ee5\u89e3\u6790\u540c\u6b65\u670d\u52a1(\u81ea\u52a8\u9002\u914d)\u548c\u5f02\u6b65\u670d\u52a1.\n\n        \u5de5\u4f5c\u6d41\u7a0b:\n        1. \u9a8c\u8bc1\u670d\u52a1\u5df2\u6ce8\u518c\n        2. \u6267\u884c\u524d\u7f6e\u62e6\u622a\u5668\n        3. \u521d\u59cb\u5316\u6027\u80fd\u8ffd\u8e2a\n        4. \u5faa\u73af\u4f9d\u8d56\u68c0\u6d4b\n        5. \u68c0\u67e5\u7f13\u5b58\u5b9e\u4f8b\n        6. \u521b\u5efa\u65b0\u5b9e\u4f8b(\u652f\u6301\u5f02\u6b65factory\u548c\u4f9d\u8d56)\n        7. \u5b58\u50a8\u5b9e\u4f8b\u5230\u751f\u547d\u5468\u671f\u7ba1\u7406\u5668\n        8. \u6267\u884c\u540e\u7f6e\u62e6\u622a\u5668\u5e76\u8fd4\u56de\u5b9e\u4f8b\n\n        Args:\n            key: \u670d\u52a1\u952e(\u53ef\u4ee5\u662f\u7c7b\u578b\u6216\u5b57\u7b26\u4e32)\n\n        Returns:\n            \u89e3\u6790\u5f97\u5230\u7684\u670d\u52a1\u5b9e\u4f8b\n\n        Raises:\n            ServiceNotFoundError: \u670d\u52a1\u672a\u6ce8\u518c\n            CircularDependencyError: \u68c0\u6d4b\u5230\u5faa\u73af\u4f9d\u8d56\n            ResolutionError: \u89e3\u6790\u5931\u8d25\n\n        Examples:\n            &gt;&gt;&gt; container.register(AsyncService, factory=create_async_service)\n            &gt;&gt;&gt; service = await container.resolve_async(AsyncService)\n            &gt;&gt;&gt; assert isinstance(service, AsyncService)\n        \"\"\"\n        # \u6b65\u9aa4 0: \u68c0\u67e5\u662f\u5426\u4e3a\u522b\u540d\n        if key in self._aliases:\n            key = self._aliases[key]\n\n        # Handle Lazy types\n        origin = get_origin(key)\n        if origin == LazyTypeMarker:\n            args = get_args(key)\n            if args:\n                inner_key = args[0]\n                return Lazy(inner_key, _resolver=self.resolve_async)\n            else:\n                raise ResolutionError(key, Exception(\"Lazy type must have arguments\"))\n\n        # \u6b65\u9aa4 1: \u9a8c\u8bc1\u670d\u52a1\u5df2\u6ce8\u518c\n        if key not in self._registrations:\n            available_services = list(self._registrations.keys())\n            raise ServiceNotFoundError(key, available_services)\n\n        registration = self._registrations[key]\n\n        # \u6b65\u9aa4 2: \u6267\u884c\u524d\u7f6e\u62e6\u622a\u5668\n        await self._run_before_interceptors_async(key, registration)\n\n        # \u6b65\u9aa4 3: \u521d\u59cb\u5316\u6027\u80fd\u8ffd\u8e2a\n        timer = ResolutionTimer() if self._enable_performance_tracking else None\n        cache_hit = False\n\n        try:\n            if timer:\n                timer.__enter__()\n\n            # \u6b65\u9aa4 4: \u5faa\u73af\u4f9d\u8d56\u68c0\u6d4b\n            self._circular_detector.enter_resolution(key)\n\n            # \u6b65\u9aa4 5: \u68c0\u67e5\u7f13\u5b58\u5b9e\u4f8b(\u5f02\u6b65\u7248\u672c)\n            cached, cache_hit = await self._check_cached_instance_async(key, registration)\n            if cached is not None:\n                return cached\n\n            # \u6b65\u9aa4 6: \u521b\u5efa\u65b0\u5b9e\u4f8b(\u5f02\u6b65)\n            instance = await self._create_instance_async(registration)\n\n            # \u6b65\u9aa4 7: \u5b58\u50a8\u5b9e\u4f8b\n            self._lifetime_manager.set_instance(key, instance, registration.lifetime)\n\n            # \u6b65\u9aa4 8: \u6267\u884c\u540e\u7f6e\u62e6\u622a\u5668\n            return await self._run_after_interceptors_async(key, instance)\n\n        except ContainerException:\n            raise\n        except Exception as e:\n            await self._run_error_interceptors_async(key, e)\n            raise ResolutionError(key, e) from e\n        finally:\n            self._circular_detector.exit_resolution(key)\n\n            if timer:\n                timer.__exit__(None, None, None)\n                self._performance_metrics.record_resolution(\n                    key,\n                    timer.elapsed_time,\n                    cache_hit=cache_hit,\n                )\n\n    def _analyze_service_dependencies(self, registration: ServiceRegistration) -&gt; list[DependencyInfo]:\n        \"\"\"\u5206\u6790\u670d\u52a1\u4f9d\u8d56.\n\n        Args:\n            registration: \u670d\u52a1\u6ce8\u518c\u4fe1\u606f\n\n        Returns:\n            \u4f9d\u8d56\u4fe1\u606f\u5217\u8868\n\n        Raises:\n            ResolutionError: \u5206\u6790\u5931\u8d25\u65f6\n        \"\"\"\n        try:\n            # \u5982\u679c\u662f\u5de5\u5382\u51fd\u6570\uff0c\u5206\u6790\u5176\u53c2\u6570\u4f9d\u8d56\n            if registration.factory is not None:\n                return self._analyze_function_dependencies(registration.factory)\n            # \u5426\u5219\u6309\u6784\u9020\u51fd\u6570\u4f9d\u8d56\u5206\u6790\n            return ConstructorInjector.analyze_dependencies(registration.service_type)\n        except ResolutionError:\n            raise\n        except Exception as e:\n            raise ResolutionError(registration.key, e) from e\n\n    def _analyze_function_dependencies(self, func: Callable[..., Any]) -&gt; list[DependencyInfo]:\n        \"\"\"\u5206\u6790\u5de5\u5382\u51fd\u6570\u53c2\u6570\u4f9d\u8d56.\n\n        \u652f\u6301\u7c7b\u578b\u6ce8\u89e3\u3001Optional\u3001\u9ed8\u8ba4\u503c\u4ee5\u53ca Injected \u6807\u8bb0\u3002\n        \"\"\"\n        dependencies: list[DependencyInfo] = []\n        try:\n            signature = inspect.signature(func)\n            try:\n                type_hints = get_type_hints(func)\n            except Exception:  # noqa: BLE001\n                type_hints = getattr(func, \"__annotations__\", {})\n\n            for param_name, param in signature.parameters.items():\n                # \u8df3\u8fc7 *args/**kwargs \u8fd9\u7c7b\u52a8\u6001\u53c2\u6570\n                if param.kind in (inspect.Parameter.VAR_POSITIONAL, inspect.Parameter.VAR_KEYWORD):\n                    continue\n\n                # \u68c0\u67e5 Injected \u6807\u8bb0\n                is_injected = isinstance(param.default, InjectionMarker)\n\n                # \u5fc5\u987b\u6709\u7c7b\u578b\u6ce8\u89e3\u624d\u80fd\u8fdb\u884c\u4f9d\u8d56\u6ce8\u5165\n                if param.annotation == inspect.Parameter.empty:\n                    continue\n\n                param_type = type_hints.get(param_name, param.annotation)\n\n                # \u7b80\u5355\u7c7b\u578b\u76f4\u63a5\u8df3\u8fc7\n                if ConstructorInjector._is_simple_type(param_type):\n                    continue\n\n                # \u5904\u7406 Optional[T]\n                is_optional, actual_type = ConstructorInjector._extract_optional_type(param_type)\n\n                should_add = is_injected or param.default is inspect.Parameter.empty or is_optional\n                if should_add:\n                    dependencies.append(\n                        DependencyInfo(\n                            parameter_name=param_name,\n                            service_key=actual_type,\n                            service_type=actual_type,\n                            is_optional=is_optional,\n                            default_value=param.default,\n                            is_injected=is_injected,\n                        )\n                    )\n\n            return dependencies\n        except Exception as e:  # noqa: BLE001\n            raise ResolutionError(func, Exception(f\"Failed to analyze factory dependencies: {e!s}\")) from e\n\n    def _resolve_dependencies(self, dependencies: list[DependencyInfo]) -&gt; dict[str, Any]:\n        \"\"\"\u89e3\u6790\u4f9d\u8d56\u53c2\u6570.\n\n        \u6027\u80fd\u4f18\u5316: \u51cf\u5c11\u5f02\u5e38\u5904\u7406\u5f00\u9500,\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\u4f9d\u8d56\u90fd\u80fd\u6b63\u5e38\u89e3\u6790.\n\n        Args:\n            dependencies: \u4f9d\u8d56\u4fe1\u606f\u5217\u8868\n\n        Returns:\n            \u53c2\u6570\u540d\u5230\u5b9e\u4f8b\u7684\u6620\u5c04\n\n        Raises:\n            ServiceNotFoundError: \u5fc5\u9700\u4f9d\u8d56\u672a\u6ce8\u518c\u65f6\n        \"\"\"\n        # \u6027\u80fd\u4f18\u5316: \u9884\u5206\u914d\u5b57\u5178\u5927\u5c0f\n        kwargs: dict[str, Any] = {}\n\n        # \u6027\u80fd\u4f18\u5316: \u5feb\u901f\u8def\u5f84 - \u5927\u90e8\u5206\u670d\u52a1\u6ca1\u6709\u4f9d\u8d56\u6216\u4f9d\u8d56\u5f88\u5c11\n        if not dependencies:\n            return kwargs\n\n        # \u83b7\u53d6\u6ce8\u518c\u8868\u5f15\u7528,\u907f\u514d\u91cd\u590d\u5c5e\u6027\u67e5\u627e\n        registrations = self._registrations\n\n        for dep in dependencies:\n            # \u5148\u89c4\u8303\u5316\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\u670d\u52a1\u952e\u5230\u5df2\u6ce8\u518c\u7c7b\u578b(\u652f\u6301\u5c40\u90e8\u7c7b/\u672a\u6765\u6ce8\u89e3)\n            if isinstance(dep.service_key, str):\n                name = dep.service_key\n                # \u5c1d\u8bd5\u522b\u540d\u5339\u914d\n                if name in self._aliases:\n                    dep.service_key = self._aliases[name]\n                    if isinstance(dep.service_key, type):\n                        dep.service_type = dep.service_key\n                else:\n                    for registered_type in registrations.keys():\n                        if isinstance(registered_type, type):\n                            if (\n                                registered_type.__name__ == name\n                                or registered_type.__qualname__.split(\".\")[-1] == name\n                            ):\n                                dep.service_key = registered_type\n                                dep.service_type = registered_type\n                                break\n\n            # \u5904\u7406 Lazy[T] \u4f9d\u8d56: \u6ce8\u5165 LazyProxy, \u5ef6\u8fdf\u89e3\u6790\u771f\u5b9e\u7c7b\u578b\n            is_lazy = False\n            inner_key = None\n\n            # \u68c0\u67e5 LazyTypeMarker \u5b9e\u4f8b\n            is_lazy_marker = (hasattr(dep.service_key, \"inner_type\") or\n                             (hasattr(dep.service_key, \"__class__\") and\n                              dep.service_key.__class__.__name__ == \"LazyTypeMarker\") or\n                             hasattr(dep.service_type, \"inner_type\") or\n                             (hasattr(dep.service_type, \"__class__\") and\n                              dep.service_type.__class__.__name__ == \"LazyTypeMarker\"))\n\n            if is_lazy_marker:\n                is_lazy = True\n                marker = dep.service_key if (hasattr(dep.service_key, \"inner_type\") or\n                                            (hasattr(dep.service_key, \"__class__\") and\n                                             dep.service_key.__class__.__name__ == \"LazyTypeMarker\")) else dep.service_type\n                inner_key = marker.inner_type\n            # \u68c0\u67e5\u5b57\u7b26\u4e32\u5f62\u5f0f\u7684 Lazy[T]\n            elif (isinstance(dep.service_key, str) and\n                  dep.service_key.startswith(\"Lazy[\") and\n                  dep.service_key.endswith(\"]\")):\n                is_lazy = True\n                inner_name = dep.service_key[5:-1]\n                # \u67e5\u627e\u5339\u914d\u7684\u7c7b\u578b\n                for registered_type in registrations:\n                    if isinstance(registered_type, type) and (\n                        registered_type.__name__ == inner_name or\n                        registered_type.__qualname__.split(\".\")[-1] == inner_name\n                    ):\n                        inner_key = registered_type\n                        break\n                if inner_key is None and inner_name in self._aliases:\n                    inner_key = self._aliases[inner_name]\n\n            if is_lazy and inner_key is not None:                # \u975e\u53ef\u9009\u4f9d\u8d56\u9700\u8981\u786e\u4fdd\u771f\u5b9e\u7c7b\u578b\u5df2\u6ce8\u518c\n                if inner_key not in registrations:\n                    if not dep.is_optional:\n                        raise ServiceNotFoundError(inner_key)\n                    # \u53ef\u9009\u4f9d\u8d56\u4e14\u672a\u6ce8\u518c: \u8df3\u8fc7\u6ce8\u5165\n                    continue\n\n                # \u5982\u679c\u5185\u90e8\u670d\u52a1\u662f\u5f02\u6b65\u7684,\u4f7f\u7528\u5f02\u6b65\u89e3\u6790\u5de5\u5382; \u5426\u5219\u4f7f\u7528\u540c\u6b65\u89e3\u6790\n                inner_reg = registrations.get(inner_key)\n                if inner_reg is not None and inner_reg.is_async:\n                    # \u4f7f\u7528\u9ed8\u8ba4\u53c2\u6570\u6355\u83b7 inner_key,\u907f\u514d\u95ed\u5305\u95ee\u9898\n                    kwargs[dep.parameter_name] = LazyProxy(lambda k=inner_key: self.resolve_async(k))\n                else:\n                    # \u4f7f\u7528\u9ed8\u8ba4\u53c2\u6570\u6355\u83b7 inner_key,\u907f\u514d\u95ed\u5305\u95ee\u9898\n                    kwargs[dep.parameter_name] = LazyProxy(lambda k=inner_key: self.resolve(k))\n                continue\n\n            # \u5e38\u89c4\u4f9d\u8d56\u89e3\u6790\u8def\u5f84\n            if dep.service_key not in registrations:\n                if not dep.is_optional:\n                    raise ServiceNotFoundError(dep.service_key)\n                continue\n\n            try:\n                kwargs[dep.parameter_name] = self.resolve(dep.service_key)\n            except Exception:\n                if not dep.is_optional:\n                    raise\n        return kwargs\n\n    def _invoke_factory(self, registration: ServiceRegistration, kwargs: dict[str, Any]) -&gt; Any:\n        \"\"\"\u8c03\u7528\u5de5\u5382\u521b\u5efa\u5b9e\u4f8b.\n\n        Args:\n            registration: \u670d\u52a1\u6ce8\u518c\u4fe1\u606f\n            kwargs: \u6784\u9020\u53c2\u6570\n\n        Returns:\n            \u521b\u5efa\u7684\u5b9e\u4f8b\n\n        Raises:\n            ResolutionError: \u5de5\u5382\u8c03\u7528\u5931\u8d25\u65f6\n        \"\"\"\n        factory = registration.factory\n        if factory is None:\n            raise ResolutionError(registration.key, Exception(\"No factory defined\"))\n\n        try:\n            if callable(factory):\n                return factory(**kwargs)\n            raise ResolutionError(registration.key, Exception(\"Factory is not callable\"))\n        except ResolutionError:\n            raise\n        except Exception as e:\n            raise ResolutionError(registration.key, e) from e\n\n    def _create_instance(self, registration: ServiceRegistration) -&gt; Any:\n        \"\"\"\u521b\u5efa\u670d\u52a1\u5b9e\u4f8b.\n\n        \u6839\u636e\u6ce8\u518c\u4fe1\u606f\u521b\u5efa\u4e00\u4e2a\u65b0\u5b9e\u4f8b.\n\n        Args:\n            registration: \u670d\u52a1\u6ce8\u518c\u4fe1\u606f\n\n        Returns:\n            \u521b\u5efa\u7684\u5b9e\u4f8b\n\n        Raises:\n            ResolutionError: \u521b\u5efa\u5931\u8d25\u65f6\n        \"\"\"\n        # \u5206\u6790\u4f9d\u8d56\n        dependencies = self._analyze_service_dependencies(registration)\n\n        # \u89e3\u6790\u4f9d\u8d56\n        kwargs = self._resolve_dependencies(dependencies)\n\n        # \u8c03\u7528\u5de5\u5382\u521b\u5efa\u5b9e\u4f8b\n        return self._invoke_factory(registration, kwargs)\n\n    async def _resolve_dependencies_async(self, dependencies: list[DependencyInfo]) -&gt; dict[str, Any]:\n        \"\"\"\u5f02\u6b65\u89e3\u6790\u4f9d\u8d56\u53c2\u6570.\n\n        Args:\n            dependencies: \u4f9d\u8d56\u4fe1\u606f\u5217\u8868\n\n        Returns:\n            \u53c2\u6570\u540d\u5230\u5b9e\u4f8b\u7684\u6620\u5c04\n\n        Raises:\n            ServiceNotFoundError: \u5fc5\u9700\u4f9d\u8d56\u672a\u6ce8\u518c\u65f6\n        \"\"\"\n        kwargs: dict[str, Any] = {}\n        registrations = self._registrations\n        for dep in dependencies:\n            # \u5148\u89c4\u8303\u5316\u53ef\u80fd\u7684\u5b57\u7b26\u4e32\u670d\u52a1\u952e\u5230\u5df2\u6ce8\u518c\u7c7b\u578b(\u652f\u6301\u5c40\u90e8\u7c7b/\u672a\u6765\u6ce8\u89e3)\n            if isinstance(dep.service_key, str):\n                name = dep.service_key\n                if name in self._aliases:\n                    dep.service_key = self._aliases[name]\n                    if isinstance(dep.service_key, type):\n                        dep.service_type = dep.service_key\n                else:\n                    for registered_type in registrations.keys():\n                        if isinstance(registered_type, type):\n                            if (\n                                registered_type.__name__ == name\n                                or registered_type.__qualname__.split(\".\")[-1] == name\n                            ):\n                                dep.service_key = registered_type\n                                dep.service_type = registered_type\n                                break\n\n            # \u5904\u7406 Lazy[T] \u4f9d\u8d56: \u5728\u5f02\u6b65\u4e0a\u4e0b\u6587\u4e2d\u6ce8\u5165 LazyProxy\n            is_lazy = False\n            inner_key = None\n\n            # \u68c0\u67e5 LazyTypeMarker \u5b9e\u4f8b\n            is_lazy_marker = (hasattr(dep.service_key, \"inner_type\") or\n                             (hasattr(dep.service_key, \"__class__\") and\n                              dep.service_key.__class__.__name__ == \"LazyTypeMarker\") or\n                             hasattr(dep.service_type, \"inner_type\") or\n                             (hasattr(dep.service_type, \"__class__\") and\n                              dep.service_type.__class__.__name__ == \"LazyTypeMarker\"))\n\n            if is_lazy_marker:\n                is_lazy = True\n                marker = dep.service_key if (hasattr(dep.service_key, \"inner_type\") or\n                                            (hasattr(dep.service_key, \"__class__\") and\n                                             dep.service_key.__class__.__name__ == \"LazyTypeMarker\")) else dep.service_type\n                inner_key = marker.inner_type\n            # \u68c0\u67e5\u5b57\u7b26\u4e32\u5f62\u5f0f\u7684 Lazy[T]\n            elif (isinstance(dep.service_key, str) and\n                  dep.service_key.startswith(\"Lazy[\") and\n                  dep.service_key.endswith(\"]\")):\n                is_lazy = True\n                inner_name = dep.service_key[5:-1]\n                # \u67e5\u627e\u5339\u914d\u7684\u7c7b\u578b\n                for registered_type in registrations:\n                    if isinstance(registered_type, type) and (\n                        registered_type.__name__ == inner_name or\n                        registered_type.__qualname__.split(\".\")[-1] == inner_name\n                    ):\n                        inner_key = registered_type\n                        break\n                if inner_key is None and inner_name in self._aliases:\n                    inner_key = self._aliases[inner_name]\n\n            if is_lazy and inner_key is not None:\n\n                # \u975e\u53ef\u9009\u4f9d\u8d56\u9700\u8981\u786e\u4fdd\u771f\u5b9e\u7c7b\u578b\u5df2\u6ce8\u518c\n                if inner_key not in registrations:\n                    if not dep.is_optional:\n                        raise ServiceNotFoundError(inner_key)\n                    # \u53ef\u9009\u4f9d\u8d56\u4e14\u672a\u6ce8\u518c: \u8df3\u8fc7\u6ce8\u5165\n                    continue\n\n                # \u5982\u679c\u5185\u90e8\u670d\u52a1\u662f\u5f02\u6b65\u7684,\u4f7f\u7528\u5f02\u6b65\u89e3\u6790\u5de5\u5382; \u5426\u5219\u4f7f\u7528\u540c\u6b65\u89e3\u6790\n                inner_reg = registrations.get(inner_key)\n                if inner_reg is not None and inner_reg.is_async:\n                    # \u4f7f\u7528\u9ed8\u8ba4\u53c2\u6570\u6355\u83b7 inner_key,\u907f\u514d\u95ed\u5305\u95ee\u9898\n                    kwargs[dep.parameter_name] = LazyProxy(lambda k=inner_key: self.resolve_async(k))\n                else:\n                    # \u4f7f\u7528\u9ed8\u8ba4\u53c2\u6570\u6355\u83b7 inner_key,\u907f\u514d\u95ed\u5305\u95ee\u9898\n                    kwargs[dep.parameter_name] = LazyProxy(lambda k=inner_key: self.resolve(k))\n                continue\n\n            # \u5e38\u89c4\u4f9d\u8d56\u89e3\u6790\u8def\u5f84\n            if dep.service_key not in registrations:\n                if not dep.is_optional:\n                    raise ServiceNotFoundError(dep.service_key)\n                continue\n\n            try:\n                # \u5728\u5f02\u6b65\u4e0a\u4e0b\u6587\u4e2d,\u603b\u662f\u4f7f\u7528\u5f02\u6b65\u89e3\u6790\n                kwargs[dep.parameter_name] = await self.resolve_async(dep.service_key)\n            except Exception:\n                if not dep.is_optional:\n                    raise\n        return kwargs\n\n    async def _invoke_factory_async(self, registration: ServiceRegistration, kwargs: dict[str, Any]) -&gt; Any:\n        \"\"\"\u5f02\u6b65\u8c03\u7528\u5de5\u5382\u521b\u5efa\u5b9e\u4f8b.\n\n        Args:\n            registration: \u670d\u52a1\u6ce8\u518c\u4fe1\u606f\n            kwargs: \u6784\u9020\u53c2\u6570\n\n        Returns:\n            \u521b\u5efa\u7684\u5b9e\u4f8b\n\n        Raises:\n            ResolutionError: \u5de5\u5382\u8c03\u7528\u5931\u8d25\u65f6\n        \"\"\"\n        factory = registration.factory\n        if factory is None:\n            raise ResolutionError(registration.key, Exception(\"No factory defined\"))\n\n        try:\n            if callable(factory):\n                if registration.is_async:\n                    # \u5f02\u6b65\u5de5\u5382\n                    return await factory(**kwargs)\n                # \u540c\u6b65\u5de5\u5382\u4e5f\u53ef\u4ee5\u5728\u5f02\u6b65\u4e2d\u8c03\u7528\n                return factory(**kwargs)\n            raise ResolutionError(registration.key, Exception(\"Factory is not callable\"))\n        except ResolutionError:\n            raise\n        except Exception as e:\n            raise ResolutionError(registration.key, e) from e\n\n    async def _create_instance_async(self, registration: ServiceRegistration) -&gt; Any:\n        \"\"\"\u5f02\u6b65\u521b\u5efa\u670d\u52a1\u5b9e\u4f8b.\n\n        \u6839\u636e\u6ce8\u518c\u4fe1\u606f\u521b\u5efa\u4e00\u4e2a\u65b0\u5b9e\u4f8b,\u652f\u6301\u5f02\u6b65factory\u548c\u5f02\u6b65\u4f9d\u8d56.\n\n        Args:\n            registration: \u670d\u52a1\u6ce8\u518c\u4fe1\u606f\n\n        Returns:\n            \u521b\u5efa\u7684\u5b9e\u4f8b\n\n        Raises:\n            ResolutionError: \u521b\u5efa\u5931\u8d25\u65f6\n        \"\"\"\n        # \u5206\u6790\u4f9d\u8d56\n        dependencies = self._analyze_service_dependencies(registration)\n\n        # \u5f02\u6b65\u89e3\u6790\u4f9d\u8d56\n        kwargs = await self._resolve_dependencies_async(dependencies)\n\n        # \u5f02\u6b65\u8c03\u7528\u5de5\u5382\u521b\u5efa\u5b9e\u4f8b\n        return await self._invoke_factory_async(registration, kwargs)\n\n    async def _run_before_interceptors_async(self, key: ServiceKey, registration: ServiceRegistration) -&gt; None:\n        \"\"\"\u5f02\u6b65\u6267\u884c\u524d\u7f6e\u62e6\u622a\u5668.\"\"\"\n        for interceptor in self._interceptors[\"before\"]:\n            if inspect.iscoroutinefunction(interceptor):\n                await interceptor(key, registration)\n            else:\n                interceptor(key, registration)\n\n    async def _run_after_interceptors_async(self, key: ServiceKey, instance: Any) -&gt; Any:\n        \"\"\"\u5f02\u6b65\u6267\u884c\u540e\u7f6e\u62e6\u622a\u5668.\"\"\"\n        result = instance\n        for interceptor in self._interceptors[\"after\"]:\n            if inspect.iscoroutinefunction(interceptor):\n                result = await interceptor(key, result) or result\n            else:\n                result = interceptor(key, result) or result\n        return result\n\n    async def _run_error_interceptors_async(self, key: ServiceKey, error: Exception) -&gt; None:\n        \"\"\"\u5f02\u6b65\u6267\u884c\u9519\u8bef\u62e6\u622a\u5668.\"\"\"\n        for interceptor in self._interceptors[\"error\"]:\n            if inspect.iscoroutinefunction(interceptor):\n                await interceptor(key, error)\n            else:\n                interceptor(key, error)\n\n    # ===================== \u4f5c\u7528\u57df\u65b9\u6cd5 =====================\n\n    def try_resolve(self, key: ServiceKey, default: T | None = None) -&gt; T | None:\n        \"\"\"\u5c1d\u8bd5\u89e3\u6790\u670d\u52a1,\u5931\u8d25\u8fd4\u56de\u9ed8\u8ba4\u503c.\n\n        Args:\n            key: \u670d\u52a1\u952e\n            default: \u5931\u8d25\u65f6\u7684\u9ed8\u8ba4\u503c\n\n        Returns:\n            \u670d\u52a1\u5b9e\u4f8b\u6216\u9ed8\u8ba4\u503c\n\n        Examples:\n            &gt;&gt;&gt; service = container.try_resolve(OptionalService)\n            &gt;&gt;&gt; if service is None:\n            ...     print(\"Service not found\")\n        \"\"\"\n        try:\n            return self.resolve(key)  # type: ignore[return-value]\n        except (ServiceNotFoundError, ResolutionError):\n            return default\n\n    async def try_resolve_async(self, key: ServiceKey, default: T | None = None) -&gt; T | None:\n        \"\"\"\u5f02\u6b65\u5c1d\u8bd5\u89e3\u6790\u670d\u52a1,\u5931\u8d25\u8fd4\u56de\u9ed8\u8ba4\u503c.\n\n        Args:\n            key: \u670d\u52a1\u952e\n            default: \u5931\u8d25\u65f6\u7684\u9ed8\u8ba4\u503c\n\n        Returns:\n            \u670d\u52a1\u5b9e\u4f8b\u6216\u9ed8\u8ba4\u503c\n\n        Examples:\n            &gt;&gt;&gt; service = await container.try_resolve_async(OptionalService)\n            &gt;&gt;&gt; if service is None:\n            ...     print(\"Service not found\")\n        \"\"\"\n        try:\n            return await self.resolve_async(key)  # type: ignore[return-value]\n        except (ServiceNotFoundError, ResolutionError):\n            return default\n\n    def unregister(self, key: ServiceKey) -&gt; bool:\n        \"\"\"\u5220\u9664\u670d\u52a1\u6ce8\u518c.\n\n        Args:\n            key: \u670d\u52a1\u952e\n\n        Returns:\n            \u662f\u5426\u6210\u529f\u5220\u9664\n\n        Examples:\n            &gt;&gt;&gt; container.register(Service)\n            &gt;&gt;&gt; container.unregister(Service)\n            True\n        \"\"\"\n        # \u89e3\u6790\u522b\u540d\n        actual_key = self._aliases.get(key, key) if isinstance(key, str) else key\n\n        if actual_key in self._registrations:\n            del self._registrations[actual_key]\n            # \u6e05\u7406\u8be5\u670d\u52a1\u7684\u5b9e\u4f8b\n            self._lifetime_manager.remove_instance(actual_key)\n            return True\n        return False\n\n    def clear(self, lifetime: Lifetime | None = None) -&gt; None:\n        \"\"\"\u6e05\u7a7a\u5bb9\u5668\u4e2d\u7684\u670d\u52a1.\n\n        Args:\n            lifetime: \u53ef\u9009,\u4ec5\u6e05\u7a7a\u6307\u5b9a\u751f\u547d\u5468\u671f\u7684\u670d\u52a1\n\n        Examples:\n            &gt;&gt;&gt; container.clear()  # \u6e05\u7a7a\u6240\u6709\n            &gt;&gt;&gt; container.clear(Lifetime.TRANSIENT)  # \u4ec5\u6e05\u7a7a Transient\n        \"\"\"\n        if lifetime is None:\n            # \u6e05\u7a7a\u6240\u6709\n            self._registrations.clear()\n            self._aliases.clear()\n            self._lifetime_manager.clear()\n        else:\n            # \u6e05\u7a7a\u6307\u5b9a\u751f\u547d\u5468\u671f\n            to_remove = [key for key, reg in self._registrations.items() if reg.lifetime == lifetime]\n            for key in to_remove:\n                self.unregister(key)\n\n    def replace(self, old_key: ServiceKey, new_service_type: type) -&gt; None:\n        \"\"\"\u66ff\u6362\u5df2\u6ce8\u518c\u7684\u670d\u52a1.\n\n        Args:\n            old_key: \u65e7\u670d\u52a1\u952e\n            new_service_type: \u65b0\u670d\u52a1\u7c7b\u578b\n\n        Raises:\n            ServiceNotFoundError: \u65e7\u670d\u52a1\u4e0d\u5b58\u5728\u65f6\n\n        Examples:\n            &gt;&gt;&gt; container.replace(OldService, NewService)\n        \"\"\"\n        if old_key not in self._registrations:\n            raise ServiceNotFoundError(old_key, list(self._registrations.keys()))\n\n        old_reg = self._registrations[old_key]\n        self.unregister(old_key)\n        self.register(\n            new_service_type,\n            key=old_key,\n            lifetime=old_reg.lifetime,\n            override=True,\n        )\n\n    def has(self, key: ServiceKey) -&gt; bool:\n        \"\"\"\u68c0\u67e5\u670d\u52a1\u662f\u5426\u5df2\u6ce8\u518c(is_registered\u7684\u522b\u540d).\n\n        Args:\n            key: \u670d\u52a1\u952e\n\n        Returns:\n            \u662f\u5426\u5df2\u6ce8\u518c\n\n        Examples:\n            &gt;&gt;&gt; container.has(UserService)\n            True\n        \"\"\"\n        return self.is_registered(key)\n\n    def alias(self, key: ServiceKey, alias: str) -&gt; Container:\n        \"\"\"\u4e3a\u670d\u52a1\u521b\u5efa\u522b\u540d.\n\n        Args:\n            key: \u539f\u59cb\u670d\u52a1\u952e\n            alias: \u522b\u540d\n\n        Returns:\n            \u5bb9\u5668\u5b9e\u4f8b(\u652f\u6301\u94fe\u5f0f\u8c03\u7528)\n\n        Raises:\n            ServiceNotFoundError: \u670d\u52a1\u4e0d\u5b58\u5728\u65f6\n\n        Examples:\n            &gt;&gt;&gt; container.alias(DatabaseService, \"db\")\n            &gt;&gt;&gt; db = container.resolve(\"db\")\n        \"\"\"\n        if key not in self._registrations:\n            raise ServiceNotFoundError(key, list(self._registrations.keys()))\n\n        self._aliases[alias] = key\n        return self\n\n    def scan(self, package: str | Path) -&gt; Container:\n        \"\"\"\u626b\u63cf\u5305\u5e76\u81ea\u52a8\u6ce8\u518c\u6240\u6709\u5e26\u88c5\u9970\u5668\u7684\u670d\u52a1.\n\n        Args:\n            package: \u5305\u540d\u6216\u8def\u5f84\n\n        Returns:\n            \u5bb9\u5668\u5b9e\u4f8b(\u652f\u6301\u94fe\u5f0f\u8c03\u7528)\n\n        Examples:\n            &gt;&gt;&gt; container.scan(\"myapp.services\")\n            &gt;&gt;&gt; container.scan(Path(\"./services\"))\n        \"\"\"\n        import contextlib\n\n        from .decorators import auto_register, is_injectable\n\n        if isinstance(package, Path):\n            # \u8def\u5f84\u626b\u63cf\n            package_str = str(package.absolute())\n            spec = importlib.util.spec_from_file_location(\"__scan_module__\", package_str)\n            if spec and spec.loader:\n                module = importlib.util.module_from_spec(spec)\n                spec.loader.exec_module(module)\n                for name in dir(module):\n                    obj = getattr(module, name)\n                    if is_injectable(obj):\n                        auto_register(self, obj)\n        else:\n            # \u5305\u540d\u626b\u63cf\n            with contextlib.suppress(ImportError):\n                module = importlib.import_module(package)\n                for _, name, _ in pkgutil.walk_packages(\n                    module.__path__,\n                    prefix=f\"{package}.\",\n                ):\n                    with contextlib.suppress(ImportError, AttributeError):\n                        sub_module = importlib.import_module(name)\n                        for attr_name in dir(sub_module):\n                            obj = getattr(sub_module, attr_name)\n                            if is_injectable(obj):\n                                auto_register(self, obj)\n\n        return self\n\n    def warmup(self, *keys: ServiceKey) -&gt; None:\n        \"\"\"\u9884\u70ed\u670d\u52a1,\u63d0\u524d\u521b\u5efa\u5355\u4f8b\u5b9e\u4f8b.\n\n        Args:\n            *keys: \u8981\u9884\u70ed\u7684\u670d\u52a1\u952e,\u4e0d\u63d0\u4f9b\u5219\u9884\u70ed\u6240\u6709\u5355\u4f8b\n\n        Examples:\n            &gt;&gt;&gt; container.warmup(DatabaseService, CacheService)\n            &gt;&gt;&gt; container.warmup()  # \u9884\u70ed\u6240\u6709\u5355\u4f8b\n        \"\"\"\n        import contextlib\n\n        if not keys:\n            # \u9884\u70ed\u6240\u6709\u5355\u4f8b\n            keys = tuple(key for key, reg in self._registrations.items() if reg.lifetime == Lifetime.SINGLETON)\n\n        for key in keys:\n            # \u9884\u70ed\u5931\u8d25\u4e0d\u5f71\u54cd\u540e\u7eed\u670d\u52a1\n            with contextlib.suppress(ContainerException, ResolutionError):\n                self.resolve(key)\n\n    async def warmup_async(self, *keys: ServiceKey) -&gt; None:\n        \"\"\"\u5f02\u6b65\u9884\u70ed\u670d\u52a1,\u63d0\u524d\u521b\u5efa\u5355\u4f8b\u5b9e\u4f8b.\n\n        Args:\n            *keys: \u8981\u9884\u70ed\u7684\u670d\u52a1\u952e,\u4e0d\u63d0\u4f9b\u5219\u9884\u70ed\u6240\u6709\u5355\u4f8b\n\n        Examples:\n            &gt;&gt;&gt; await container.warmup_async(DatabaseService, CacheService)\n            &gt;&gt;&gt; await container.warmup_async()  # \u9884\u70ed\u6240\u6709\u5355\u4f8b\n        \"\"\"\n        import contextlib\n\n        if not keys:\n            # \u9884\u70ed\u6240\u6709\u5355\u4f8b\n            keys = tuple(key for key, reg in self._registrations.items() if reg.lifetime == Lifetime.SINGLETON)\n\n        for key in keys:\n            # \u9884\u70ed\u5931\u8d25\u4e0d\u5f71\u54cd\u540e\u7eed\u670d\u52a1\n            with contextlib.suppress(ContainerException, ResolutionError):\n                await self.resolve_async(key)\n\n    def __getitem__(self, key: ServiceKey) -&gt; Any:\n        \"\"\"\u7b80\u5199\u8bed\u6cd5: container[Service].\n\n        Args:\n            key: \u670d\u52a1\u952e\n\n        Returns:\n            \u670d\u52a1\u5b9e\u4f8b\n\n        Examples:\n            &gt;&gt;&gt; service = container[UserService]\n        \"\"\"\n        return self.resolve(key)\n\n    def __setitem__(self, key: ServiceKey, value: Any) -&gt; None:\n        \"\"\"\u7b80\u5199\u8bed\u6cd5: container[\"key\"] = instance.\n\n        Args:\n            key: \u670d\u52a1\u952e\n            value: \u670d\u52a1\u5b9e\u4f8b\u6216\u7c7b\u578b\n\n        Examples:\n            &gt;&gt;&gt; container[\"config\"] = config_obj\n            &gt;&gt;&gt; container[IService] = ServiceImpl\n        \"\"\"\n        if isinstance(value, type):\n            self.register(value, key=key, override=True)\n        else:\n            self.register_instance(key, value, override=True)\n\n    # ===================== \u4f5c\u7528\u57df\u65b9\u6cd5 =====================\n\n    def create_scope(self) -&gt; Scope:\n        \"\"\"\u521b\u5efa\u65b0\u7684\u4f5c\u7528\u57df.\n\n        \u7528\u4e8e\u7ba1\u7406 SCOPED \u751f\u547d\u5468\u671f\u7684\u670d\u52a1.\n\n        Returns:\n            \u4f5c\u7528\u57df\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\n\n        Examples:\n            &gt;&gt;&gt; with container.create_scope() as scope:\n            ...     service = scope.resolve(ScopedService)\n            ...     # \u5728\u4f5c\u7528\u57df\u5185\u4f7f\u7528\u670d\u52a1\n        \"\"\"\n        return Scope(self)\n\n    # ===================== \u62e6\u622a\u5668\u65b9\u6cd5 =====================\n\n    def add_interceptor(\n        self,\n        interceptor_type: str,\n        interceptor: Any,\n    ) -&gt; Container:\n        \"\"\"\u6dfb\u52a0\u62e6\u622a\u5668.\n\n        \u652f\u6301 \"before\", \"after\", \"error\" \u4e09\u79cd\u7c7b\u578b.\n\n        Args:\n            interceptor_type: \u62e6\u622a\u5668\u7c7b\u578b\n            interceptor: \u62e6\u622a\u5668\u51fd\u6570\n\n        Returns:\n            \u5bb9\u5668\u5b9e\u4f8b(\u652f\u6301\u94fe\u5f0f\u8c03\u7528)\n\n        Raises:\n            ValueError: \u62e6\u622a\u5668\u7c7b\u578b\u65e0\u6548\u65f6\n\n        Examples:\n            &gt;&gt;&gt; def log_before(key, registration):\n            ...     print(f\"\u89e3\u6790: {key}\")\n            ...     return True\n            &gt;&gt;&gt; container.add_interceptor(\"before\", log_before)\n        \"\"\"\n        if interceptor_type not in self._interceptors:\n            msg = f\"Invalid interceptor type: {interceptor_type}\"\n            raise ValueError(msg)\n\n        self._interceptors[interceptor_type].append(interceptor)\n        return self\n\n    # ===================== \u5de5\u5177\u65b9\u6cd5 =====================\n\n    def is_registered(self, key: ServiceKey) -&gt; bool:\n        \"\"\"\u68c0\u67e5\u670d\u52a1\u662f\u5426\u5df2\u6ce8\u518c.\n\n        Args:\n            key: \u670d\u52a1\u952e\u6216\u522b\u540d\n\n        Returns:\n            \u662f\u5426\u5df2\u6ce8\u518c\n        \"\"\"\n        return key in self._registrations or key in self._aliases\n\n    def get_registration(self, key: ServiceKey) -&gt; ServiceRegistration | None:\n        \"\"\"\u83b7\u53d6\u670d\u52a1\u6ce8\u518c\u4fe1\u606f.\n\n        Args:\n            key: \u670d\u52a1\u952e\n\n        Returns:\n            \u6ce8\u518c\u4fe1\u606f\u6216 None\n        \"\"\"\n        return self._registrations.get(key)\n\n    def get_all_registrations(self) -&gt; dict[ServiceKey, ServiceRegistration]:\n        \"\"\"\u83b7\u53d6\u6240\u6709\u6ce8\u518c\u4fe1\u606f.\n\n        Returns:\n            \u6240\u6709\u6ce8\u518c\u4fe1\u606f\u7684\u5b57\u5178\n        \"\"\"\n        return self._registrations.copy()\n\n    def get_performance_stats(self) -&gt; dict[str, Any]:\n        \"\"\"\u83b7\u53d6\u6027\u80fd\u7edf\u8ba1\u4fe1\u606f.\n\n        \u8fd4\u56de\u5bb9\u5668\u7684\u6027\u80fd\u6307\u6807,\u5305\u62ec\u89e3\u6790\u6b21\u6570,\u7f13\u5b58\u547d\u4e2d\u7387\u7b49.\n\n        Returns:\n            \u5305\u542b\u6027\u80fd\u6307\u6807\u7684\u5b57\u5178\n\n        Examples:\n            &gt;&gt;&gt; container = Container(enable_performance_tracking=True)\n            &gt;&gt;&gt; container.register(UserService)\n            &gt;&gt;&gt; container.resolve(UserService)\n            &gt;&gt;&gt; stats = container.get_performance_stats()\n            &gt;&gt;&gt; print(f\"Total resolutions: {stats['total_resolutions']}\")\n        \"\"\"\n        return self._performance_metrics.get_stats()\n\n    def reset_performance_metrics(self) -&gt; None:\n        \"\"\"\u91cd\u7f6e\u6027\u80fd\u6307\u6807.\n\n        \u6e05\u7a7a\u6240\u6709\u5df2\u8bb0\u5f55\u7684\u6027\u80fd\u6570\u636e.\n        \"\"\"\n        self._performance_metrics.reset()\n\n    def dispose(self) -&gt; None:\n        \"\"\"\u91ca\u653e\u5bb9\u5668\u53ca\u5176\u6240\u6709\u8d44\u6e90.\n\n        \u5305\u62ec\u5355\u4f8b\u5b9e\u4f8b,\u4f5c\u7528\u57df\u7b49.\n        \"\"\"\n        self._lifetime_manager.dispose_all()\n        self._registrations.clear()\n        self._interceptors.clear()\n        self._circular_detector.reset()\n        self._performance_metrics.reset()\n\n    def __enter__(self) -&gt; Container:\n        \"\"\"\u652f\u6301\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u534f\u8bae.\"\"\"\n        return self\n\n    def __exit__(self, exc_type: Any, exc_val: Any, exc_tb: Any) -&gt; None:\n        \"\"\"\u79bb\u5f00\u4e0a\u4e0b\u6587\u65f6\u91ca\u653e\u8d44\u6e90.\"\"\"\n        self.dispose()\n\n    async def __aenter__(self) -&gt; Container:\n        \"\"\"\u652f\u6301\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u534f\u8bae.\"\"\"\n        return self\n\n    async def __aexit__(self, exc_type: Any, exc_val: Any, exc_tb: Any) -&gt; None:\n        \"\"\"\u79bb\u5f00\u5f02\u6b65\u4e0a\u4e0b\u6587\u65f6\u91ca\u653e\u8d44\u6e90.\"\"\"\n        self.dispose()\n</code></pre>"},{"location":"zh/guaids/container/#symphra_container.container.Container.__aenter__","title":"<code>__aenter__()</code>  <code>async</code>","text":"<p>\u652f\u6301\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u534f\u8bae.</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/container.py</code> <pre><code>async def __aenter__(self) -&gt; Container:\n    \"\"\"\u652f\u6301\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u534f\u8bae.\"\"\"\n    return self\n</code></pre>"},{"location":"zh/guaids/container/#symphra_container.container.Container.__aexit__","title":"<code>__aexit__(exc_type, exc_val, exc_tb)</code>  <code>async</code>","text":"<p>\u79bb\u5f00\u5f02\u6b65\u4e0a\u4e0b\u6587\u65f6\u91ca\u653e\u8d44\u6e90.</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/container.py</code> <pre><code>async def __aexit__(self, exc_type: Any, exc_val: Any, exc_tb: Any) -&gt; None:\n    \"\"\"\u79bb\u5f00\u5f02\u6b65\u4e0a\u4e0b\u6587\u65f6\u91ca\u653e\u8d44\u6e90.\"\"\"\n    self.dispose()\n</code></pre>"},{"location":"zh/guaids/container/#symphra_container.container.Container.__enter__","title":"<code>__enter__()</code>","text":"<p>\u652f\u6301\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u534f\u8bae.</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/container.py</code> <pre><code>def __enter__(self) -&gt; Container:\n    \"\"\"\u652f\u6301\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u534f\u8bae.\"\"\"\n    return self\n</code></pre>"},{"location":"zh/guaids/container/#symphra_container.container.Container.__exit__","title":"<code>__exit__(exc_type, exc_val, exc_tb)</code>","text":"<p>\u79bb\u5f00\u4e0a\u4e0b\u6587\u65f6\u91ca\u653e\u8d44\u6e90.</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/container.py</code> <pre><code>def __exit__(self, exc_type: Any, exc_val: Any, exc_tb: Any) -&gt; None:\n    \"\"\"\u79bb\u5f00\u4e0a\u4e0b\u6587\u65f6\u91ca\u653e\u8d44\u6e90.\"\"\"\n    self.dispose()\n</code></pre>"},{"location":"zh/guaids/container/#symphra_container.container.Container.__getitem__","title":"<code>__getitem__(key)</code>","text":"<p>\u7b80\u5199\u8bed\u6cd5: container[Service].</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>key</code> <code>ServiceKey</code> <p>\u670d\u52a1\u952e</p> \u5fc5\u9700 <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>Any</code> <p>\u670d\u52a1\u5b9e\u4f8b</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>&gt;&gt;&gt; service = container[UserService]\n</code></pre> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/container.py</code> <pre><code>def __getitem__(self, key: ServiceKey) -&gt; Any:\n    \"\"\"\u7b80\u5199\u8bed\u6cd5: container[Service].\n\n    Args:\n        key: \u670d\u52a1\u952e\n\n    Returns:\n        \u670d\u52a1\u5b9e\u4f8b\n\n    Examples:\n        &gt;&gt;&gt; service = container[UserService]\n    \"\"\"\n    return self.resolve(key)\n</code></pre>"},{"location":"zh/guaids/container/#symphra_container.container.Container.__init__","title":"<code>__init__(enable_auto_wiring=False, strict_mode=False, enable_performance_tracking=False)</code>","text":"<p>\u521d\u59cb\u5316\u5bb9\u5668.</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>enable_auto_wiring</code> <code>bool</code> <p>\u662f\u5426\u542f\u7528\u81ea\u52a8\u88c5\u914d</p> <code>False</code> <code>strict_mode</code> <code>bool</code> <p>\u662f\u5426\u542f\u7528\u4e25\u683c\u6a21\u5f0f</p> <code>False</code> <code>enable_performance_tracking</code> <code>bool</code> <p>\u662f\u5426\u542f\u7528\u6027\u80fd\u8ddf\u8e2a</p> <code>False</code> <p>\u5f15\u53d1\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>InvalidConfigurationError</code> <p>\u914d\u7f6e\u65e0\u6548\u65f6</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/container.py</code> <pre><code>def __init__(\n    self,\n    enable_auto_wiring: bool = False,\n    strict_mode: bool = False,\n    enable_performance_tracking: bool = False,\n) -&gt; None:\n    \"\"\"\u521d\u59cb\u5316\u5bb9\u5668.\n\n    Args:\n        enable_auto_wiring: \u662f\u5426\u542f\u7528\u81ea\u52a8\u88c5\u914d\n        strict_mode: \u662f\u5426\u542f\u7528\u4e25\u683c\u6a21\u5f0f\n        enable_performance_tracking: \u662f\u5426\u542f\u7528\u6027\u80fd\u8ddf\u8e2a\n\n    Raises:\n        InvalidConfigurationError: \u914d\u7f6e\u65e0\u6548\u65f6\n    \"\"\"\n    # \u68c0\u67e5\u914d\u7f6e\u6709\u6548\u6027\n    if enable_auto_wiring and strict_mode:\n        msg = \"Cannot enable both auto_wiring and strict_mode simultaneously\"\n        raise InvalidConfigurationError(\n            msg,\n        )\n\n    self._registrations: dict[ServiceKey, ServiceRegistration] = {}\n    self._lifetime_manager = LifetimeManager()\n    self._interceptors: dict[str, list[Any]] = {\n        \"before\": [],\n        \"after\": [],\n        \"error\": [],\n    }\n    self._circular_detector = CircularDependencyDetector()\n    self._performance_metrics = PerformanceMetrics()\n    self._enable_performance_tracking = enable_performance_tracking\n    self.enable_auto_wiring = enable_auto_wiring\n    self.strict_mode = strict_mode\n    # \u522b\u540d\u6620\u5c04: \u522b\u540d -&gt; \u5b9e\u9645\u952e\n    self._aliases: dict[str, ServiceKey] = {}\n</code></pre>"},{"location":"zh/guaids/container/#symphra_container.container.Container.__setitem__","title":"<code>__setitem__(key, value)</code>","text":"<p>\u7b80\u5199\u8bed\u6cd5: container[\"key\"] = instance.</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>key</code> <code>ServiceKey</code> <p>\u670d\u52a1\u952e</p> \u5fc5\u9700 <code>value</code> <code>Any</code> <p>\u670d\u52a1\u5b9e\u4f8b\u6216\u7c7b\u578b</p> \u5fc5\u9700 <p>\u793a\u4f8b\uff1a</p> <pre><code>&gt;&gt;&gt; container[\"config\"] = config_obj\n&gt;&gt;&gt; container[IService] = ServiceImpl\n</code></pre> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/container.py</code> <pre><code>def __setitem__(self, key: ServiceKey, value: Any) -&gt; None:\n    \"\"\"\u7b80\u5199\u8bed\u6cd5: container[\"key\"] = instance.\n\n    Args:\n        key: \u670d\u52a1\u952e\n        value: \u670d\u52a1\u5b9e\u4f8b\u6216\u7c7b\u578b\n\n    Examples:\n        &gt;&gt;&gt; container[\"config\"] = config_obj\n        &gt;&gt;&gt; container[IService] = ServiceImpl\n    \"\"\"\n    if isinstance(value, type):\n        self.register(value, key=key, override=True)\n    else:\n        self.register_instance(key, value, override=True)\n</code></pre>"},{"location":"zh/guaids/container/#symphra_container.container.Container.add_interceptor","title":"<code>add_interceptor(interceptor_type, interceptor)</code>","text":"<p>\u6dfb\u52a0\u62e6\u622a\u5668.</p> <p>\u652f\u6301 \"before\", \"after\", \"error\" \u4e09\u79cd\u7c7b\u578b.</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>interceptor_type</code> <code>str</code> <p>\u62e6\u622a\u5668\u7c7b\u578b</p> \u5fc5\u9700 <code>interceptor</code> <code>Any</code> <p>\u62e6\u622a\u5668\u51fd\u6570</p> \u5fc5\u9700 <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>Container</code> <p>\u5bb9\u5668\u5b9e\u4f8b(\u652f\u6301\u94fe\u5f0f\u8c03\u7528)</p> <p>\u5f15\u53d1\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>ValueError</code> <p>\u62e6\u622a\u5668\u7c7b\u578b\u65e0\u6548\u65f6</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>&gt;&gt;&gt; def log_before(key, registration):\n...     print(f\"\u89e3\u6790: {key}\")\n...     return True\n&gt;&gt;&gt; container.add_interceptor(\"before\", log_before)\n</code></pre> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/container.py</code> <pre><code>def add_interceptor(\n    self,\n    interceptor_type: str,\n    interceptor: Any,\n) -&gt; Container:\n    \"\"\"\u6dfb\u52a0\u62e6\u622a\u5668.\n\n    \u652f\u6301 \"before\", \"after\", \"error\" \u4e09\u79cd\u7c7b\u578b.\n\n    Args:\n        interceptor_type: \u62e6\u622a\u5668\u7c7b\u578b\n        interceptor: \u62e6\u622a\u5668\u51fd\u6570\n\n    Returns:\n        \u5bb9\u5668\u5b9e\u4f8b(\u652f\u6301\u94fe\u5f0f\u8c03\u7528)\n\n    Raises:\n        ValueError: \u62e6\u622a\u5668\u7c7b\u578b\u65e0\u6548\u65f6\n\n    Examples:\n        &gt;&gt;&gt; def log_before(key, registration):\n        ...     print(f\"\u89e3\u6790: {key}\")\n        ...     return True\n        &gt;&gt;&gt; container.add_interceptor(\"before\", log_before)\n    \"\"\"\n    if interceptor_type not in self._interceptors:\n        msg = f\"Invalid interceptor type: {interceptor_type}\"\n        raise ValueError(msg)\n\n    self._interceptors[interceptor_type].append(interceptor)\n    return self\n</code></pre>"},{"location":"zh/guaids/container/#symphra_container.container.Container.alias","title":"<code>alias(key, alias)</code>","text":"<p>\u4e3a\u670d\u52a1\u521b\u5efa\u522b\u540d.</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>key</code> <code>ServiceKey</code> <p>\u539f\u59cb\u670d\u52a1\u952e</p> \u5fc5\u9700 <code>alias</code> <code>str</code> <p>\u522b\u540d</p> \u5fc5\u9700 <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>Container</code> <p>\u5bb9\u5668\u5b9e\u4f8b(\u652f\u6301\u94fe\u5f0f\u8c03\u7528)</p> <p>\u5f15\u53d1\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>ServiceNotFoundError</code> <p>\u670d\u52a1\u4e0d\u5b58\u5728\u65f6</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>&gt;&gt;&gt; container.alias(DatabaseService, \"db\")\n&gt;&gt;&gt; db = container.resolve(\"db\")\n</code></pre> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/container.py</code> <pre><code>def alias(self, key: ServiceKey, alias: str) -&gt; Container:\n    \"\"\"\u4e3a\u670d\u52a1\u521b\u5efa\u522b\u540d.\n\n    Args:\n        key: \u539f\u59cb\u670d\u52a1\u952e\n        alias: \u522b\u540d\n\n    Returns:\n        \u5bb9\u5668\u5b9e\u4f8b(\u652f\u6301\u94fe\u5f0f\u8c03\u7528)\n\n    Raises:\n        ServiceNotFoundError: \u670d\u52a1\u4e0d\u5b58\u5728\u65f6\n\n    Examples:\n        &gt;&gt;&gt; container.alias(DatabaseService, \"db\")\n        &gt;&gt;&gt; db = container.resolve(\"db\")\n    \"\"\"\n    if key not in self._registrations:\n        raise ServiceNotFoundError(key, list(self._registrations.keys()))\n\n    self._aliases[alias] = key\n    return self\n</code></pre>"},{"location":"zh/guaids/container/#symphra_container.container.Container.clear","title":"<code>clear(lifetime=None)</code>","text":"<p>\u6e05\u7a7a\u5bb9\u5668\u4e2d\u7684\u670d\u52a1.</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>lifetime</code> <code>Lifetime | None</code> <p>\u53ef\u9009,\u4ec5\u6e05\u7a7a\u6307\u5b9a\u751f\u547d\u5468\u671f\u7684\u670d\u52a1</p> <code>None</code> <p>\u793a\u4f8b\uff1a</p> <pre><code>&gt;&gt;&gt; container.clear()  # \u6e05\u7a7a\u6240\u6709\n&gt;&gt;&gt; container.clear(Lifetime.TRANSIENT)  # \u4ec5\u6e05\u7a7a Transient\n</code></pre> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/container.py</code> <pre><code>def clear(self, lifetime: Lifetime | None = None) -&gt; None:\n    \"\"\"\u6e05\u7a7a\u5bb9\u5668\u4e2d\u7684\u670d\u52a1.\n\n    Args:\n        lifetime: \u53ef\u9009,\u4ec5\u6e05\u7a7a\u6307\u5b9a\u751f\u547d\u5468\u671f\u7684\u670d\u52a1\n\n    Examples:\n        &gt;&gt;&gt; container.clear()  # \u6e05\u7a7a\u6240\u6709\n        &gt;&gt;&gt; container.clear(Lifetime.TRANSIENT)  # \u4ec5\u6e05\u7a7a Transient\n    \"\"\"\n    if lifetime is None:\n        # \u6e05\u7a7a\u6240\u6709\n        self._registrations.clear()\n        self._aliases.clear()\n        self._lifetime_manager.clear()\n    else:\n        # \u6e05\u7a7a\u6307\u5b9a\u751f\u547d\u5468\u671f\n        to_remove = [key for key, reg in self._registrations.items() if reg.lifetime == lifetime]\n        for key in to_remove:\n            self.unregister(key)\n</code></pre>"},{"location":"zh/guaids/container/#symphra_container.container.Container.create_scope","title":"<code>create_scope()</code>","text":"<p>\u521b\u5efa\u65b0\u7684\u4f5c\u7528\u57df.</p> <p>\u7528\u4e8e\u7ba1\u7406 SCOPED \u751f\u547d\u5468\u671f\u7684\u670d\u52a1.</p> <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>Scope</code> <p>\u4f5c\u7528\u57df\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>&gt;&gt;&gt; with container.create_scope() as scope:\n...     service = scope.resolve(ScopedService)\n...     # \u5728\u4f5c\u7528\u57df\u5185\u4f7f\u7528\u670d\u52a1\n</code></pre> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/container.py</code> <pre><code>def create_scope(self) -&gt; Scope:\n    \"\"\"\u521b\u5efa\u65b0\u7684\u4f5c\u7528\u57df.\n\n    \u7528\u4e8e\u7ba1\u7406 SCOPED \u751f\u547d\u5468\u671f\u7684\u670d\u52a1.\n\n    Returns:\n        \u4f5c\u7528\u57df\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\n\n    Examples:\n        &gt;&gt;&gt; with container.create_scope() as scope:\n        ...     service = scope.resolve(ScopedService)\n        ...     # \u5728\u4f5c\u7528\u57df\u5185\u4f7f\u7528\u670d\u52a1\n    \"\"\"\n    return Scope(self)\n</code></pre>"},{"location":"zh/guaids/container/#symphra_container.container.Container.dispose","title":"<code>dispose()</code>","text":"<p>\u91ca\u653e\u5bb9\u5668\u53ca\u5176\u6240\u6709\u8d44\u6e90.</p> <p>\u5305\u62ec\u5355\u4f8b\u5b9e\u4f8b,\u4f5c\u7528\u57df\u7b49.</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/container.py</code> <pre><code>def dispose(self) -&gt; None:\n    \"\"\"\u91ca\u653e\u5bb9\u5668\u53ca\u5176\u6240\u6709\u8d44\u6e90.\n\n    \u5305\u62ec\u5355\u4f8b\u5b9e\u4f8b,\u4f5c\u7528\u57df\u7b49.\n    \"\"\"\n    self._lifetime_manager.dispose_all()\n    self._registrations.clear()\n    self._interceptors.clear()\n    self._circular_detector.reset()\n    self._performance_metrics.reset()\n</code></pre>"},{"location":"zh/guaids/container/#symphra_container.container.Container.get_all_registrations","title":"<code>get_all_registrations()</code>","text":"<p>\u83b7\u53d6\u6240\u6709\u6ce8\u518c\u4fe1\u606f.</p> <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>dict[ServiceKey, ServiceRegistration]</code> <p>\u6240\u6709\u6ce8\u518c\u4fe1\u606f\u7684\u5b57\u5178</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/container.py</code> <pre><code>def get_all_registrations(self) -&gt; dict[ServiceKey, ServiceRegistration]:\n    \"\"\"\u83b7\u53d6\u6240\u6709\u6ce8\u518c\u4fe1\u606f.\n\n    Returns:\n        \u6240\u6709\u6ce8\u518c\u4fe1\u606f\u7684\u5b57\u5178\n    \"\"\"\n    return self._registrations.copy()\n</code></pre>"},{"location":"zh/guaids/container/#symphra_container.container.Container.get_performance_stats","title":"<code>get_performance_stats()</code>","text":"<p>\u83b7\u53d6\u6027\u80fd\u7edf\u8ba1\u4fe1\u606f.</p> <p>\u8fd4\u56de\u5bb9\u5668\u7684\u6027\u80fd\u6307\u6807,\u5305\u62ec\u89e3\u6790\u6b21\u6570,\u7f13\u5b58\u547d\u4e2d\u7387\u7b49.</p> <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>dict[str, Any]</code> <p>\u5305\u542b\u6027\u80fd\u6307\u6807\u7684\u5b57\u5178</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>&gt;&gt;&gt; container = Container(enable_performance_tracking=True)\n&gt;&gt;&gt; container.register(UserService)\n&gt;&gt;&gt; container.resolve(UserService)\n&gt;&gt;&gt; stats = container.get_performance_stats()\n&gt;&gt;&gt; print(f\"Total resolutions: {stats['total_resolutions']}\")\n</code></pre> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/container.py</code> <pre><code>def get_performance_stats(self) -&gt; dict[str, Any]:\n    \"\"\"\u83b7\u53d6\u6027\u80fd\u7edf\u8ba1\u4fe1\u606f.\n\n    \u8fd4\u56de\u5bb9\u5668\u7684\u6027\u80fd\u6307\u6807,\u5305\u62ec\u89e3\u6790\u6b21\u6570,\u7f13\u5b58\u547d\u4e2d\u7387\u7b49.\n\n    Returns:\n        \u5305\u542b\u6027\u80fd\u6307\u6807\u7684\u5b57\u5178\n\n    Examples:\n        &gt;&gt;&gt; container = Container(enable_performance_tracking=True)\n        &gt;&gt;&gt; container.register(UserService)\n        &gt;&gt;&gt; container.resolve(UserService)\n        &gt;&gt;&gt; stats = container.get_performance_stats()\n        &gt;&gt;&gt; print(f\"Total resolutions: {stats['total_resolutions']}\")\n    \"\"\"\n    return self._performance_metrics.get_stats()\n</code></pre>"},{"location":"zh/guaids/container/#symphra_container.container.Container.get_registration","title":"<code>get_registration(key)</code>","text":"<p>\u83b7\u53d6\u670d\u52a1\u6ce8\u518c\u4fe1\u606f.</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>key</code> <code>ServiceKey</code> <p>\u670d\u52a1\u952e</p> \u5fc5\u9700 <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>ServiceRegistration | None</code> <p>\u6ce8\u518c\u4fe1\u606f\u6216 None</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/container.py</code> <pre><code>def get_registration(self, key: ServiceKey) -&gt; ServiceRegistration | None:\n    \"\"\"\u83b7\u53d6\u670d\u52a1\u6ce8\u518c\u4fe1\u606f.\n\n    Args:\n        key: \u670d\u52a1\u952e\n\n    Returns:\n        \u6ce8\u518c\u4fe1\u606f\u6216 None\n    \"\"\"\n    return self._registrations.get(key)\n</code></pre>"},{"location":"zh/guaids/container/#symphra_container.container.Container.has","title":"<code>has(key)</code>","text":"<p>\u68c0\u67e5\u670d\u52a1\u662f\u5426\u5df2\u6ce8\u518c(is_registered\u7684\u522b\u540d).</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>key</code> <code>ServiceKey</code> <p>\u670d\u52a1\u952e</p> \u5fc5\u9700 <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>bool</code> <p>\u662f\u5426\u5df2\u6ce8\u518c</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>&gt;&gt;&gt; container.has(UserService)\nTrue\n</code></pre> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/container.py</code> <pre><code>def has(self, key: ServiceKey) -&gt; bool:\n    \"\"\"\u68c0\u67e5\u670d\u52a1\u662f\u5426\u5df2\u6ce8\u518c(is_registered\u7684\u522b\u540d).\n\n    Args:\n        key: \u670d\u52a1\u952e\n\n    Returns:\n        \u662f\u5426\u5df2\u6ce8\u518c\n\n    Examples:\n        &gt;&gt;&gt; container.has(UserService)\n        True\n    \"\"\"\n    return self.is_registered(key)\n</code></pre>"},{"location":"zh/guaids/container/#symphra_container.container.Container.is_registered","title":"<code>is_registered(key)</code>","text":"<p>\u68c0\u67e5\u670d\u52a1\u662f\u5426\u5df2\u6ce8\u518c.</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>key</code> <code>ServiceKey</code> <p>\u670d\u52a1\u952e\u6216\u522b\u540d</p> \u5fc5\u9700 <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>bool</code> <p>\u662f\u5426\u5df2\u6ce8\u518c</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/container.py</code> <pre><code>def is_registered(self, key: ServiceKey) -&gt; bool:\n    \"\"\"\u68c0\u67e5\u670d\u52a1\u662f\u5426\u5df2\u6ce8\u518c.\n\n    Args:\n        key: \u670d\u52a1\u952e\u6216\u522b\u540d\n\n    Returns:\n        \u662f\u5426\u5df2\u6ce8\u518c\n    \"\"\"\n    return key in self._registrations or key in self._aliases\n</code></pre>"},{"location":"zh/guaids/container/#symphra_container.container.Container.register","title":"<code>register(service_type, *, key=None, lifetime=Lifetime.TRANSIENT, override=False)</code>","text":"<p>\u6ce8\u518c\u4e00\u4e2a\u670d\u52a1.</p> <p>\u6700\u57fa\u7840\u7684\u6ce8\u518c\u65b9\u6cd5,\u4f7f\u7528\u670d\u52a1\u7c7b\u672c\u8eab\u521b\u5efa\u5b9e\u4f8b.</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>service_type</code> <code>type</code> <p>\u670d\u52a1\u7c7b\u578b</p> \u5fc5\u9700 <code>key</code> <code>ServiceKey | None</code> <p>\u670d\u52a1\u952e(\u9ed8\u8ba4\u4e3a service_type)</p> <code>None</code> <code>lifetime</code> <code>Lifetime</code> <p>\u751f\u547d\u5468\u671f(\u9ed8\u8ba4 TRANSIENT)</p> <code>TRANSIENT</code> <code>override</code> <code>bool</code> <p>\u662f\u5426\u8986\u76d6\u5df2\u5b58\u5728\u7684\u670d\u52a1</p> <code>False</code> <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>Container</code> <p>\u5bb9\u5668\u5b9e\u4f8b(\u652f\u6301\u94fe\u5f0f\u8c03\u7528)</p> <p>\u5f15\u53d1\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>RegistrationError</code> <p>\u6ce8\u518c\u5931\u8d25\u65f6</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>&gt;&gt;&gt; container = Container()\n&gt;&gt;&gt; container.register(UserService)\n&gt;&gt;&gt; container.register(DatabaseService, lifetime=Lifetime.SINGLETON)\n&gt;&gt;&gt; service = container.resolve(UserService)\n</code></pre> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/container.py</code> <pre><code>def register(\n    self,\n    service_type: type,\n    *,\n    key: ServiceKey | None = None,\n    lifetime: Lifetime = Lifetime.TRANSIENT,\n    override: bool = False,\n) -&gt; Container:\n    \"\"\"\u6ce8\u518c\u4e00\u4e2a\u670d\u52a1.\n\n    \u6700\u57fa\u7840\u7684\u6ce8\u518c\u65b9\u6cd5,\u4f7f\u7528\u670d\u52a1\u7c7b\u672c\u8eab\u521b\u5efa\u5b9e\u4f8b.\n\n    Args:\n        service_type: \u670d\u52a1\u7c7b\u578b\n        key: \u670d\u52a1\u952e(\u9ed8\u8ba4\u4e3a service_type)\n        lifetime: \u751f\u547d\u5468\u671f(\u9ed8\u8ba4 TRANSIENT)\n        override: \u662f\u5426\u8986\u76d6\u5df2\u5b58\u5728\u7684\u670d\u52a1\n\n    Returns:\n        \u5bb9\u5668\u5b9e\u4f8b(\u652f\u6301\u94fe\u5f0f\u8c03\u7528)\n\n    Raises:\n        RegistrationError: \u6ce8\u518c\u5931\u8d25\u65f6\n\n    Examples:\n        &gt;&gt;&gt; container = Container()\n        &gt;&gt;&gt; container.register(UserService)\n        &gt;&gt;&gt; container.register(DatabaseService, lifetime=Lifetime.SINGLETON)\n        &gt;&gt;&gt; service = container.resolve(UserService)\n    \"\"\"\n    # \u5982\u679c\u670d\u52a1\u7c7b\u578b\u5e26\u6709\u88c5\u9970\u5668\u5143\u6570\u636e,\u4f18\u5148\u4f7f\u7528\u5143\u6570\u636e\u4e2d\u7684\u952e\u4e0e\u751f\u547d\u5468\u671f\n    metadata = get_service_metadata(service_type)\n    decorated_override = False\n    if metadata is not None:\n        # \u4f7f\u7528\u88c5\u9970\u5668\u63d0\u4f9b\u7684 key (\u5982\u672a\u663e\u5f0f\u4f20\u5165)\n        key = key or metadata.key or service_type\n        # \u4f7f\u7528\u88c5\u9970\u5668\u63d0\u4f9b\u7684\u751f\u547d\u5468\u671f\n        lifetime = metadata.lifetime\n        # \u5bf9\u88c5\u9970\u8fc7\u7684\u670d\u52a1\u9ed8\u8ba4\u5141\u8bb8\u91cd\u590d\u6ce8\u518c(\u8986\u76d6)\n        decorated_override = True\n    else:\n        key = key or service_type\n\n    # \u68c0\u67e5\u662f\u5426\u5df2\u6ce8\u518c\n    if key in self._registrations and not (override or decorated_override):\n        raise RegistrationError(\n            key,\n            \"Service already registered. Use override=True to replace it.\",\n        )\n\n    registration = ServiceRegistration(\n        key=key,\n        service_type=service_type,\n        factory=service_type,\n        lifetime=lifetime,\n        override=override or decorated_override,\n    )\n    self._registrations[key] = registration\n\n    return self\n</code></pre>"},{"location":"zh/guaids/container/#symphra_container.container.Container.register_async_factory","title":"<code>register_async_factory(key, factory, *, service_type=None, lifetime=Lifetime.TRANSIENT, override=False)</code>","text":"<p>\u6ce8\u518c\u4e00\u4e2a\u5f02\u6b65\u5de5\u5382\u51fd\u6570.</p> <p>\u26a0\ufe0f DEPRECATED: \u6b64\u65b9\u6cd5\u5df2\u5e9f\u5f03,\u8bf7\u4f7f\u7528 register_factory() \u4ee3\u66ff\u3002 Container \u73b0\u5728\u81ea\u52a8\u68c0\u6d4b\u5de5\u5382\u51fd\u6570\u662f\u5426\u4e3a\u5f02\u6b65\u3002</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>key</code> <code>ServiceKey</code> <p>\u670d\u52a1\u952e</p> \u5fc5\u9700 <code>factory</code> <code>Callable[..., T]</code> <p>\u5f02\u6b65\u5de5\u5382\u51fd\u6570</p> \u5fc5\u9700 <code>service_type</code> <code>type | None</code> <p>\u670d\u52a1\u7c7b\u578b</p> <code>None</code> <code>lifetime</code> <code>Lifetime</code> <p>\u751f\u547d\u5468\u671f</p> <code>TRANSIENT</code> <code>override</code> <code>bool</code> <p>\u662f\u5426\u8986\u76d6\u5df2\u5b58\u5728\u7684\u670d\u52a1</p> <code>False</code> <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>Container</code> <p>\u5bb9\u5668\u5b9e\u4f8b(\u652f\u6301\u94fe\u5f0f\u8c03\u7528)</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/container.py</code> <pre><code>def register_async_factory(\n    self,\n    key: ServiceKey,\n    factory: Callable[..., T],\n    *,\n    service_type: type | None = None,\n    lifetime: Lifetime = Lifetime.TRANSIENT,\n    override: bool = False,\n) -&gt; Container:\n    \"\"\"\u6ce8\u518c\u4e00\u4e2a\u5f02\u6b65\u5de5\u5382\u51fd\u6570.\n\n    \u26a0\ufe0f DEPRECATED: \u6b64\u65b9\u6cd5\u5df2\u5e9f\u5f03,\u8bf7\u4f7f\u7528 register_factory() \u4ee3\u66ff\u3002\n    Container \u73b0\u5728\u81ea\u52a8\u68c0\u6d4b\u5de5\u5382\u51fd\u6570\u662f\u5426\u4e3a\u5f02\u6b65\u3002\n\n    Args:\n        key: \u670d\u52a1\u952e\n        factory: \u5f02\u6b65\u5de5\u5382\u51fd\u6570\n        service_type: \u670d\u52a1\u7c7b\u578b\n        lifetime: \u751f\u547d\u5468\u671f\n        override: \u662f\u5426\u8986\u76d6\u5df2\u5b58\u5728\u7684\u670d\u52a1\n\n    Returns:\n        \u5bb9\u5668\u5b9e\u4f8b(\u652f\u6301\u94fe\u5f0f\u8c03\u7528)\n    \"\"\"\n    # \u76f4\u63a5\u8c03\u7528 register_factory,\u5b83\u4f1a\u81ea\u52a8\u68c0\u6d4b\u5f02\u6b65\n    return self.register_factory(\n        key=key,\n        factory=factory,\n        service_type=service_type,\n        lifetime=lifetime,\n        override=override,\n    )\n</code></pre>"},{"location":"zh/guaids/container/#symphra_container.container.Container.register_factory","title":"<code>register_factory(key, factory, *, service_type=None, lifetime=Lifetime.TRANSIENT, override=False)</code>","text":"<p>\u6ce8\u518c\u4e00\u4e2a\u5de5\u5382\u51fd\u6570.</p> <p>\u4f7f\u7528\u5de5\u5382\u51fd\u6570\u6765\u521b\u5efa\u670d\u52a1\u5b9e\u4f8b.</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>key</code> <code>ServiceKey</code> <p>\u670d\u52a1\u952e</p> \u5fc5\u9700 <code>factory</code> <code>Callable[..., T]</code> <p>\u5de5\u5382\u51fd\u6570</p> \u5fc5\u9700 <code>service_type</code> <code>type | None</code> <p>\u670d\u52a1\u7c7b\u578b(\u9ed8\u8ba4\u4e3a\u5de5\u5382\u7684\u8fd4\u56de\u7c7b\u578b)</p> <code>None</code> <code>lifetime</code> <code>Lifetime</code> <p>\u751f\u547d\u5468\u671f</p> <code>TRANSIENT</code> <code>override</code> <code>bool</code> <p>\u662f\u5426\u8986\u76d6\u5df2\u5b58\u5728\u7684\u670d\u52a1</p> <code>False</code> <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>Container</code> <p>\u5bb9\u5668\u5b9e\u4f8b(\u652f\u6301\u94fe\u5f0f\u8c03\u7528)</p> <p>\u5f15\u53d1\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>RegistrationError</code> <p>\u6ce8\u518c\u5931\u8d25\u65f6</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>&gt;&gt;&gt; def create_db() -&gt; Database:\n...     db = Database()\n...     db.connect()\n...     return db\n&gt;&gt;&gt; container.register_factory(\n...     \"database\",\n...     create_db,\n...     lifetime=Lifetime.SINGLETON\n... )\n</code></pre> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/container.py</code> <pre><code>def register_factory(\n    self,\n    key: ServiceKey,\n    factory: Callable[..., T],\n    *,\n    service_type: type | None = None,\n    lifetime: Lifetime = Lifetime.TRANSIENT,\n    override: bool = False,\n) -&gt; Container:\n    \"\"\"\u6ce8\u518c\u4e00\u4e2a\u5de5\u5382\u51fd\u6570.\n\n    \u4f7f\u7528\u5de5\u5382\u51fd\u6570\u6765\u521b\u5efa\u670d\u52a1\u5b9e\u4f8b.\n\n    Args:\n        key: \u670d\u52a1\u952e\n        factory: \u5de5\u5382\u51fd\u6570\n        service_type: \u670d\u52a1\u7c7b\u578b(\u9ed8\u8ba4\u4e3a\u5de5\u5382\u7684\u8fd4\u56de\u7c7b\u578b)\n        lifetime: \u751f\u547d\u5468\u671f\n        override: \u662f\u5426\u8986\u76d6\u5df2\u5b58\u5728\u7684\u670d\u52a1\n\n    Returns:\n        \u5bb9\u5668\u5b9e\u4f8b(\u652f\u6301\u94fe\u5f0f\u8c03\u7528)\n\n    Raises:\n        RegistrationError: \u6ce8\u518c\u5931\u8d25\u65f6\n\n    Examples:\n        &gt;&gt;&gt; def create_db() -&gt; Database:\n        ...     db = Database()\n        ...     db.connect()\n        ...     return db\n        &gt;&gt;&gt; container.register_factory(\n        ...     \"database\",\n        ...     create_db,\n        ...     lifetime=Lifetime.SINGLETON\n        ... )\n    \"\"\"\n    if key in self._registrations and not override:\n        raise RegistrationError(\n            key,\n            \"Service already registered. Use override=True to replace it.\",\n        )\n\n    service_type = service_type or type(None)\n\n    registration = ServiceRegistration(\n        key=key,\n        service_type=service_type,\n        factory=factory,\n        lifetime=lifetime,\n        override=override,\n    )\n    self._registrations[key] = registration\n\n    return self\n</code></pre>"},{"location":"zh/guaids/container/#symphra_container.container.Container.register_instance","title":"<code>register_instance(key, instance, override=False)</code>","text":"<p>\u6ce8\u518c\u4e00\u4e2a\u5355\u4f8b\u5b9e\u4f8b.</p> <p>\u76f4\u63a5\u6ce8\u518c\u4e00\u4e2a\u5df2\u7ecf\u521b\u5efa\u7684\u5b9e\u4f8b\u4f5c\u4e3a\u5355\u4f8b.</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>key</code> <code>ServiceKey</code> <p>\u670d\u52a1\u952e</p> \u5fc5\u9700 <code>instance</code> <code>Any</code> <p>\u670d\u52a1\u5b9e\u4f8b</p> \u5fc5\u9700 <code>override</code> <code>bool</code> <p>\u662f\u5426\u8986\u76d6\u5df2\u5b58\u5728\u7684\u670d\u52a1</p> <code>False</code> <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>Container</code> <p>\u5bb9\u5668\u5b9e\u4f8b(\u652f\u6301\u94fe\u5f0f\u8c03\u7528)</p> <p>\u5f15\u53d1\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>RegistrationError</code> <p>\u6ce8\u518c\u5931\u8d25\u65f6</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>&gt;&gt;&gt; config = Config()\n&gt;&gt;&gt; container.register_instance(\"config\", config)\n&gt;&gt;&gt; resolved_config = container.resolve(\"config\")\n&gt;&gt;&gt; assert resolved_config is config\n</code></pre> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/container.py</code> <pre><code>def register_instance(\n    self,\n    key: ServiceKey,\n    instance: Any,\n    override: bool = False,\n) -&gt; Container:\n    \"\"\"\u6ce8\u518c\u4e00\u4e2a\u5355\u4f8b\u5b9e\u4f8b.\n\n    \u76f4\u63a5\u6ce8\u518c\u4e00\u4e2a\u5df2\u7ecf\u521b\u5efa\u7684\u5b9e\u4f8b\u4f5c\u4e3a\u5355\u4f8b.\n\n    Args:\n        key: \u670d\u52a1\u952e\n        instance: \u670d\u52a1\u5b9e\u4f8b\n        override: \u662f\u5426\u8986\u76d6\u5df2\u5b58\u5728\u7684\u670d\u52a1\n\n    Returns:\n        \u5bb9\u5668\u5b9e\u4f8b(\u652f\u6301\u94fe\u5f0f\u8c03\u7528)\n\n    Raises:\n        RegistrationError: \u6ce8\u518c\u5931\u8d25\u65f6\n\n    Examples:\n        &gt;&gt;&gt; config = Config()\n        &gt;&gt;&gt; container.register_instance(\"config\", config)\n        &gt;&gt;&gt; resolved_config = container.resolve(\"config\")\n        &gt;&gt;&gt; assert resolved_config is config\n    \"\"\"\n    if key in self._registrations and not override:\n        raise RegistrationError(\n            key,\n            \"Service already registered. Use override=True to replace it.\",\n        )\n\n    # \u521b\u5efa\u4e00\u4e2a\u8fd4\u56de\u8be5\u5b9e\u4f8b\u7684\u5de5\u5382\n    def factory() -&gt; Any:\n        return instance\n\n    registration = ServiceRegistration(\n        key=key,\n        service_type=type(instance),\n        factory=factory,\n        lifetime=Lifetime.SINGLETON,\n        override=override,\n    )\n    self._registrations[key] = registration\n\n    # \u76f4\u63a5\u5b58\u50a8\u5230\u5355\u4f8b\u5b58\u50a8\n    self._lifetime_manager.set_instance(key, instance, Lifetime.SINGLETON)\n\n    return self\n</code></pre>"},{"location":"zh/guaids/container/#symphra_container.container.Container.replace","title":"<code>replace(old_key, new_service_type)</code>","text":"<p>\u66ff\u6362\u5df2\u6ce8\u518c\u7684\u670d\u52a1.</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>old_key</code> <code>ServiceKey</code> <p>\u65e7\u670d\u52a1\u952e</p> \u5fc5\u9700 <code>new_service_type</code> <code>type</code> <p>\u65b0\u670d\u52a1\u7c7b\u578b</p> \u5fc5\u9700 <p>\u5f15\u53d1\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>ServiceNotFoundError</code> <p>\u65e7\u670d\u52a1\u4e0d\u5b58\u5728\u65f6</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>&gt;&gt;&gt; container.replace(OldService, NewService)\n</code></pre> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/container.py</code> <pre><code>def replace(self, old_key: ServiceKey, new_service_type: type) -&gt; None:\n    \"\"\"\u66ff\u6362\u5df2\u6ce8\u518c\u7684\u670d\u52a1.\n\n    Args:\n        old_key: \u65e7\u670d\u52a1\u952e\n        new_service_type: \u65b0\u670d\u52a1\u7c7b\u578b\n\n    Raises:\n        ServiceNotFoundError: \u65e7\u670d\u52a1\u4e0d\u5b58\u5728\u65f6\n\n    Examples:\n        &gt;&gt;&gt; container.replace(OldService, NewService)\n    \"\"\"\n    if old_key not in self._registrations:\n        raise ServiceNotFoundError(old_key, list(self._registrations.keys()))\n\n    old_reg = self._registrations[old_key]\n    self.unregister(old_key)\n    self.register(\n        new_service_type,\n        key=old_key,\n        lifetime=old_reg.lifetime,\n        override=True,\n    )\n</code></pre>"},{"location":"zh/guaids/container/#symphra_container.container.Container.reset_performance_metrics","title":"<code>reset_performance_metrics()</code>","text":"<p>\u91cd\u7f6e\u6027\u80fd\u6307\u6807.</p> <p>\u6e05\u7a7a\u6240\u6709\u5df2\u8bb0\u5f55\u7684\u6027\u80fd\u6570\u636e.</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/container.py</code> <pre><code>def reset_performance_metrics(self) -&gt; None:\n    \"\"\"\u91cd\u7f6e\u6027\u80fd\u6307\u6807.\n\n    \u6e05\u7a7a\u6240\u6709\u5df2\u8bb0\u5f55\u7684\u6027\u80fd\u6570\u636e.\n    \"\"\"\n    self._performance_metrics.reset()\n</code></pre>"},{"location":"zh/guaids/container/#symphra_container.container.Container.resolve","title":"<code>resolve(key)</code>","text":"<pre><code>resolve(key: type[T]) -&gt; T\n</code></pre><pre><code>resolve(key: str) -&gt; Any\n</code></pre> <p>\u89e3\u6790\u670d\u52a1\u5b9e\u4f8b.</p> <p>\u6839\u636e\u670d\u52a1\u952e\u4ece\u5bb9\u5668\u4e2d\u83b7\u53d6\u670d\u52a1\u5b9e\u4f8b. \u8fd9\u662f\u6574\u4e2a DI \u5bb9\u5668\u6700\u6838\u5fc3\u7684\u65b9\u6cd5, \u5305\u542b\u4e86\u5b8c\u6574\u7684\u4f9d\u8d56\u89e3\u6790\u3001\u751f\u547d\u5468\u671f\u7ba1\u7406\u3001\u62e6\u622a\u5668\u6267\u884c\u548c\u6027\u80fd\u8ffd\u8e2a\u903b\u8f91.</p> <p>\u5de5\u4f5c\u6d41\u7a0b: 1. \u9a8c\u8bc1\u670d\u52a1\u5df2\u6ce8\u518c 2. \u6267\u884c\u524d\u7f6e\u62e6\u622a\u5668(\u53ef\u80fd\u62d2\u7edd\u89e3\u6790) 3. \u521d\u59cb\u5316\u6027\u80fd\u8ffd\u8e2a(\u5982\u679c\u542f\u7528) 4. \u5faa\u73af\u4f9d\u8d56\u68c0\u6d4b 5. \u68c0\u67e5\u7f13\u5b58\u5b9e\u4f8b(Singleton/Scoped) 6. \u521b\u5efa\u65b0\u5b9e\u4f8b(\u9012\u5f52\u89e3\u6790\u4f9d\u8d56) 7. \u5b58\u50a8\u5b9e\u4f8b\u5230\u751f\u547d\u5468\u671f\u7ba1\u7406\u5668 8. \u6267\u884c\u540e\u7f6e\u62e6\u622a\u5668\u5e76\u8fd4\u56de\u6700\u7ec8\u5b9e\u4f8b</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>key</code> <code>ServiceKey</code> <p>\u670d\u52a1\u952e(\u53ef\u4ee5\u662f\u7c7b\u578b\u6216\u5b57\u7b26\u4e32)</p> \u5fc5\u9700 <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>Any</code> <p>\u89e3\u6790\u5f97\u5230\u7684\u670d\u52a1\u5b9e\u4f8b</p> <p>\u5f15\u53d1\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>ServiceNotFoundError</code> <p>\u670d\u52a1\u672a\u6ce8\u518c</p> <code>CircularDependencyError</code> <p>\u68c0\u6d4b\u5230\u5faa\u73af\u4f9d\u8d56</p> <code>ResolutionError</code> <p>\u89e3\u6790\u5931\u8d25(\u4f9d\u8d56\u6ce8\u5165\u9519\u8bef\u3001\u5de5\u5382\u5f02\u5e38\u7b49)</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>&gt;&gt;&gt; container.register(UserService)\n&gt;&gt;&gt; service = container.resolve(UserService)\n&gt;&gt;&gt; assert isinstance(service, UserService)\n</code></pre> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/container.py</code> <pre><code>def resolve(self, key: ServiceKey) -&gt; Any:\n    \"\"\"\u89e3\u6790\u670d\u52a1\u5b9e\u4f8b.\n\n    \u6839\u636e\u670d\u52a1\u952e\u4ece\u5bb9\u5668\u4e2d\u83b7\u53d6\u670d\u52a1\u5b9e\u4f8b. \u8fd9\u662f\u6574\u4e2a DI \u5bb9\u5668\u6700\u6838\u5fc3\u7684\u65b9\u6cd5,\n    \u5305\u542b\u4e86\u5b8c\u6574\u7684\u4f9d\u8d56\u89e3\u6790\u3001\u751f\u547d\u5468\u671f\u7ba1\u7406\u3001\u62e6\u622a\u5668\u6267\u884c\u548c\u6027\u80fd\u8ffd\u8e2a\u903b\u8f91.\n\n    \u5de5\u4f5c\u6d41\u7a0b:\n    1. \u9a8c\u8bc1\u670d\u52a1\u5df2\u6ce8\u518c\n    2. \u6267\u884c\u524d\u7f6e\u62e6\u622a\u5668(\u53ef\u80fd\u62d2\u7edd\u89e3\u6790)\n    3. \u521d\u59cb\u5316\u6027\u80fd\u8ffd\u8e2a(\u5982\u679c\u542f\u7528)\n    4. \u5faa\u73af\u4f9d\u8d56\u68c0\u6d4b\n    5. \u68c0\u67e5\u7f13\u5b58\u5b9e\u4f8b(Singleton/Scoped)\n    6. \u521b\u5efa\u65b0\u5b9e\u4f8b(\u9012\u5f52\u89e3\u6790\u4f9d\u8d56)\n    7. \u5b58\u50a8\u5b9e\u4f8b\u5230\u751f\u547d\u5468\u671f\u7ba1\u7406\u5668\n    8. \u6267\u884c\u540e\u7f6e\u62e6\u622a\u5668\u5e76\u8fd4\u56de\u6700\u7ec8\u5b9e\u4f8b\n\n    Args:\n        key: \u670d\u52a1\u952e(\u53ef\u4ee5\u662f\u7c7b\u578b\u6216\u5b57\u7b26\u4e32)\n\n    Returns:\n        \u89e3\u6790\u5f97\u5230\u7684\u670d\u52a1\u5b9e\u4f8b\n\n    Raises:\n        ServiceNotFoundError: \u670d\u52a1\u672a\u6ce8\u518c\n        CircularDependencyError: \u68c0\u6d4b\u5230\u5faa\u73af\u4f9d\u8d56\n        ResolutionError: \u89e3\u6790\u5931\u8d25(\u4f9d\u8d56\u6ce8\u5165\u9519\u8bef\u3001\u5de5\u5382\u5f02\u5e38\u7b49)\n\n    Examples:\n        &gt;&gt;&gt; container.register(UserService)\n        &gt;&gt;&gt; service = container.resolve(UserService)\n        &gt;&gt;&gt; assert isinstance(service, UserService)\n    \"\"\"\n    # \u6b65\u9aa4 0: \u68c0\u67e5\u662f\u5426\u4e3a\u522b\u540d, \u5982\u679c\u662f\u5219\u8f6c\u6362\u4e3a\u5b9e\u9645\u952e\n    if key in self._aliases:\n        key = self._aliases[key]\n\n    # Handle Lazy types\n    origin = get_origin(key)\n    if origin == LazyTypeMarker:\n        args = get_args(key)\n        if args:\n            inner_key = args[0]\n            return Lazy(inner_key, _resolver=self.resolve)\n        else:\n            raise ResolutionError(key, Exception(\"Lazy type must have arguments\"))\n    if key not in self._registrations:\n        available_services = list(self._registrations.keys())\n        raise ServiceNotFoundError(key, available_services)\n\n    registration = self._registrations[key]\n\n    # \u68c0\u67e5\u662f\u5426\u5c1d\u8bd5\u540c\u6b65\u89e3\u6790\u5f02\u6b65\u670d\u52a1\n    if registration.is_async:\n        raise ResolutionError(\n            key,\n            Exception(f\"Service {key} has async factory, use resolve_async() instead of resolve()\"),\n        )\n\n    # \u6b65\u9aa4 2: \u6267\u884c\u524d\u7f6e\u62e6\u622a\u5668(\u53ef\u80fd\u62d2\u7edd\u89e3\u6790)\n    self._run_before_interceptors(key, registration)\n\n    # \u6b65\u9aa4 3: \u521d\u59cb\u5316\u6027\u80fd\u8ffd\u8e2a(\u5982\u679c\u542f\u7528)\n    timer = ResolutionTimer() if self._enable_performance_tracking else None\n    cache_hit = False\n\n    try:\n        # \u5f00\u59cb\u8ba1\u65f6\n        if timer:\n            timer.__enter__()\n\n        # \u6b65\u9aa4 4: \u5faa\u73af\u4f9d\u8d56\u68c0\u6d4b - \u8fdb\u5165\u89e3\u6790\u5806\u6808\n        self._circular_detector.enter_resolution(key)\n\n        # \u6b65\u9aa4 5: \u68c0\u67e5\u662f\u5426\u6709\u7f13\u5b58\u5b9e\u4f8b(Singleton/Scoped)\n        cached, cache_hit = self._check_cached_instance(key, registration)\n        if cached is not None:\n            return cached\n\n        # \u6b65\u9aa4 6: \u521b\u5efa\u65b0\u5b9e\u4f8b(\u9012\u5f52\u89e3\u6790\u4f9d\u8d56)\n        instance = self._create_instance(registration)\n\n        # \u6b65\u9aa4 7: \u5b58\u50a8\u5b9e\u4f8b\u5230\u751f\u547d\u5468\u671f\u7ba1\u7406\u5668\n        self._lifetime_manager.set_instance(key, instance, registration.lifetime)\n\n        # \u6b65\u9aa4 8: \u6267\u884c\u540e\u7f6e\u62e6\u622a\u5668\u5e76\u8fd4\u56de\u6700\u7ec8\u5b9e\u4f8b\n        return self._run_after_interceptors(key, instance)\n\n    except ContainerException:\n        # \u5bb9\u5668\u5f02\u5e38\u76f4\u63a5\u91cd\u65b0\u629b\u51fa\n        raise\n    except Exception as e:\n        # \u5176\u4ed6\u5f02\u5e38: \u901a\u77e5\u9519\u8bef\u62e6\u622a\u5668\u5e76\u5305\u88c5\u4e3a ResolutionError\n        self._run_error_interceptors(key, e)\n        raise ResolutionError(key, e) from e\n    finally:\n        # \u6e05\u7406\u5de5\u4f5c: \u4ece\u5faa\u73af\u68c0\u6d4b\u5806\u6808\u4e2d\u79fb\u9664\n        self._circular_detector.exit_resolution(key)\n\n        # \u8bb0\u5f55\u6027\u80fd\u6307\u6807(\u5982\u679c\u542f\u7528\u8ffd\u8e2a)\n        if timer:\n            timer.__exit__(None, None, None)\n            self._performance_metrics.record_resolution(\n                key,\n                timer.elapsed_time,\n                cache_hit=cache_hit,\n            )\n</code></pre>"},{"location":"zh/guaids/container/#symphra_container.container.Container.resolve_async","title":"<code>resolve_async(key)</code>  <code>async</code>","text":"<pre><code>resolve_async(key: type[T]) -&gt; T\n</code></pre><pre><code>resolve_async(key: str) -&gt; Any\n</code></pre> <p>\u5f02\u6b65\u89e3\u6790\u670d\u52a1\u5b9e\u4f8b.</p> <p>\u4e0e resolve() \u7c7b\u4f3c,\u4f46\u652f\u6301\u5f02\u6b65\u5de5\u5382\u51fd\u6570\u548c\u5f02\u6b65\u4f9d\u8d56\u89e3\u6790. \u53ef\u4ee5\u89e3\u6790\u540c\u6b65\u670d\u52a1(\u81ea\u52a8\u9002\u914d)\u548c\u5f02\u6b65\u670d\u52a1.</p> <p>\u5de5\u4f5c\u6d41\u7a0b: 1. \u9a8c\u8bc1\u670d\u52a1\u5df2\u6ce8\u518c 2. \u6267\u884c\u524d\u7f6e\u62e6\u622a\u5668 3. \u521d\u59cb\u5316\u6027\u80fd\u8ffd\u8e2a 4. \u5faa\u73af\u4f9d\u8d56\u68c0\u6d4b 5. \u68c0\u67e5\u7f13\u5b58\u5b9e\u4f8b 6. \u521b\u5efa\u65b0\u5b9e\u4f8b(\u652f\u6301\u5f02\u6b65factory\u548c\u4f9d\u8d56) 7. \u5b58\u50a8\u5b9e\u4f8b\u5230\u751f\u547d\u5468\u671f\u7ba1\u7406\u5668 8. \u6267\u884c\u540e\u7f6e\u62e6\u622a\u5668\u5e76\u8fd4\u56de\u5b9e\u4f8b</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>key</code> <code>ServiceKey</code> <p>\u670d\u52a1\u952e(\u53ef\u4ee5\u662f\u7c7b\u578b\u6216\u5b57\u7b26\u4e32)</p> \u5fc5\u9700 <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>Any</code> <p>\u89e3\u6790\u5f97\u5230\u7684\u670d\u52a1\u5b9e\u4f8b</p> <p>\u5f15\u53d1\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>ServiceNotFoundError</code> <p>\u670d\u52a1\u672a\u6ce8\u518c</p> <code>CircularDependencyError</code> <p>\u68c0\u6d4b\u5230\u5faa\u73af\u4f9d\u8d56</p> <code>ResolutionError</code> <p>\u89e3\u6790\u5931\u8d25</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>&gt;&gt;&gt; container.register(AsyncService, factory=create_async_service)\n&gt;&gt;&gt; service = await container.resolve_async(AsyncService)\n&gt;&gt;&gt; assert isinstance(service, AsyncService)\n</code></pre> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/container.py</code> <pre><code>async def resolve_async(self, key: ServiceKey) -&gt; Any:\n    \"\"\"\u5f02\u6b65\u89e3\u6790\u670d\u52a1\u5b9e\u4f8b.\n\n    \u4e0e resolve() \u7c7b\u4f3c,\u4f46\u652f\u6301\u5f02\u6b65\u5de5\u5382\u51fd\u6570\u548c\u5f02\u6b65\u4f9d\u8d56\u89e3\u6790.\n    \u53ef\u4ee5\u89e3\u6790\u540c\u6b65\u670d\u52a1(\u81ea\u52a8\u9002\u914d)\u548c\u5f02\u6b65\u670d\u52a1.\n\n    \u5de5\u4f5c\u6d41\u7a0b:\n    1. \u9a8c\u8bc1\u670d\u52a1\u5df2\u6ce8\u518c\n    2. \u6267\u884c\u524d\u7f6e\u62e6\u622a\u5668\n    3. \u521d\u59cb\u5316\u6027\u80fd\u8ffd\u8e2a\n    4. \u5faa\u73af\u4f9d\u8d56\u68c0\u6d4b\n    5. \u68c0\u67e5\u7f13\u5b58\u5b9e\u4f8b\n    6. \u521b\u5efa\u65b0\u5b9e\u4f8b(\u652f\u6301\u5f02\u6b65factory\u548c\u4f9d\u8d56)\n    7. \u5b58\u50a8\u5b9e\u4f8b\u5230\u751f\u547d\u5468\u671f\u7ba1\u7406\u5668\n    8. \u6267\u884c\u540e\u7f6e\u62e6\u622a\u5668\u5e76\u8fd4\u56de\u5b9e\u4f8b\n\n    Args:\n        key: \u670d\u52a1\u952e(\u53ef\u4ee5\u662f\u7c7b\u578b\u6216\u5b57\u7b26\u4e32)\n\n    Returns:\n        \u89e3\u6790\u5f97\u5230\u7684\u670d\u52a1\u5b9e\u4f8b\n\n    Raises:\n        ServiceNotFoundError: \u670d\u52a1\u672a\u6ce8\u518c\n        CircularDependencyError: \u68c0\u6d4b\u5230\u5faa\u73af\u4f9d\u8d56\n        ResolutionError: \u89e3\u6790\u5931\u8d25\n\n    Examples:\n        &gt;&gt;&gt; container.register(AsyncService, factory=create_async_service)\n        &gt;&gt;&gt; service = await container.resolve_async(AsyncService)\n        &gt;&gt;&gt; assert isinstance(service, AsyncService)\n    \"\"\"\n    # \u6b65\u9aa4 0: \u68c0\u67e5\u662f\u5426\u4e3a\u522b\u540d\n    if key in self._aliases:\n        key = self._aliases[key]\n\n    # Handle Lazy types\n    origin = get_origin(key)\n    if origin == LazyTypeMarker:\n        args = get_args(key)\n        if args:\n            inner_key = args[0]\n            return Lazy(inner_key, _resolver=self.resolve_async)\n        else:\n            raise ResolutionError(key, Exception(\"Lazy type must have arguments\"))\n\n    # \u6b65\u9aa4 1: \u9a8c\u8bc1\u670d\u52a1\u5df2\u6ce8\u518c\n    if key not in self._registrations:\n        available_services = list(self._registrations.keys())\n        raise ServiceNotFoundError(key, available_services)\n\n    registration = self._registrations[key]\n\n    # \u6b65\u9aa4 2: \u6267\u884c\u524d\u7f6e\u62e6\u622a\u5668\n    await self._run_before_interceptors_async(key, registration)\n\n    # \u6b65\u9aa4 3: \u521d\u59cb\u5316\u6027\u80fd\u8ffd\u8e2a\n    timer = ResolutionTimer() if self._enable_performance_tracking else None\n    cache_hit = False\n\n    try:\n        if timer:\n            timer.__enter__()\n\n        # \u6b65\u9aa4 4: \u5faa\u73af\u4f9d\u8d56\u68c0\u6d4b\n        self._circular_detector.enter_resolution(key)\n\n        # \u6b65\u9aa4 5: \u68c0\u67e5\u7f13\u5b58\u5b9e\u4f8b(\u5f02\u6b65\u7248\u672c)\n        cached, cache_hit = await self._check_cached_instance_async(key, registration)\n        if cached is not None:\n            return cached\n\n        # \u6b65\u9aa4 6: \u521b\u5efa\u65b0\u5b9e\u4f8b(\u5f02\u6b65)\n        instance = await self._create_instance_async(registration)\n\n        # \u6b65\u9aa4 7: \u5b58\u50a8\u5b9e\u4f8b\n        self._lifetime_manager.set_instance(key, instance, registration.lifetime)\n\n        # \u6b65\u9aa4 8: \u6267\u884c\u540e\u7f6e\u62e6\u622a\u5668\n        return await self._run_after_interceptors_async(key, instance)\n\n    except ContainerException:\n        raise\n    except Exception as e:\n        await self._run_error_interceptors_async(key, e)\n        raise ResolutionError(key, e) from e\n    finally:\n        self._circular_detector.exit_resolution(key)\n\n        if timer:\n            timer.__exit__(None, None, None)\n            self._performance_metrics.record_resolution(\n                key,\n                timer.elapsed_time,\n                cache_hit=cache_hit,\n            )\n</code></pre>"},{"location":"zh/guaids/container/#symphra_container.container.Container.scan","title":"<code>scan(package)</code>","text":"<p>\u626b\u63cf\u5305\u5e76\u81ea\u52a8\u6ce8\u518c\u6240\u6709\u5e26\u88c5\u9970\u5668\u7684\u670d\u52a1.</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>package</code> <code>str | Path</code> <p>\u5305\u540d\u6216\u8def\u5f84</p> \u5fc5\u9700 <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>Container</code> <p>\u5bb9\u5668\u5b9e\u4f8b(\u652f\u6301\u94fe\u5f0f\u8c03\u7528)</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>&gt;&gt;&gt; container.scan(\"myapp.services\")\n&gt;&gt;&gt; container.scan(Path(\"./services\"))\n</code></pre> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/container.py</code> <pre><code>def scan(self, package: str | Path) -&gt; Container:\n    \"\"\"\u626b\u63cf\u5305\u5e76\u81ea\u52a8\u6ce8\u518c\u6240\u6709\u5e26\u88c5\u9970\u5668\u7684\u670d\u52a1.\n\n    Args:\n        package: \u5305\u540d\u6216\u8def\u5f84\n\n    Returns:\n        \u5bb9\u5668\u5b9e\u4f8b(\u652f\u6301\u94fe\u5f0f\u8c03\u7528)\n\n    Examples:\n        &gt;&gt;&gt; container.scan(\"myapp.services\")\n        &gt;&gt;&gt; container.scan(Path(\"./services\"))\n    \"\"\"\n    import contextlib\n\n    from .decorators import auto_register, is_injectable\n\n    if isinstance(package, Path):\n        # \u8def\u5f84\u626b\u63cf\n        package_str = str(package.absolute())\n        spec = importlib.util.spec_from_file_location(\"__scan_module__\", package_str)\n        if spec and spec.loader:\n            module = importlib.util.module_from_spec(spec)\n            spec.loader.exec_module(module)\n            for name in dir(module):\n                obj = getattr(module, name)\n                if is_injectable(obj):\n                    auto_register(self, obj)\n    else:\n        # \u5305\u540d\u626b\u63cf\n        with contextlib.suppress(ImportError):\n            module = importlib.import_module(package)\n            for _, name, _ in pkgutil.walk_packages(\n                module.__path__,\n                prefix=f\"{package}.\",\n            ):\n                with contextlib.suppress(ImportError, AttributeError):\n                    sub_module = importlib.import_module(name)\n                    for attr_name in dir(sub_module):\n                        obj = getattr(sub_module, attr_name)\n                        if is_injectable(obj):\n                            auto_register(self, obj)\n\n    return self\n</code></pre>"},{"location":"zh/guaids/container/#symphra_container.container.Container.try_resolve","title":"<code>try_resolve(key, default=None)</code>","text":"<p>\u5c1d\u8bd5\u89e3\u6790\u670d\u52a1,\u5931\u8d25\u8fd4\u56de\u9ed8\u8ba4\u503c.</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>key</code> <code>ServiceKey</code> <p>\u670d\u52a1\u952e</p> \u5fc5\u9700 <code>default</code> <code>T | None</code> <p>\u5931\u8d25\u65f6\u7684\u9ed8\u8ba4\u503c</p> <code>None</code> <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>T | None</code> <p>\u670d\u52a1\u5b9e\u4f8b\u6216\u9ed8\u8ba4\u503c</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>&gt;&gt;&gt; service = container.try_resolve(OptionalService)\n&gt;&gt;&gt; if service is None:\n...     print(\"Service not found\")\n</code></pre> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/container.py</code> <pre><code>def try_resolve(self, key: ServiceKey, default: T | None = None) -&gt; T | None:\n    \"\"\"\u5c1d\u8bd5\u89e3\u6790\u670d\u52a1,\u5931\u8d25\u8fd4\u56de\u9ed8\u8ba4\u503c.\n\n    Args:\n        key: \u670d\u52a1\u952e\n        default: \u5931\u8d25\u65f6\u7684\u9ed8\u8ba4\u503c\n\n    Returns:\n        \u670d\u52a1\u5b9e\u4f8b\u6216\u9ed8\u8ba4\u503c\n\n    Examples:\n        &gt;&gt;&gt; service = container.try_resolve(OptionalService)\n        &gt;&gt;&gt; if service is None:\n        ...     print(\"Service not found\")\n    \"\"\"\n    try:\n        return self.resolve(key)  # type: ignore[return-value]\n    except (ServiceNotFoundError, ResolutionError):\n        return default\n</code></pre>"},{"location":"zh/guaids/container/#symphra_container.container.Container.try_resolve_async","title":"<code>try_resolve_async(key, default=None)</code>  <code>async</code>","text":"<p>\u5f02\u6b65\u5c1d\u8bd5\u89e3\u6790\u670d\u52a1,\u5931\u8d25\u8fd4\u56de\u9ed8\u8ba4\u503c.</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>key</code> <code>ServiceKey</code> <p>\u670d\u52a1\u952e</p> \u5fc5\u9700 <code>default</code> <code>T | None</code> <p>\u5931\u8d25\u65f6\u7684\u9ed8\u8ba4\u503c</p> <code>None</code> <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>T | None</code> <p>\u670d\u52a1\u5b9e\u4f8b\u6216\u9ed8\u8ba4\u503c</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>&gt;&gt;&gt; service = await container.try_resolve_async(OptionalService)\n&gt;&gt;&gt; if service is None:\n...     print(\"Service not found\")\n</code></pre> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/container.py</code> <pre><code>async def try_resolve_async(self, key: ServiceKey, default: T | None = None) -&gt; T | None:\n    \"\"\"\u5f02\u6b65\u5c1d\u8bd5\u89e3\u6790\u670d\u52a1,\u5931\u8d25\u8fd4\u56de\u9ed8\u8ba4\u503c.\n\n    Args:\n        key: \u670d\u52a1\u952e\n        default: \u5931\u8d25\u65f6\u7684\u9ed8\u8ba4\u503c\n\n    Returns:\n        \u670d\u52a1\u5b9e\u4f8b\u6216\u9ed8\u8ba4\u503c\n\n    Examples:\n        &gt;&gt;&gt; service = await container.try_resolve_async(OptionalService)\n        &gt;&gt;&gt; if service is None:\n        ...     print(\"Service not found\")\n    \"\"\"\n    try:\n        return await self.resolve_async(key)  # type: ignore[return-value]\n    except (ServiceNotFoundError, ResolutionError):\n        return default\n</code></pre>"},{"location":"zh/guaids/container/#symphra_container.container.Container.unregister","title":"<code>unregister(key)</code>","text":"<p>\u5220\u9664\u670d\u52a1\u6ce8\u518c.</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>key</code> <code>ServiceKey</code> <p>\u670d\u52a1\u952e</p> \u5fc5\u9700 <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>bool</code> <p>\u662f\u5426\u6210\u529f\u5220\u9664</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>&gt;&gt;&gt; container.register(Service)\n&gt;&gt;&gt; container.unregister(Service)\nTrue\n</code></pre> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/container.py</code> <pre><code>def unregister(self, key: ServiceKey) -&gt; bool:\n    \"\"\"\u5220\u9664\u670d\u52a1\u6ce8\u518c.\n\n    Args:\n        key: \u670d\u52a1\u952e\n\n    Returns:\n        \u662f\u5426\u6210\u529f\u5220\u9664\n\n    Examples:\n        &gt;&gt;&gt; container.register(Service)\n        &gt;&gt;&gt; container.unregister(Service)\n        True\n    \"\"\"\n    # \u89e3\u6790\u522b\u540d\n    actual_key = self._aliases.get(key, key) if isinstance(key, str) else key\n\n    if actual_key in self._registrations:\n        del self._registrations[actual_key]\n        # \u6e05\u7406\u8be5\u670d\u52a1\u7684\u5b9e\u4f8b\n        self._lifetime_manager.remove_instance(actual_key)\n        return True\n    return False\n</code></pre>"},{"location":"zh/guaids/container/#symphra_container.container.Container.warmup","title":"<code>warmup(*keys)</code>","text":"<p>\u9884\u70ed\u670d\u52a1,\u63d0\u524d\u521b\u5efa\u5355\u4f8b\u5b9e\u4f8b.</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>*keys</code> <code>ServiceKey</code> <p>\u8981\u9884\u70ed\u7684\u670d\u52a1\u952e,\u4e0d\u63d0\u4f9b\u5219\u9884\u70ed\u6240\u6709\u5355\u4f8b</p> <code>()</code> <p>\u793a\u4f8b\uff1a</p> <pre><code>&gt;&gt;&gt; container.warmup(DatabaseService, CacheService)\n&gt;&gt;&gt; container.warmup()  # \u9884\u70ed\u6240\u6709\u5355\u4f8b\n</code></pre> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/container.py</code> <pre><code>def warmup(self, *keys: ServiceKey) -&gt; None:\n    \"\"\"\u9884\u70ed\u670d\u52a1,\u63d0\u524d\u521b\u5efa\u5355\u4f8b\u5b9e\u4f8b.\n\n    Args:\n        *keys: \u8981\u9884\u70ed\u7684\u670d\u52a1\u952e,\u4e0d\u63d0\u4f9b\u5219\u9884\u70ed\u6240\u6709\u5355\u4f8b\n\n    Examples:\n        &gt;&gt;&gt; container.warmup(DatabaseService, CacheService)\n        &gt;&gt;&gt; container.warmup()  # \u9884\u70ed\u6240\u6709\u5355\u4f8b\n    \"\"\"\n    import contextlib\n\n    if not keys:\n        # \u9884\u70ed\u6240\u6709\u5355\u4f8b\n        keys = tuple(key for key, reg in self._registrations.items() if reg.lifetime == Lifetime.SINGLETON)\n\n    for key in keys:\n        # \u9884\u70ed\u5931\u8d25\u4e0d\u5f71\u54cd\u540e\u7eed\u670d\u52a1\n        with contextlib.suppress(ContainerException, ResolutionError):\n            self.resolve(key)\n</code></pre>"},{"location":"zh/guaids/container/#symphra_container.container.Container.warmup_async","title":"<code>warmup_async(*keys)</code>  <code>async</code>","text":"<p>\u5f02\u6b65\u9884\u70ed\u670d\u52a1,\u63d0\u524d\u521b\u5efa\u5355\u4f8b\u5b9e\u4f8b.</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>*keys</code> <code>ServiceKey</code> <p>\u8981\u9884\u70ed\u7684\u670d\u52a1\u952e,\u4e0d\u63d0\u4f9b\u5219\u9884\u70ed\u6240\u6709\u5355\u4f8b</p> <code>()</code> <p>\u793a\u4f8b\uff1a</p> <pre><code>&gt;&gt;&gt; await container.warmup_async(DatabaseService, CacheService)\n&gt;&gt;&gt; await container.warmup_async()  # \u9884\u70ed\u6240\u6709\u5355\u4f8b\n</code></pre> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/container.py</code> <pre><code>async def warmup_async(self, *keys: ServiceKey) -&gt; None:\n    \"\"\"\u5f02\u6b65\u9884\u70ed\u670d\u52a1,\u63d0\u524d\u521b\u5efa\u5355\u4f8b\u5b9e\u4f8b.\n\n    Args:\n        *keys: \u8981\u9884\u70ed\u7684\u670d\u52a1\u952e,\u4e0d\u63d0\u4f9b\u5219\u9884\u70ed\u6240\u6709\u5355\u4f8b\n\n    Examples:\n        &gt;&gt;&gt; await container.warmup_async(DatabaseService, CacheService)\n        &gt;&gt;&gt; await container.warmup_async()  # \u9884\u70ed\u6240\u6709\u5355\u4f8b\n    \"\"\"\n    import contextlib\n\n    if not keys:\n        # \u9884\u70ed\u6240\u6709\u5355\u4f8b\n        keys = tuple(key for key, reg in self._registrations.items() if reg.lifetime == Lifetime.SINGLETON)\n\n    for key in keys:\n        # \u9884\u70ed\u5931\u8d25\u4e0d\u5f71\u54cd\u540e\u7eed\u670d\u52a1\n        with contextlib.suppress(ContainerException, ResolutionError):\n            await self.resolve_async(key)\n</code></pre>"},{"location":"zh/guaids/generics-generic-key/","title":"\u6cdb\u578b\u952e\uff08GenericKey\uff09","text":""},{"location":"zh/guaids/generics-generic-key/#symphra_container.generics.GenericKey","title":"<code>symphra_container.generics.GenericKey</code>","text":"<p>\u6cdb\u578b\u7c7b\u578b\u952e.</p> <p>\u7528\u4e8e\u533a\u5206\u4e0d\u540c\u53c2\u6570\u7684\u6cdb\u578b\u7c7b\u578b\uff0c\u4f8b\u5982 Repository[User] \u548c Repository[Order]\u3002</p> <p>\u5c5e\u6027\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 <code>origin</code> <p>\u6cdb\u578b\u57fa\u7c7b (\u4f8b\u5982 Repository)</p> <code>args</code> <p>\u7c7b\u578b\u53c2\u6570 (\u4f8b\u5982 (User,))</p> \u793a\u4f8b <p>key1 = GenericKey(Repository, (User,)) key2 = GenericKey(Repository, (Order,)) key1 == key2  # False key1 == GenericKey(Repository, (User,))  # True</p> Source code in <code>src/symphra_container/generics.py</code> <pre><code>class GenericKey:\n    \"\"\"\u6cdb\u578b\u7c7b\u578b\u952e.\n\n    \u7528\u4e8e\u533a\u5206\u4e0d\u540c\u53c2\u6570\u7684\u6cdb\u578b\u7c7b\u578b\uff0c\u4f8b\u5982 Repository[User] \u548c Repository[Order]\u3002\n\n    Attributes:\n        origin: \u6cdb\u578b\u57fa\u7c7b (\u4f8b\u5982 Repository)\n        args: \u7c7b\u578b\u53c2\u6570 (\u4f8b\u5982 (User,))\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; key1 = GenericKey(Repository, (User,))\n        &gt;&gt;&gt; key2 = GenericKey(Repository, (Order,))\n        &gt;&gt;&gt; key1 == key2  # False\n        &gt;&gt;&gt; key1 == GenericKey(Repository, (User,))  # True\n    \"\"\"\n\n    def __init__(self, origin: type, args: tuple[type, ...]) -&gt; None:\n        \"\"\"\u521d\u59cb\u5316\u6cdb\u578b\u952e.\n\n        Args:\n            origin: \u6cdb\u578b\u57fa\u7c7b\n            args: \u7c7b\u578b\u53c2\u6570\u5143\u7ec4\n        \"\"\"\n        self.origin = origin\n        self.args = args\n\n    def __eq__(self, other: object) -&gt; bool:\n        \"\"\"\u5224\u65ad\u76f8\u7b49.\"\"\"\n        if not isinstance(other, GenericKey):\n            return False\n        return self.origin == other.origin and self.args == other.args\n\n    def __hash__(self) -&gt; int:\n        \"\"\"\u8ba1\u7b97\u54c8\u5e0c\u503c.\"\"\"\n        return hash((self.origin, self.args))\n\n    def __repr__(self) -&gt; str:\n        \"\"\"\u5b57\u7b26\u4e32\u8868\u793a.\"\"\"\n        args_str = \", \".join(arg.__name__ for arg in self.args)\n        return f\"{self.origin.__name__}[{args_str}]\"\n</code></pre>"},{"location":"zh/guaids/generics-generic-key/#symphra_container.generics.GenericKey.__eq__","title":"<code>__eq__(other)</code>","text":"<p>\u5224\u65ad\u76f8\u7b49.</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/generics.py</code> <pre><code>def __eq__(self, other: object) -&gt; bool:\n    \"\"\"\u5224\u65ad\u76f8\u7b49.\"\"\"\n    if not isinstance(other, GenericKey):\n        return False\n    return self.origin == other.origin and self.args == other.args\n</code></pre>"},{"location":"zh/guaids/generics-generic-key/#symphra_container.generics.GenericKey.__hash__","title":"<code>__hash__()</code>","text":"<p>\u8ba1\u7b97\u54c8\u5e0c\u503c.</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/generics.py</code> <pre><code>def __hash__(self) -&gt; int:\n    \"\"\"\u8ba1\u7b97\u54c8\u5e0c\u503c.\"\"\"\n    return hash((self.origin, self.args))\n</code></pre>"},{"location":"zh/guaids/generics-generic-key/#symphra_container.generics.GenericKey.__init__","title":"<code>__init__(origin, args)</code>","text":"<p>\u521d\u59cb\u5316\u6cdb\u578b\u952e.</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>origin</code> <code>type</code> <p>\u6cdb\u578b\u57fa\u7c7b</p> \u5fc5\u9700 <code>args</code> <code>tuple[type, ...]</code> <p>\u7c7b\u578b\u53c2\u6570\u5143\u7ec4</p> \u5fc5\u9700 \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/generics.py</code> <pre><code>def __init__(self, origin: type, args: tuple[type, ...]) -&gt; None:\n    \"\"\"\u521d\u59cb\u5316\u6cdb\u578b\u952e.\n\n    Args:\n        origin: \u6cdb\u578b\u57fa\u7c7b\n        args: \u7c7b\u578b\u53c2\u6570\u5143\u7ec4\n    \"\"\"\n    self.origin = origin\n    self.args = args\n</code></pre>"},{"location":"zh/guaids/generics-generic-key/#symphra_container.generics.GenericKey.__repr__","title":"<code>__repr__()</code>","text":"<p>\u5b57\u7b26\u4e32\u8868\u793a.</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/generics.py</code> <pre><code>def __repr__(self) -&gt; str:\n    \"\"\"\u5b57\u7b26\u4e32\u8868\u793a.\"\"\"\n    args_str = \", \".join(arg.__name__ for arg in self.args)\n    return f\"{self.origin.__name__}[{args_str}]\"\n</code></pre>"},{"location":"zh/guaids/generics-register-generic/","title":"\u6ce8\u518c\u6cdb\u578b\uff08register_generic\uff09","text":""},{"location":"zh/guaids/generics-register-generic/#symphra_container.generics.register_generic","title":"<code>symphra_container.generics.register_generic(container, generic_type, implementation=None, factory=None, lifetime=None)</code>","text":"<p>\u6ce8\u518c\u6cdb\u578b\u670d\u52a1.</p> <p>\u652f\u6301\u533a\u5206\u4e0d\u540c\u7c7b\u578b\u53c2\u6570\u7684\u6cdb\u578b\u670d\u52a1\u3002</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>container</code> <code>Container</code> <p>\u5bb9\u5668\u5b9e\u4f8b</p> \u5fc5\u9700 <code>generic_type</code> <code>Any</code> <p>\u6cdb\u578b\u7c7b\u578b\uff0c\u4f8b\u5982 Repository[User]</p> \u5fc5\u9700 <code>implementation</code> <code>type | None</code> <p>\u5b9e\u73b0\u7c7b\uff08\u53ef\u9009\uff09</p> <code>None</code> <code>factory</code> <code>Any</code> <p>\u5de5\u5382\u51fd\u6570\uff08\u53ef\u9009\uff09</p> <code>None</code> <code>lifetime</code> <code>Any</code> <p>\u751f\u547d\u5468\u671f\uff08\u53ef\u9009\uff09</p> <code>None</code> <p>\u5f15\u53d1\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>ValueError</code> <p>\u5982\u679c\u4e0d\u662f\u6709\u6548\u7684\u6cdb\u578b\u7c7b\u578b</p> \u793a\u4f8b <p>register_generic(container, Repository[User], UserRepository) register_generic(container, Repository[Order], OrderRepository) register_generic( ...     container, ...     Repository[Product], ...     factory=lambda: ProductRepository() ... )</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/generics.py</code> <pre><code>def register_generic(\n    container: Container,\n    generic_type: Any,\n    implementation: type | None = None,\n    factory: Any = None,\n    lifetime: Any = None,\n) -&gt; None:\n    \"\"\"\u6ce8\u518c\u6cdb\u578b\u670d\u52a1.\n\n    \u652f\u6301\u533a\u5206\u4e0d\u540c\u7c7b\u578b\u53c2\u6570\u7684\u6cdb\u578b\u670d\u52a1\u3002\n\n    Args:\n        container: \u5bb9\u5668\u5b9e\u4f8b\n        generic_type: \u6cdb\u578b\u7c7b\u578b\uff0c\u4f8b\u5982 Repository[User]\n        implementation: \u5b9e\u73b0\u7c7b\uff08\u53ef\u9009\uff09\n        factory: \u5de5\u5382\u51fd\u6570\uff08\u53ef\u9009\uff09\n        lifetime: \u751f\u547d\u5468\u671f\uff08\u53ef\u9009\uff09\n\n    Raises:\n        ValueError: \u5982\u679c\u4e0d\u662f\u6709\u6548\u7684\u6cdb\u578b\u7c7b\u578b\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; register_generic(container, Repository[User], UserRepository)\n        &gt;&gt;&gt; register_generic(container, Repository[Order], OrderRepository)\n        &gt;&gt;&gt; register_generic(\n        ...     container,\n        ...     Repository[Product],\n        ...     factory=lambda: ProductRepository()\n        ... )\n    \"\"\"\n    from .types import Lifetime as LifetimeEnum\n\n    generic_key = _extract_generic_info(generic_type)\n    if generic_key is None:\n        msg = f\"Not a valid generic type: {generic_type}\"\n        raise ValueError(msg)\n\n    # \u4f7f\u7528 GenericKey \u4f5c\u4e3a\u670d\u52a1\u952e\n    if factory:\n        container.register_factory(\n            generic_key,  # type: ignore\n            factory,\n            lifetime=lifetime or LifetimeEnum.TRANSIENT,\n        )\n    elif implementation:\n        container.register(\n            implementation,\n            key=generic_key,  # type: ignore\n            lifetime=lifetime or LifetimeEnum.TRANSIENT,\n        )\n    else:\n        msg = \"Either implementation or factory must be provided\"\n        raise ValueError(msg)\n</code></pre>"},{"location":"zh/guaids/generics-resolve-generic/","title":"\u89e3\u6790\u6cdb\u578b\uff08resolve_generic\uff09","text":""},{"location":"zh/guaids/generics-resolve-generic/#symphra_container.generics.resolve_generic","title":"<code>symphra_container.generics.resolve_generic(container, generic_type)</code>","text":"<p>\u89e3\u6790\u6cdb\u578b\u670d\u52a1.</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>container</code> <code>Container</code> <p>\u5bb9\u5668\u5b9e\u4f8b</p> \u5fc5\u9700 <code>generic_type</code> <code>Any</code> <p>\u6cdb\u578b\u7c7b\u578b\uff0c\u4f8b\u5982 Repository[User]</p> \u5fc5\u9700 <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>Any</code> <p>\u89e3\u6790\u7684\u670d\u52a1\u5b9e\u4f8b</p> <p>\u5f15\u53d1\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>ValueError</code> <p>\u5982\u679c\u4e0d\u662f\u6709\u6548\u7684\u6cdb\u578b\u7c7b\u578b</p> <code>ServiceNotFoundError</code> <p>\u5982\u679c\u670d\u52a1\u672a\u6ce8\u518c</p> \u793a\u4f8b <p>user_repo = resolve_generic(container, Repository[User]) order_repo = resolve_generic(container, Repository[Order])</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/generics.py</code> <pre><code>def resolve_generic(container: Container, generic_type: Any) -&gt; Any:\n    \"\"\"\u89e3\u6790\u6cdb\u578b\u670d\u52a1.\n\n    Args:\n        container: \u5bb9\u5668\u5b9e\u4f8b\n        generic_type: \u6cdb\u578b\u7c7b\u578b\uff0c\u4f8b\u5982 Repository[User]\n\n    Returns:\n        \u89e3\u6790\u7684\u670d\u52a1\u5b9e\u4f8b\n\n    Raises:\n        ValueError: \u5982\u679c\u4e0d\u662f\u6709\u6548\u7684\u6cdb\u578b\u7c7b\u578b\n        ServiceNotFoundError: \u5982\u679c\u670d\u52a1\u672a\u6ce8\u518c\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; user_repo = resolve_generic(container, Repository[User])\n        &gt;&gt;&gt; order_repo = resolve_generic(container, Repository[Order])\n    \"\"\"\n    generic_key = _extract_generic_info(generic_type)\n    if generic_key is None:\n        msg = f\"Not a valid generic type: {generic_type}\"\n        raise ValueError(msg)\n\n    return container.resolve(generic_key)  # type: ignore\n</code></pre>"},{"location":"zh/guaids/injector-constructor/","title":"\u6784\u9020\u51fd\u6570\u6ce8\u5165\u5668\uff08ConstructorInjector\uff09","text":""},{"location":"zh/guaids/injector-constructor/#symphra_container.injector.ConstructorInjector","title":"<code>symphra_container.injector.ConstructorInjector</code>","text":"<p>\u6784\u9020\u51fd\u6570\u6ce8\u5165\u5668.</p> <p>\u5206\u6790\u670d\u52a1\u7c7b\u7684\u6784\u9020\u51fd\u6570,\u63d0\u53d6\u4f9d\u8d56\u5173\u7cfb, \u4e3a\u5bb9\u5668\u89e3\u6790\u670d\u52a1\u65f6\u63d0\u4f9b\u4f9d\u8d56.</p> <p>\u65b9\u6cd5\uff1a</p> \u540d\u79f0 \u63cf\u8ff0 <code>analyze_dependencies</code> <p>\u5206\u6790\u6784\u9020\u51fd\u6570\u4f9d\u8d56</p> <code>can_construct</code> <p>\u68c0\u67e5\u662f\u5426\u53ef\u4ee5\u6784\u5efa\u5b9e\u4f8b</p> <code>get_dependencies</code> <p>\u83b7\u53d6\u4f9d\u8d56\u5217\u8868</p> Source code in <code>src/symphra_container/injector.py</code> <pre><code>class ConstructorInjector:\n    \"\"\"\u6784\u9020\u51fd\u6570\u6ce8\u5165\u5668.\n\n    \u5206\u6790\u670d\u52a1\u7c7b\u7684\u6784\u9020\u51fd\u6570,\u63d0\u53d6\u4f9d\u8d56\u5173\u7cfb,\n    \u4e3a\u5bb9\u5668\u89e3\u6790\u670d\u52a1\u65f6\u63d0\u4f9b\u4f9d\u8d56.\n\n    Methods:\n        analyze_dependencies: \u5206\u6790\u6784\u9020\u51fd\u6570\u4f9d\u8d56\n        can_construct: \u68c0\u67e5\u662f\u5426\u53ef\u4ee5\u6784\u5efa\u5b9e\u4f8b\n        get_dependencies: \u83b7\u53d6\u4f9d\u8d56\u5217\u8868\n    \"\"\"\n\n    # \u7c7b\u7ea7\u522b\u7684\u4f9d\u8d56\u5206\u6790\u7f13\u5b58 - \u5927\u5e45\u63d0\u5347\u91cd\u590d\u89e3\u6790\u6027\u80fd\n    _dependency_cache: dict[type, list[DependencyInfo]] = {}\n\n    @classmethod\n    def clear_cache(cls) -&gt; None:\n        \"\"\"\u6e05\u7a7a\u4f9d\u8d56\u5206\u6790\u7f13\u5b58.\n\n        \u5728\u6d4b\u8bd5\u6216\u52a8\u6001\u52a0\u8f7d\u7c7b\u65f6\u53ef\u80fd\u9700\u8981\u6e05\u7a7a\u7f13\u5b58.\n        \"\"\"\n        cls._dependency_cache.clear()\n\n    @staticmethod\n    def _get_type_hints_safe(obj: Any) -&gt; dict[str, Any]:\n        \"\"\"\u5b89\u5168\u83b7\u53d6\u7c7b\u578b\u63d0\u793a\u4fe1\u606f.\n\n        Args:\n            obj: \u76ee\u6807\u5bf9\u8c61(\u7c7b\u6216\u51fd\u6570)\n\n        Returns:\n            \u7c7b\u578b\u63d0\u793a\u5b57\u5178\n        \"\"\"\n        try:\n            # \u83b7\u53d6\u5bf9\u8c61\u7684\u6a21\u5757\u547d\u540d\u7a7a\u95f4\u7528\u4e8e\u89e3\u6790\u5b57\u7b26\u4e32\u6ce8\u89e3\n            globalns = getattr(obj, \"__globals__\", None)\n            if globalns is None and hasattr(obj, \"__module__\"):\n                import sys\n                module = sys.modules.get(obj.__module__)\n                if module:\n                    globalns = vars(module)\n\n            # \u5982\u679c\u6709\u6a21\u5757\u547d\u540d\u7a7a\u95f4,\u4f20\u9012\u7ed9 get_type_hints\n            if globalns:\n                return get_type_hints(obj, globalns=globalns)\n            else:\n                return get_type_hints(obj)\n        except Exception:  # noqa: BLE001\n            return getattr(obj, \"__annotations__\", {})\n\n    @staticmethod\n    def _is_simple_type(param_type: type) -&gt; bool:\n        \"\"\"\u68c0\u67e5\u662f\u5426\u662f\u7b80\u5355\u7c7b\u578b.\n\n        Args:\n            param_type: \u53c2\u6570\u7c7b\u578b\n\n        Returns:\n            \u662f\u5426\u4e3a\u7b80\u5355\u7c7b\u578b\n        \"\"\"\n        simple_types = (str, int, bool, float, bytes, list, dict, set, tuple, type(None))\n        return param_type in simple_types\n\n    @staticmethod\n    def _extract_optional_type(param_type: Any) -&gt; tuple[bool, Any]:\n        \"\"\"\u63d0\u53d6\u53ef\u9009\u7c7b\u578b.\n\n        Args:\n            param_type: \u53c2\u6570\u7c7b\u578b\n\n        Returns:\n            (\u662f\u5426\u53ef\u9009, \u5b9e\u9645\u7c7b\u578b) \u5143\u7ec4\n        \"\"\"\n        origin = get_origin(param_type)\n        is_union_type = origin is Union or isinstance(param_type, types.UnionType)\n\n        if is_union_type:\n            args = get_args(param_type)\n            if type(None) in args:\n                non_none_types = [arg for arg in args if arg is not type(None)]\n                if non_none_types:\n                    return True, non_none_types[0]\n\n        return False, param_type\n\n    @staticmethod\n    def analyze_dependencies(service_class: type) -&gt; list[DependencyInfo]:\n        \"\"\"\u5206\u6790\u670d\u52a1\u7c7b\u7684\u6784\u9020\u51fd\u6570\u4f9d\u8d56.\n\n        \u901a\u8fc7\u68c0\u67e5 __init__ \u65b9\u6cd5\u7684\u53c2\u6570,\u63d0\u53d6\u6240\u6709\u4f9d\u8d56\u5173\u7cfb.\n        \u652f\u6301\u4ee5\u4e0b\u7279\u6027:\n        - \u7c7b\u578b\u6ce8\u89e3\u4f9d\u8d56\n        - \u53ef\u9009\u4f9d\u8d56(Optional[T])\n        - \u9ed8\u8ba4\u503c\n        - Injected \u6807\u8bb0\n\n        \u6027\u80fd\u4f18\u5316: \u4f7f\u7528\u7c7b\u7ea7\u522b\u7f13\u5b58,\u907f\u514d\u91cd\u590d\u5206\u6790\u76f8\u540c\u7684\u7c7b.\n\n        Args:\n            service_class: \u670d\u52a1\u7c7b\n\n        Returns:\n            \u4f9d\u8d56\u4fe1\u606f\u5217\u8868\n\n        Raises:\n            ResolutionError: \u65e0\u6cd5\u5206\u6790\u4f9d\u8d56\u65f6\n\n        Examples:\n            &gt;&gt;&gt; class UserService:\n            ...     def __init__(self, repo: UserRepository):\n            ...         self.repo = repo\n            &gt;&gt;&gt; deps = ConstructorInjector.analyze_dependencies(UserService)\n            &gt;&gt;&gt; assert len(deps) == 1\n            &gt;&gt;&gt; assert deps[0].service_key == UserRepository\n        \"\"\"\n        # \u6027\u80fd\u4f18\u5316: \u68c0\u67e5\u7f13\u5b58,\u907f\u514d\u91cd\u590d\u5206\u6790\n        if service_class in ConstructorInjector._dependency_cache:\n            return ConstructorInjector._dependency_cache[service_class]\n\n        dependencies: list[DependencyInfo] = []\n\n        try:\n            # \u6b65\u9aa4 1: \u83b7\u53d6\u6784\u9020\u51fd\u6570\u7b7e\u540d\n            init_method = service_class.__init__\n            signature = inspect.signature(init_method)\n\n            # \u6b65\u9aa4 2: \u5b89\u5168\u83b7\u53d6\u7c7b\u578b\u63d0\u793a\u4fe1\u606f\n            type_hints = ConstructorInjector._get_type_hints_safe(init_method)\n\n            # \u6b65\u9aa4 3: \u904d\u5386\u6240\u6709\u53c2\u6570\u8fdb\u884c\u4f9d\u8d56\u5206\u6790\n            for param_name, param in signature.parameters.items():\n                # \u8df3\u8fc7 self \u53c2\u6570\n                if param_name == \"self\":\n                    continue\n\n                # \u68c0\u67e5\u662f\u5426\u4f7f\u7528\u4e86\u663e\u5f0f\u7684 Injected \u6807\u8bb0\n                is_injected = isinstance(param.default, InjectionMarker)\n\n                # \u5fc5\u987b\u6709\u7c7b\u578b\u6ce8\u89e3\u624d\u80fd\u8fdb\u884c\u4f9d\u8d56\u6ce8\u5165\n                if param.annotation == inspect.Parameter.empty:\n                    continue\n\n                # \u83b7\u53d6\u53c2\u6570\u7684\u5b9e\u9645\u7c7b\u578b\n                param_type = type_hints.get(param_name, param.annotation)\n\n                # \u8fc7\u6ee4\u6389\u57fa\u7840\u6570\u636e\u7c7b\u578b(\u5b83\u4eec\u4e0d\u9700\u8981\u6ce8\u5165)\n                if ConstructorInjector._is_simple_type(param_type):\n                    continue\n\n                # \u5904\u7406\u53ef\u9009\u7c7b\u578b\u5e76\u63d0\u53d6\u771f\u5b9e\u7c7b\u578b\n                is_optional, actual_type = ConstructorInjector._extract_optional_type(param_type)\n\n                # \u5224\u65ad\u662f\u5426\u5e94\u8be5\u6dfb\u52a0\u6b64\u4f9d\u8d56:\n                # 1. \u663e\u5f0f\u6807\u8bb0\u4e86 Injected\n                # 2. \u6ca1\u6709\u9ed8\u8ba4\u503c(\u5fc5\u9700\u53c2\u6570)\n                # 3. \u662f\u53ef\u9009\u7c7b\u578b(Optional[T])\n                should_add = is_injected or param.default is inspect.Parameter.empty or is_optional\n                if should_add:\n                    # \u521b\u5efa\u4f9d\u8d56\u4fe1\u606f\u5bf9\u8c61\n                    dependency = DependencyInfo(\n                        parameter_name=param_name,\n                        service_key=actual_type,\n                        service_type=actual_type,\n                        is_optional=is_optional,\n                        default_value=param.default,\n                        is_injected=is_injected,\n                    )\n                    dependencies.append(dependency)\n\n            # \u6027\u80fd\u4f18\u5316: \u7f13\u5b58\u5206\u6790\u7ed3\u679c\n            ConstructorInjector._dependency_cache[service_class] = dependencies\n            return dependencies\n\n        except ResolutionError:\n            # \u91cd\u65b0\u629b\u51fa\u5df2\u77e5\u7684\u89e3\u6790\u9519\u8bef\n            raise\n        except Exception as e:\n            # \u5c06\u672a\u77e5\u5f02\u5e38\u5305\u88c5\u4e3a ResolutionError\n            raise ResolutionError(\n                service_class,\n                Exception(f\"Failed to analyze dependencies: {e!s}\"),\n            ) from e\n\n    @staticmethod\n    def can_construct(\n        service_class: type,\n        available_keys: set[ServiceKey],\n    ) -&gt; bool:\n        \"\"\"\u68c0\u67e5\u662f\u5426\u53ef\u4ee5\u6784\u5efa\u670d\u52a1\u5b9e\u4f8b.\n\n        \u901a\u8fc7\u68c0\u67e5\u6240\u6709\u4f9d\u8d56\u662f\u5426\u90fd\u5728\u53ef\u7528\u7684\u670d\u52a1\u952e\u4e2d,\n        \u5224\u65ad\u662f\u5426\u80fd\u591f\u6210\u529f\u6784\u5efa\u5b9e\u4f8b.\n\n        Args:\n            service_class: \u670d\u52a1\u7c7b\n            available_keys: \u53ef\u7528\u7684\u670d\u52a1\u952e\u96c6\u5408\n\n        Returns:\n            \u662f\u5426\u53ef\u4ee5\u6784\u5efa\n        \"\"\"\n        dependencies = ConstructorInjector.analyze_dependencies(service_class)\n\n        return all(not (not dep.is_optional and dep.service_key not in available_keys) for dep in dependencies)\n\n    @staticmethod\n    def get_dependencies(service_class: type) -&gt; dict[str, DependencyInfo]:\n        \"\"\"\u83b7\u53d6\u4f9d\u8d56\u5b57\u5178.\n\n        \u4ee5\u53c2\u6570\u540d\u4e3a\u952e,\u4f9d\u8d56\u4fe1\u606f\u4e3a\u503c\u7684\u5b57\u5178\u5f62\u5f0f\u8fd4\u56de\u4f9d\u8d56.\n\n        Args:\n            service_class: \u670d\u52a1\u7c7b\n\n        Returns:\n            \u4f9d\u8d56\u5b57\u5178\n        \"\"\"\n        dependencies = ConstructorInjector.analyze_dependencies(service_class)\n        return {dep.parameter_name: dep for dep in dependencies}\n</code></pre>"},{"location":"zh/guaids/injector-constructor/#symphra_container.injector.ConstructorInjector.analyze_dependencies","title":"<code>analyze_dependencies(service_class)</code>  <code>staticmethod</code>","text":"<p>\u5206\u6790\u670d\u52a1\u7c7b\u7684\u6784\u9020\u51fd\u6570\u4f9d\u8d56.</p> <p>\u901a\u8fc7\u68c0\u67e5 init \u65b9\u6cd5\u7684\u53c2\u6570,\u63d0\u53d6\u6240\u6709\u4f9d\u8d56\u5173\u7cfb. \u652f\u6301\u4ee5\u4e0b\u7279\u6027: - \u7c7b\u578b\u6ce8\u89e3\u4f9d\u8d56 - \u53ef\u9009\u4f9d\u8d56(Optional[T]) - \u9ed8\u8ba4\u503c - Injected \u6807\u8bb0</p> <p>\u6027\u80fd\u4f18\u5316: \u4f7f\u7528\u7c7b\u7ea7\u522b\u7f13\u5b58,\u907f\u514d\u91cd\u590d\u5206\u6790\u76f8\u540c\u7684\u7c7b.</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>service_class</code> <code>type</code> <p>\u670d\u52a1\u7c7b</p> \u5fc5\u9700 <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>list[DependencyInfo]</code> <p>\u4f9d\u8d56\u4fe1\u606f\u5217\u8868</p> <p>\u5f15\u53d1\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>ResolutionError</code> <p>\u65e0\u6cd5\u5206\u6790\u4f9d\u8d56\u65f6</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>&gt;&gt;&gt; class UserService:\n...     def __init__(self, repo: UserRepository):\n...         self.repo = repo\n&gt;&gt;&gt; deps = ConstructorInjector.analyze_dependencies(UserService)\n&gt;&gt;&gt; assert len(deps) == 1\n&gt;&gt;&gt; assert deps[0].service_key == UserRepository\n</code></pre> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/injector.py</code> <pre><code>@staticmethod\ndef analyze_dependencies(service_class: type) -&gt; list[DependencyInfo]:\n    \"\"\"\u5206\u6790\u670d\u52a1\u7c7b\u7684\u6784\u9020\u51fd\u6570\u4f9d\u8d56.\n\n    \u901a\u8fc7\u68c0\u67e5 __init__ \u65b9\u6cd5\u7684\u53c2\u6570,\u63d0\u53d6\u6240\u6709\u4f9d\u8d56\u5173\u7cfb.\n    \u652f\u6301\u4ee5\u4e0b\u7279\u6027:\n    - \u7c7b\u578b\u6ce8\u89e3\u4f9d\u8d56\n    - \u53ef\u9009\u4f9d\u8d56(Optional[T])\n    - \u9ed8\u8ba4\u503c\n    - Injected \u6807\u8bb0\n\n    \u6027\u80fd\u4f18\u5316: \u4f7f\u7528\u7c7b\u7ea7\u522b\u7f13\u5b58,\u907f\u514d\u91cd\u590d\u5206\u6790\u76f8\u540c\u7684\u7c7b.\n\n    Args:\n        service_class: \u670d\u52a1\u7c7b\n\n    Returns:\n        \u4f9d\u8d56\u4fe1\u606f\u5217\u8868\n\n    Raises:\n        ResolutionError: \u65e0\u6cd5\u5206\u6790\u4f9d\u8d56\u65f6\n\n    Examples:\n        &gt;&gt;&gt; class UserService:\n        ...     def __init__(self, repo: UserRepository):\n        ...         self.repo = repo\n        &gt;&gt;&gt; deps = ConstructorInjector.analyze_dependencies(UserService)\n        &gt;&gt;&gt; assert len(deps) == 1\n        &gt;&gt;&gt; assert deps[0].service_key == UserRepository\n    \"\"\"\n    # \u6027\u80fd\u4f18\u5316: \u68c0\u67e5\u7f13\u5b58,\u907f\u514d\u91cd\u590d\u5206\u6790\n    if service_class in ConstructorInjector._dependency_cache:\n        return ConstructorInjector._dependency_cache[service_class]\n\n    dependencies: list[DependencyInfo] = []\n\n    try:\n        # \u6b65\u9aa4 1: \u83b7\u53d6\u6784\u9020\u51fd\u6570\u7b7e\u540d\n        init_method = service_class.__init__\n        signature = inspect.signature(init_method)\n\n        # \u6b65\u9aa4 2: \u5b89\u5168\u83b7\u53d6\u7c7b\u578b\u63d0\u793a\u4fe1\u606f\n        type_hints = ConstructorInjector._get_type_hints_safe(init_method)\n\n        # \u6b65\u9aa4 3: \u904d\u5386\u6240\u6709\u53c2\u6570\u8fdb\u884c\u4f9d\u8d56\u5206\u6790\n        for param_name, param in signature.parameters.items():\n            # \u8df3\u8fc7 self \u53c2\u6570\n            if param_name == \"self\":\n                continue\n\n            # \u68c0\u67e5\u662f\u5426\u4f7f\u7528\u4e86\u663e\u5f0f\u7684 Injected \u6807\u8bb0\n            is_injected = isinstance(param.default, InjectionMarker)\n\n            # \u5fc5\u987b\u6709\u7c7b\u578b\u6ce8\u89e3\u624d\u80fd\u8fdb\u884c\u4f9d\u8d56\u6ce8\u5165\n            if param.annotation == inspect.Parameter.empty:\n                continue\n\n            # \u83b7\u53d6\u53c2\u6570\u7684\u5b9e\u9645\u7c7b\u578b\n            param_type = type_hints.get(param_name, param.annotation)\n\n            # \u8fc7\u6ee4\u6389\u57fa\u7840\u6570\u636e\u7c7b\u578b(\u5b83\u4eec\u4e0d\u9700\u8981\u6ce8\u5165)\n            if ConstructorInjector._is_simple_type(param_type):\n                continue\n\n            # \u5904\u7406\u53ef\u9009\u7c7b\u578b\u5e76\u63d0\u53d6\u771f\u5b9e\u7c7b\u578b\n            is_optional, actual_type = ConstructorInjector._extract_optional_type(param_type)\n\n            # \u5224\u65ad\u662f\u5426\u5e94\u8be5\u6dfb\u52a0\u6b64\u4f9d\u8d56:\n            # 1. \u663e\u5f0f\u6807\u8bb0\u4e86 Injected\n            # 2. \u6ca1\u6709\u9ed8\u8ba4\u503c(\u5fc5\u9700\u53c2\u6570)\n            # 3. \u662f\u53ef\u9009\u7c7b\u578b(Optional[T])\n            should_add = is_injected or param.default is inspect.Parameter.empty or is_optional\n            if should_add:\n                # \u521b\u5efa\u4f9d\u8d56\u4fe1\u606f\u5bf9\u8c61\n                dependency = DependencyInfo(\n                    parameter_name=param_name,\n                    service_key=actual_type,\n                    service_type=actual_type,\n                    is_optional=is_optional,\n                    default_value=param.default,\n                    is_injected=is_injected,\n                )\n                dependencies.append(dependency)\n\n        # \u6027\u80fd\u4f18\u5316: \u7f13\u5b58\u5206\u6790\u7ed3\u679c\n        ConstructorInjector._dependency_cache[service_class] = dependencies\n        return dependencies\n\n    except ResolutionError:\n        # \u91cd\u65b0\u629b\u51fa\u5df2\u77e5\u7684\u89e3\u6790\u9519\u8bef\n        raise\n    except Exception as e:\n        # \u5c06\u672a\u77e5\u5f02\u5e38\u5305\u88c5\u4e3a ResolutionError\n        raise ResolutionError(\n            service_class,\n            Exception(f\"Failed to analyze dependencies: {e!s}\"),\n        ) from e\n</code></pre>"},{"location":"zh/guaids/injector-constructor/#symphra_container.injector.ConstructorInjector.can_construct","title":"<code>can_construct(service_class, available_keys)</code>  <code>staticmethod</code>","text":"<p>\u68c0\u67e5\u662f\u5426\u53ef\u4ee5\u6784\u5efa\u670d\u52a1\u5b9e\u4f8b.</p> <p>\u901a\u8fc7\u68c0\u67e5\u6240\u6709\u4f9d\u8d56\u662f\u5426\u90fd\u5728\u53ef\u7528\u7684\u670d\u52a1\u952e\u4e2d, \u5224\u65ad\u662f\u5426\u80fd\u591f\u6210\u529f\u6784\u5efa\u5b9e\u4f8b.</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>service_class</code> <code>type</code> <p>\u670d\u52a1\u7c7b</p> \u5fc5\u9700 <code>available_keys</code> <code>set[ServiceKey]</code> <p>\u53ef\u7528\u7684\u670d\u52a1\u952e\u96c6\u5408</p> \u5fc5\u9700 <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>bool</code> <p>\u662f\u5426\u53ef\u4ee5\u6784\u5efa</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/injector.py</code> <pre><code>@staticmethod\ndef can_construct(\n    service_class: type,\n    available_keys: set[ServiceKey],\n) -&gt; bool:\n    \"\"\"\u68c0\u67e5\u662f\u5426\u53ef\u4ee5\u6784\u5efa\u670d\u52a1\u5b9e\u4f8b.\n\n    \u901a\u8fc7\u68c0\u67e5\u6240\u6709\u4f9d\u8d56\u662f\u5426\u90fd\u5728\u53ef\u7528\u7684\u670d\u52a1\u952e\u4e2d,\n    \u5224\u65ad\u662f\u5426\u80fd\u591f\u6210\u529f\u6784\u5efa\u5b9e\u4f8b.\n\n    Args:\n        service_class: \u670d\u52a1\u7c7b\n        available_keys: \u53ef\u7528\u7684\u670d\u52a1\u952e\u96c6\u5408\n\n    Returns:\n        \u662f\u5426\u53ef\u4ee5\u6784\u5efa\n    \"\"\"\n    dependencies = ConstructorInjector.analyze_dependencies(service_class)\n\n    return all(not (not dep.is_optional and dep.service_key not in available_keys) for dep in dependencies)\n</code></pre>"},{"location":"zh/guaids/injector-constructor/#symphra_container.injector.ConstructorInjector.clear_cache","title":"<code>clear_cache()</code>  <code>classmethod</code>","text":"<p>\u6e05\u7a7a\u4f9d\u8d56\u5206\u6790\u7f13\u5b58.</p> <p>\u5728\u6d4b\u8bd5\u6216\u52a8\u6001\u52a0\u8f7d\u7c7b\u65f6\u53ef\u80fd\u9700\u8981\u6e05\u7a7a\u7f13\u5b58.</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/injector.py</code> <pre><code>@classmethod\ndef clear_cache(cls) -&gt; None:\n    \"\"\"\u6e05\u7a7a\u4f9d\u8d56\u5206\u6790\u7f13\u5b58.\n\n    \u5728\u6d4b\u8bd5\u6216\u52a8\u6001\u52a0\u8f7d\u7c7b\u65f6\u53ef\u80fd\u9700\u8981\u6e05\u7a7a\u7f13\u5b58.\n    \"\"\"\n    cls._dependency_cache.clear()\n</code></pre>"},{"location":"zh/guaids/injector-constructor/#symphra_container.injector.ConstructorInjector.get_dependencies","title":"<code>get_dependencies(service_class)</code>  <code>staticmethod</code>","text":"<p>\u83b7\u53d6\u4f9d\u8d56\u5b57\u5178.</p> <p>\u4ee5\u53c2\u6570\u540d\u4e3a\u952e,\u4f9d\u8d56\u4fe1\u606f\u4e3a\u503c\u7684\u5b57\u5178\u5f62\u5f0f\u8fd4\u56de\u4f9d\u8d56.</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>service_class</code> <code>type</code> <p>\u670d\u52a1\u7c7b</p> \u5fc5\u9700 <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>dict[str, DependencyInfo]</code> <p>\u4f9d\u8d56\u5b57\u5178</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/injector.py</code> <pre><code>@staticmethod\ndef get_dependencies(service_class: type) -&gt; dict[str, DependencyInfo]:\n    \"\"\"\u83b7\u53d6\u4f9d\u8d56\u5b57\u5178.\n\n    \u4ee5\u53c2\u6570\u540d\u4e3a\u952e,\u4f9d\u8d56\u4fe1\u606f\u4e3a\u503c\u7684\u5b57\u5178\u5f62\u5f0f\u8fd4\u56de\u4f9d\u8d56.\n\n    Args:\n        service_class: \u670d\u52a1\u7c7b\n\n    Returns:\n        \u4f9d\u8d56\u5b57\u5178\n    \"\"\"\n    dependencies = ConstructorInjector.analyze_dependencies(service_class)\n    return {dep.parameter_name: dep for dep in dependencies}\n</code></pre>"},{"location":"zh/guaids/injector-dependency-info/","title":"\u4f9d\u8d56\u4fe1\u606f\uff08DependencyInfo\uff09","text":""},{"location":"zh/guaids/injector-dependency-info/#symphra_container.injector.DependencyInfo","title":"<code>symphra_container.injector.DependencyInfo</code>","text":"<p>\u4f9d\u8d56\u4fe1\u606f.</p> <p>\u5b58\u50a8\u5355\u4e2a\u4f9d\u8d56\u7684\u76f8\u5173\u4fe1\u606f.</p> <p>\u5c5e\u6027\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 <code>parameter_name</code> <p>\u53c2\u6570\u540d\u79f0</p> <code>service_key</code> <p>\u670d\u52a1\u952e(\u7c7b\u578b\u6216\u5b57\u7b26\u4e32)</p> <code>service_type</code> <p>\u670d\u52a1\u7c7b\u578b</p> <code>is_optional</code> <p>\u662f\u5426\u53ef\u9009</p> <code>default_value</code> <p>\u9ed8\u8ba4\u503c</p> <code>is_injected</code> <p>\u662f\u5426\u4f7f\u7528 Injected \u6807\u8bb0</p> Source code in <code>src/symphra_container/injector.py</code> <pre><code>class DependencyInfo:\n    \"\"\"\u4f9d\u8d56\u4fe1\u606f.\n\n    \u5b58\u50a8\u5355\u4e2a\u4f9d\u8d56\u7684\u76f8\u5173\u4fe1\u606f.\n\n    Attributes:\n        parameter_name: \u53c2\u6570\u540d\u79f0\n        service_key: \u670d\u52a1\u952e(\u7c7b\u578b\u6216\u5b57\u7b26\u4e32)\n        service_type: \u670d\u52a1\u7c7b\u578b\n        is_optional: \u662f\u5426\u53ef\u9009\n        default_value: \u9ed8\u8ba4\u503c\n        is_injected: \u662f\u5426\u4f7f\u7528 Injected \u6807\u8bb0\n    \"\"\"\n\n    def __init__(\n        self,\n        parameter_name: str,\n        service_key: ServiceKey,\n        service_type: type,\n        is_optional: bool = False,\n        default_value: Any = inspect.Parameter.empty,\n        is_injected: bool = False,\n    ) -&gt; None:\n        \"\"\"\u521d\u59cb\u5316\u4f9d\u8d56\u4fe1\u606f.\n\n        Args:\n            parameter_name: \u53c2\u6570\u540d\u79f0\n            service_key: \u670d\u52a1\u952e\n            service_type: \u670d\u52a1\u7c7b\u578b\n            is_optional: \u662f\u5426\u53ef\u9009\n            default_value: \u9ed8\u8ba4\u503c\n            is_injected: \u662f\u5426\u4f7f\u7528 Injected \u6807\u8bb0\n        \"\"\"\n        self.parameter_name = parameter_name\n        self.service_key = service_key\n        self.service_type = service_type\n        self.is_optional = is_optional\n        self.default_value = default_value\n        self.is_injected = is_injected\n\n    def __repr__(self) -&gt; str:\n        \"\"\"\u8fd4\u56de\u5b57\u7b26\u4e32\u8868\u793a.\"\"\"\n        optional_str = \" (optional)\" if self.is_optional else \"\"\n        injected_str = \" (injected)\" if self.is_injected else \"\"\n        return f\"DependencyInfo({self.parameter_name}: {self.service_key}{optional_str}{injected_str})\"\n</code></pre>"},{"location":"zh/guaids/injector-dependency-info/#symphra_container.injector.DependencyInfo.__init__","title":"<code>__init__(parameter_name, service_key, service_type, is_optional=False, default_value=inspect.Parameter.empty, is_injected=False)</code>","text":"<p>\u521d\u59cb\u5316\u4f9d\u8d56\u4fe1\u606f.</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>parameter_name</code> <code>str</code> <p>\u53c2\u6570\u540d\u79f0</p> \u5fc5\u9700 <code>service_key</code> <code>ServiceKey</code> <p>\u670d\u52a1\u952e</p> \u5fc5\u9700 <code>service_type</code> <code>type</code> <p>\u670d\u52a1\u7c7b\u578b</p> \u5fc5\u9700 <code>is_optional</code> <code>bool</code> <p>\u662f\u5426\u53ef\u9009</p> <code>False</code> <code>default_value</code> <code>Any</code> <p>\u9ed8\u8ba4\u503c</p> <code>empty</code> <code>is_injected</code> <code>bool</code> <p>\u662f\u5426\u4f7f\u7528 Injected \u6807\u8bb0</p> <code>False</code> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/injector.py</code> <pre><code>def __init__(\n    self,\n    parameter_name: str,\n    service_key: ServiceKey,\n    service_type: type,\n    is_optional: bool = False,\n    default_value: Any = inspect.Parameter.empty,\n    is_injected: bool = False,\n) -&gt; None:\n    \"\"\"\u521d\u59cb\u5316\u4f9d\u8d56\u4fe1\u606f.\n\n    Args:\n        parameter_name: \u53c2\u6570\u540d\u79f0\n        service_key: \u670d\u52a1\u952e\n        service_type: \u670d\u52a1\u7c7b\u578b\n        is_optional: \u662f\u5426\u53ef\u9009\n        default_value: \u9ed8\u8ba4\u503c\n        is_injected: \u662f\u5426\u4f7f\u7528 Injected \u6807\u8bb0\n    \"\"\"\n    self.parameter_name = parameter_name\n    self.service_key = service_key\n    self.service_type = service_type\n    self.is_optional = is_optional\n    self.default_value = default_value\n    self.is_injected = is_injected\n</code></pre>"},{"location":"zh/guaids/injector-dependency-info/#symphra_container.injector.DependencyInfo.__repr__","title":"<code>__repr__()</code>","text":"<p>\u8fd4\u56de\u5b57\u7b26\u4e32\u8868\u793a.</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/injector.py</code> <pre><code>def __repr__(self) -&gt; str:\n    \"\"\"\u8fd4\u56de\u5b57\u7b26\u4e32\u8868\u793a.\"\"\"\n    optional_str = \" (optional)\" if self.is_optional else \"\"\n    injected_str = \" (injected)\" if self.is_injected else \"\"\n    return f\"DependencyInfo({self.parameter_name}: {self.service_key}{optional_str}{injected_str})\"\n</code></pre>"},{"location":"zh/guaids/integrations-django-container/","title":"Django \u5bb9\u5668\uff08DjangoContainer\uff09","text":""},{"location":"zh/guaids/integrations-django-container/#symphra_container.integrations.DjangoContainer","title":"<code>symphra_container.integrations.DjangoContainer</code>","text":"<p>Django \u5e94\u7528\u7684\u5bb9\u5668\u5305\u88c5\u5668.</p> <p>\u63d0\u4f9b\u4e0e Django \u8bf7\u6c42\u751f\u547d\u5468\u671f\u96c6\u6210\u7684\u4f9d\u8d56\u6ce8\u5165\u529f\u80fd\u3002</p> <p>\u5c5e\u6027\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 <code>_container</code> <code>Container | None</code> <p>\u5168\u5c40\u5bb9\u5668\u5b9e\u4f8b</p> \u793a\u4f8b Source code in <code>src/symphra_container/integrations/django.py</code> <pre><code>class DjangoContainer:\n    \"\"\"Django \u5e94\u7528\u7684\u5bb9\u5668\u5305\u88c5\u5668.\n\n    \u63d0\u4f9b\u4e0e Django \u8bf7\u6c42\u751f\u547d\u5468\u671f\u96c6\u6210\u7684\u4f9d\u8d56\u6ce8\u5165\u529f\u80fd\u3002\n\n    Attributes:\n        _container: \u5168\u5c40\u5bb9\u5668\u5b9e\u4f8b\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; # \u5728 settings.py \u4e2d\n        &gt;&gt;&gt; from django.conf import settings\n        &gt;&gt;&gt; settings.CONTAINER = Container()\n        &gt;&gt;&gt; # \u5728\u89c6\u56fe\u4e2d\n        &gt;&gt;&gt; user_service = DjangoContainer.resolve(UserService)\n    \"\"\"\n\n    _container: Container | None = None\n\n    @classmethod\n    def setup(cls, container: Container) -&gt; None:\n        \"\"\"\u8bbe\u7f6e\u5168\u5c40\u5bb9\u5668\u5b9e\u4f8b.\n\n        \u901a\u5e38\u5728 settings.py \u6216\u5e94\u7528\u542f\u52a8\u65f6\u8c03\u7528\u3002\n\n        Args:\n            container: \u5bb9\u5668\u5b9e\u4f8b\n\n        Raises:\n            ImportError: \u5982\u679c\u672a\u5b89\u88c5 Django\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; from django.conf import settings\n            &gt;&gt;&gt; container = Container()\n            &gt;&gt;&gt; DjangoContainer.setup(container)\n        \"\"\"\n        try:\n            import django  # noqa: F401\n        except ImportError as e:\n            raise ImportError(\"Django is not installed. Install it with: pip install symphra-container[django]\") from e\n\n        cls._container = container\n\n    @classmethod\n    def get_container(cls) -&gt; Container:\n        \"\"\"\u83b7\u53d6\u5168\u5c40\u5bb9\u5668\u5b9e\u4f8b.\n\n        Returns:\n            Container: \u5bb9\u5668\u5b9e\u4f8b\n\n        Raises:\n            RuntimeError: \u5982\u679c\u5bb9\u5668\u672a\u521d\u59cb\u5316\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; container = DjangoContainer.get_container()\n        \"\"\"\n        if cls._container is None:\n            # \u5c1d\u8bd5\u4ece Django settings \u83b7\u53d6\n            try:\n                from django.conf import settings\n\n                if hasattr(settings, \"CONTAINER\"):\n                    cls._container = settings.CONTAINER\n            except Exception:\n                pass\n\n        if cls._container is None:\n            raise RuntimeError(\"Container not initialized. Call DjangoContainer.setup() or set settings.CONTAINER\")\n\n        return cls._container\n\n    @classmethod\n    def resolve(cls, service_type: type[T]) -&gt; T:\n        \"\"\"\u89e3\u6790\u670d\u52a1\u5b9e\u4f8b.\n\n        \u5728\u8bf7\u6c42\u4e0a\u4e0b\u6587\u4e2d\u4f7f\u7528\u4f5c\u7528\u57df\u5bb9\u5668(\u5982\u679c\u6709)\uff0c\u5426\u5219\u4f7f\u7528\u6839\u5bb9\u5668\u3002\n\n        Args:\n            service_type: \u8981\u89e3\u6790\u7684\u670d\u52a1\u7c7b\u578b\n\n        Returns:\n            T: \u670d\u52a1\u5b9e\u4f8b\n\n        Raises:\n            RuntimeError: \u5982\u679c\u5bb9\u5668\u672a\u521d\u59cb\u5316\n            ServiceNotFoundError: \u5982\u679c\u670d\u52a1\u672a\u6ce8\u518c\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; user_service = DjangoContainer.resolve(UserService)\n        \"\"\"\n        # \u5c1d\u8bd5\u4ece\u5f53\u524d\u7ebf\u7a0b\u83b7\u53d6\u8bf7\u6c42\u5bf9\u8c61\n        try:\n            import threading\n\n            local = threading.local()\n            request: HttpRequest | None = getattr(local, \"request\", None)\n            if request and hasattr(request, \"container_scope\"):\n                return request.container_scope.resolve(service_type)\n        except Exception:\n            pass\n\n        # \u4f7f\u7528\u6839\u5bb9\u5668\n        container = cls.get_container()\n        return container.resolve(service_type)\n\n    @classmethod\n    def inject(cls, func: F) -&gt; F:\n        \"\"\"\u88c5\u9970\u5668: \u81ea\u52a8\u6ce8\u5165\u51fd\u6570\u53c2\u6570.\n\n        \u5206\u6790\u51fd\u6570\u7b7e\u540d(\u8df3\u8fc7 request \u53c2\u6570)\uff0c\u6839\u636e\u7c7b\u578b\u6ce8\u89e3\u81ea\u52a8\u6ce8\u5165\u670d\u52a1\u3002\n\n        Args:\n            func: \u8981\u88c5\u9970\u7684\u51fd\u6570(Django \u89c6\u56fe\u51fd\u6570)\n\n        Returns:\n            F: \u88c5\u9970\u540e\u7684\u51fd\u6570\n\n        Raises:\n            RuntimeError: \u5982\u679c\u670d\u52a1\u89e3\u6790\u5931\u8d25\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; @DjangoContainer.inject\n            ... def view(request, user_service: UserService):\n            ...     return JsonResponse(user_service.get_all())\n        \"\"\"\n        sig = inspect.signature(func)\n\n        @functools.wraps(func)\n        def wrapper(*args: Any, **kwargs: Any) -&gt; Any:\n            # \u5206\u6790\u9700\u8981\u6ce8\u5165\u7684\u53c2\u6570\n            bound_args = sig.bind_partial(*args, **kwargs)\n            bound_args.apply_defaults()\n\n            for param_name, param in sig.parameters.items():\n                # \u8df3\u8fc7 request \u53c2\u6570\u548c\u5df2\u63d0\u4f9b\u7684\u53c2\u6570\n                if param_name == \"request\" or param_name in bound_args.arguments:\n                    continue\n\n                # \u68c0\u67e5\u662f\u5426\u6709\u7c7b\u578b\u6ce8\u89e3\n                if param.annotation == inspect.Parameter.empty:\n                    continue\n\n                # \u5c1d\u8bd5\u89e3\u6790\u670d\u52a1\n                try:\n                    service = cls.resolve(param.annotation)\n                    bound_args.arguments[param_name] = service\n                except Exception:\n                    # \u65e0\u6cd5\u89e3\u6790\uff0c\u53ef\u80fd\u4e0d\u662f\u5bb9\u5668\u7ba1\u7406\u7684\u670d\u52a1\n                    continue\n\n            return func(*bound_args.args, **bound_args.kwargs)\n\n        return cast(F, wrapper)\n</code></pre>"},{"location":"zh/guaids/integrations-django-container/#symphra_container.integrations.DjangoContainer--settingspy","title":"\u5728 settings.py \u4e2d","text":"<p>from django.conf import settings settings.CONTAINER = Container()</p>"},{"location":"zh/guaids/integrations-django-container/#symphra_container.integrations.DjangoContainer--_1","title":"\u5728\u89c6\u56fe\u4e2d","text":"<p>user_service = DjangoContainer.resolve(UserService)</p>"},{"location":"zh/guaids/integrations-django-container/#symphra_container.integrations.DjangoContainer.get_container","title":"<code>get_container()</code>  <code>classmethod</code>","text":"<p>\u83b7\u53d6\u5168\u5c40\u5bb9\u5668\u5b9e\u4f8b.</p> <p>\u8fd4\u56de\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 <code>Container</code> <code>Container</code> <p>\u5bb9\u5668\u5b9e\u4f8b</p> <p>\u5f15\u53d1\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>RuntimeError</code> <p>\u5982\u679c\u5bb9\u5668\u672a\u521d\u59cb\u5316</p> \u793a\u4f8b <p>container = DjangoContainer.get_container()</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/integrations/django.py</code> <pre><code>@classmethod\ndef get_container(cls) -&gt; Container:\n    \"\"\"\u83b7\u53d6\u5168\u5c40\u5bb9\u5668\u5b9e\u4f8b.\n\n    Returns:\n        Container: \u5bb9\u5668\u5b9e\u4f8b\n\n    Raises:\n        RuntimeError: \u5982\u679c\u5bb9\u5668\u672a\u521d\u59cb\u5316\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; container = DjangoContainer.get_container()\n    \"\"\"\n    if cls._container is None:\n        # \u5c1d\u8bd5\u4ece Django settings \u83b7\u53d6\n        try:\n            from django.conf import settings\n\n            if hasattr(settings, \"CONTAINER\"):\n                cls._container = settings.CONTAINER\n        except Exception:\n            pass\n\n    if cls._container is None:\n        raise RuntimeError(\"Container not initialized. Call DjangoContainer.setup() or set settings.CONTAINER\")\n\n    return cls._container\n</code></pre>"},{"location":"zh/guaids/integrations-django-container/#symphra_container.integrations.DjangoContainer.inject","title":"<code>inject(func)</code>  <code>classmethod</code>","text":"<p>\u88c5\u9970\u5668: \u81ea\u52a8\u6ce8\u5165\u51fd\u6570\u53c2\u6570.</p> <p>\u5206\u6790\u51fd\u6570\u7b7e\u540d(\u8df3\u8fc7 request \u53c2\u6570)\uff0c\u6839\u636e\u7c7b\u578b\u6ce8\u89e3\u81ea\u52a8\u6ce8\u5165\u670d\u52a1\u3002</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>func</code> <code>F</code> <p>\u8981\u88c5\u9970\u7684\u51fd\u6570(Django \u89c6\u56fe\u51fd\u6570)</p> \u5fc5\u9700 <p>\u8fd4\u56de\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 <code>F</code> <code>F</code> <p>\u88c5\u9970\u540e\u7684\u51fd\u6570</p> <p>\u5f15\u53d1\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>RuntimeError</code> <p>\u5982\u679c\u670d\u52a1\u89e3\u6790\u5931\u8d25</p> \u793a\u4f8b <p>@DjangoContainer.inject ... def view(request, user_service: UserService): ...     return JsonResponse(user_service.get_all())</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/integrations/django.py</code> <pre><code>@classmethod\ndef inject(cls, func: F) -&gt; F:\n    \"\"\"\u88c5\u9970\u5668: \u81ea\u52a8\u6ce8\u5165\u51fd\u6570\u53c2\u6570.\n\n    \u5206\u6790\u51fd\u6570\u7b7e\u540d(\u8df3\u8fc7 request \u53c2\u6570)\uff0c\u6839\u636e\u7c7b\u578b\u6ce8\u89e3\u81ea\u52a8\u6ce8\u5165\u670d\u52a1\u3002\n\n    Args:\n        func: \u8981\u88c5\u9970\u7684\u51fd\u6570(Django \u89c6\u56fe\u51fd\u6570)\n\n    Returns:\n        F: \u88c5\u9970\u540e\u7684\u51fd\u6570\n\n    Raises:\n        RuntimeError: \u5982\u679c\u670d\u52a1\u89e3\u6790\u5931\u8d25\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; @DjangoContainer.inject\n        ... def view(request, user_service: UserService):\n        ...     return JsonResponse(user_service.get_all())\n    \"\"\"\n    sig = inspect.signature(func)\n\n    @functools.wraps(func)\n    def wrapper(*args: Any, **kwargs: Any) -&gt; Any:\n        # \u5206\u6790\u9700\u8981\u6ce8\u5165\u7684\u53c2\u6570\n        bound_args = sig.bind_partial(*args, **kwargs)\n        bound_args.apply_defaults()\n\n        for param_name, param in sig.parameters.items():\n            # \u8df3\u8fc7 request \u53c2\u6570\u548c\u5df2\u63d0\u4f9b\u7684\u53c2\u6570\n            if param_name == \"request\" or param_name in bound_args.arguments:\n                continue\n\n            # \u68c0\u67e5\u662f\u5426\u6709\u7c7b\u578b\u6ce8\u89e3\n            if param.annotation == inspect.Parameter.empty:\n                continue\n\n            # \u5c1d\u8bd5\u89e3\u6790\u670d\u52a1\n            try:\n                service = cls.resolve(param.annotation)\n                bound_args.arguments[param_name] = service\n            except Exception:\n                # \u65e0\u6cd5\u89e3\u6790\uff0c\u53ef\u80fd\u4e0d\u662f\u5bb9\u5668\u7ba1\u7406\u7684\u670d\u52a1\n                continue\n\n        return func(*bound_args.args, **bound_args.kwargs)\n\n    return cast(F, wrapper)\n</code></pre>"},{"location":"zh/guaids/integrations-django-container/#symphra_container.integrations.DjangoContainer.resolve","title":"<code>resolve(service_type)</code>  <code>classmethod</code>","text":"<p>\u89e3\u6790\u670d\u52a1\u5b9e\u4f8b.</p> <p>\u5728\u8bf7\u6c42\u4e0a\u4e0b\u6587\u4e2d\u4f7f\u7528\u4f5c\u7528\u57df\u5bb9\u5668(\u5982\u679c\u6709)\uff0c\u5426\u5219\u4f7f\u7528\u6839\u5bb9\u5668\u3002</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>service_type</code> <code>type[T]</code> <p>\u8981\u89e3\u6790\u7684\u670d\u52a1\u7c7b\u578b</p> \u5fc5\u9700 <p>\u8fd4\u56de\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 <code>T</code> <code>T</code> <p>\u670d\u52a1\u5b9e\u4f8b</p> <p>\u5f15\u53d1\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>RuntimeError</code> <p>\u5982\u679c\u5bb9\u5668\u672a\u521d\u59cb\u5316</p> <code>ServiceNotFoundError</code> <p>\u5982\u679c\u670d\u52a1\u672a\u6ce8\u518c</p> \u793a\u4f8b <p>user_service = DjangoContainer.resolve(UserService)</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/integrations/django.py</code> <pre><code>@classmethod\ndef resolve(cls, service_type: type[T]) -&gt; T:\n    \"\"\"\u89e3\u6790\u670d\u52a1\u5b9e\u4f8b.\n\n    \u5728\u8bf7\u6c42\u4e0a\u4e0b\u6587\u4e2d\u4f7f\u7528\u4f5c\u7528\u57df\u5bb9\u5668(\u5982\u679c\u6709)\uff0c\u5426\u5219\u4f7f\u7528\u6839\u5bb9\u5668\u3002\n\n    Args:\n        service_type: \u8981\u89e3\u6790\u7684\u670d\u52a1\u7c7b\u578b\n\n    Returns:\n        T: \u670d\u52a1\u5b9e\u4f8b\n\n    Raises:\n        RuntimeError: \u5982\u679c\u5bb9\u5668\u672a\u521d\u59cb\u5316\n        ServiceNotFoundError: \u5982\u679c\u670d\u52a1\u672a\u6ce8\u518c\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; user_service = DjangoContainer.resolve(UserService)\n    \"\"\"\n    # \u5c1d\u8bd5\u4ece\u5f53\u524d\u7ebf\u7a0b\u83b7\u53d6\u8bf7\u6c42\u5bf9\u8c61\n    try:\n        import threading\n\n        local = threading.local()\n        request: HttpRequest | None = getattr(local, \"request\", None)\n        if request and hasattr(request, \"container_scope\"):\n            return request.container_scope.resolve(service_type)\n    except Exception:\n        pass\n\n    # \u4f7f\u7528\u6839\u5bb9\u5668\n    container = cls.get_container()\n    return container.resolve(service_type)\n</code></pre>"},{"location":"zh/guaids/integrations-django-container/#symphra_container.integrations.DjangoContainer.setup","title":"<code>setup(container)</code>  <code>classmethod</code>","text":"<p>\u8bbe\u7f6e\u5168\u5c40\u5bb9\u5668\u5b9e\u4f8b.</p> <p>\u901a\u5e38\u5728 settings.py \u6216\u5e94\u7528\u542f\u52a8\u65f6\u8c03\u7528\u3002</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>container</code> <code>Container</code> <p>\u5bb9\u5668\u5b9e\u4f8b</p> \u5fc5\u9700 <p>\u5f15\u53d1\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>ImportError</code> <p>\u5982\u679c\u672a\u5b89\u88c5 Django</p> \u793a\u4f8b <p>from django.conf import settings container = Container() DjangoContainer.setup(container)</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/integrations/django.py</code> <pre><code>@classmethod\ndef setup(cls, container: Container) -&gt; None:\n    \"\"\"\u8bbe\u7f6e\u5168\u5c40\u5bb9\u5668\u5b9e\u4f8b.\n\n    \u901a\u5e38\u5728 settings.py \u6216\u5e94\u7528\u542f\u52a8\u65f6\u8c03\u7528\u3002\n\n    Args:\n        container: \u5bb9\u5668\u5b9e\u4f8b\n\n    Raises:\n        ImportError: \u5982\u679c\u672a\u5b89\u88c5 Django\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; from django.conf import settings\n        &gt;&gt;&gt; container = Container()\n        &gt;&gt;&gt; DjangoContainer.setup(container)\n    \"\"\"\n    try:\n        import django  # noqa: F401\n    except ImportError as e:\n        raise ImportError(\"Django is not installed. Install it with: pip install symphra-container[django]\") from e\n\n    cls._container = container\n</code></pre>"},{"location":"zh/guaids/integrations-fastapi-inject/","title":"FastAPI \u6ce8\u5165\uff08fastapi_inject\uff09","text":""},{"location":"zh/guaids/integrations-fastapi-inject/#symphra_container.integrations.fastapi_inject","title":"<code>symphra_container.integrations.fastapi_inject(service_type)</code>","text":"<p>\u521b\u5efa FastAPI \u4f9d\u8d56\u6ce8\u5165\u51fd\u6570.</p> <p>\u7528\u4e8e\u5728 FastAPI \u8def\u7531\u4e2d\u6ce8\u5165\u670d\u52a1\u3002\u8fd4\u56de\u7684\u51fd\u6570\u53ef\u4ee5\u4f5c\u4e3a Depends() \u7684\u53c2\u6570\u3002</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>service_type</code> <code>type[T]</code> <p>\u8981\u6ce8\u5165\u7684\u670d\u52a1\u7c7b\u578b</p> \u5fc5\u9700 <p>\u8fd4\u56de\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 <code>Callable</code> <code>Callable[[], T]</code> <p>\u53ef\u7528\u4e8e Depends() \u7684\u4f9d\u8d56\u51fd\u6570</p> <p>\u5f15\u53d1\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>RuntimeError</code> <p>\u5982\u679c\u5bb9\u5668\u672a\u521d\u59cb\u5316</p> <code>ServiceNotFoundError</code> <p>\u5982\u679c\u670d\u52a1\u672a\u6ce8\u518c</p> \u793a\u4f8b <p>@app.get(\"/users\") async def get_users( ...     user_service: UserService = Depends(inject(UserService)) ... ): ...     return await user_service.get_all()</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/integrations/fastapi.py</code> <pre><code>def inject(service_type: type[T]) -&gt; Callable[[], T]:\n    \"\"\"\u521b\u5efa FastAPI \u4f9d\u8d56\u6ce8\u5165\u51fd\u6570.\n\n    \u7528\u4e8e\u5728 FastAPI \u8def\u7531\u4e2d\u6ce8\u5165\u670d\u52a1\u3002\u8fd4\u56de\u7684\u51fd\u6570\u53ef\u4ee5\u4f5c\u4e3a Depends() \u7684\u53c2\u6570\u3002\n\n    Args:\n        service_type: \u8981\u6ce8\u5165\u7684\u670d\u52a1\u7c7b\u578b\n\n    Returns:\n        Callable: \u53ef\u7528\u4e8e Depends() \u7684\u4f9d\u8d56\u51fd\u6570\n\n    Raises:\n        RuntimeError: \u5982\u679c\u5bb9\u5668\u672a\u521d\u59cb\u5316\n        ServiceNotFoundError: \u5982\u679c\u670d\u52a1\u672a\u6ce8\u518c\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; @app.get(\"/users\")\n        &gt;&gt;&gt; async def get_users(\n        ...     user_service: UserService = Depends(inject(UserService))\n        ... ):\n        ...     return await user_service.get_all()\n    \"\"\"\n\n    def dependency() -&gt; T:\n        container = get_container()\n        # \u68c0\u67e5\u662f\u5426\u662f\u5f02\u6b65\u670d\u52a1\n        registration = container._registrations.get(service_type)\n        if registration and registration.is_async:\n            # \u5f02\u6b65\u670d\u52a1\u9700\u8981\u7528 resolve_async, \u4f46\u8fd9\u91cc\u662f\u540c\u6b65\u4e0a\u4e0b\u6587\n            # FastAPI \u4f1a\u81ea\u52a8\u5904\u7406\u5f02\u6b65\u4f9d\u8d56\uff0c\u6240\u4ee5\u8fd9\u91cc\u76f4\u63a5\u8fd4\u56de coroutine\n            import asyncio\n\n            coro = container.resolve_async(service_type)\n            # \u5982\u679c\u5f53\u524d\u5df2\u7ecf\u5728 async \u4e0a\u4e0b\u6587\u4e2d\uff0c\u76f4\u63a5\u8fd4\u56de coroutine\n            # FastAPI \u4f1a\u81ea\u52a8 await \u5b83\n            try:\n                asyncio.get_running_loop()\n                # \u5728 async \u4e0a\u4e0b\u6587\u4e2d\uff0c\u8fd4\u56de coroutine \u8ba9 FastAPI await\n                return coro  # type: ignore\n            except RuntimeError:\n                # \u4e0d\u5728 async \u4e0a\u4e0b\u6587\u4e2d\uff0c\u5c1d\u8bd5\u540c\u6b65\u89e3\u6790\n                return container.resolve(service_type)\n        else:\n            # \u540c\u6b65\u670d\u52a1\u76f4\u63a5\u89e3\u6790\n            return container.resolve(service_type)\n\n    return dependency\n</code></pre>"},{"location":"zh/guaids/integrations-flask-container/","title":"Flask \u5bb9\u5668\uff08FlaskContainer\uff09","text":""},{"location":"zh/guaids/integrations-flask-container/#symphra_container.integrations.FlaskContainer","title":"<code>symphra_container.integrations.FlaskContainer</code>","text":"<p>Flask \u5e94\u7528\u7684\u5bb9\u5668\u5305\u88c5\u5668.</p> <p>\u63d0\u4f9b\u4e0e Flask \u8bf7\u6c42\u751f\u547d\u5468\u671f\u96c6\u6210\u7684\u4f9d\u8d56\u6ce8\u5165\u529f\u80fd\u3002</p> <p>\u5c5e\u6027\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 <code>app</code> <p>Flask \u5e94\u7528\u5b9e\u4f8b</p> <code>container</code> <p>\u5bb9\u5668\u5b9e\u4f8b</p> \u793a\u4f8b <p>app = Flask(name) container = Container() flask_container = FlaskContainer(app, container) @flask_container.inject ... def view(user_service: UserService): ...     return user_service.get_users()</p> Source code in <code>src/symphra_container/integrations/flask.py</code> <pre><code>class FlaskContainer:\n    \"\"\"Flask \u5e94\u7528\u7684\u5bb9\u5668\u5305\u88c5\u5668.\n\n    \u63d0\u4f9b\u4e0e Flask \u8bf7\u6c42\u751f\u547d\u5468\u671f\u96c6\u6210\u7684\u4f9d\u8d56\u6ce8\u5165\u529f\u80fd\u3002\n\n    Attributes:\n        app: Flask \u5e94\u7528\u5b9e\u4f8b\n        container: \u5bb9\u5668\u5b9e\u4f8b\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; app = Flask(__name__)\n        &gt;&gt;&gt; container = Container()\n        &gt;&gt;&gt; flask_container = FlaskContainer(app, container)\n        &gt;&gt;&gt; @flask_container.inject\n        ... def view(user_service: UserService):\n        ...     return user_service.get_users()\n    \"\"\"\n\n    def __init__(self, app: Flask, container: Container) -&gt; None:\n        \"\"\"\u521d\u59cb\u5316 Flask \u5bb9\u5668.\n\n        Args:\n            app: Flask \u5e94\u7528\u5b9e\u4f8b\n            container: \u5bb9\u5668\u5b9e\u4f8b\n\n        Raises:\n            ImportError: \u5982\u679c\u672a\u5b89\u88c5 Flask\n        \"\"\"\n        try:\n            from flask import Flask, g\n        except ImportError as e:\n            raise ImportError(\"Flask is not installed. Install it with: pip install symphra-container[flask]\") from e\n\n        self.app = app\n        self.container = container\n        self._flask_g = g\n\n        # \u6ce8\u518c\u5e94\u7528\u4e0a\u4e0b\u6587\u94a9\u5b50\u6765\u7ba1\u7406\u4f5c\u7528\u57df\n        @app.teardown_appcontext\n        def teardown_context(exception: Exception | None = None) -&gt; None:\n            \"\"\"\u5728\u5e94\u7528\u4e0a\u4e0b\u6587\u7ed3\u675f\u65f6\u6e05\u7406\u4f5c\u7528\u57df.\"\"\"\n            scope = getattr(g, \"container_scope\", None)\n            if scope:\n                scope.__exit__(None, None, None)  # \u6b63\u786e\u9000\u51fa\u4f5c\u7528\u57df\n\n    def resolve(self, service_type: type[T]) -&gt; T:\n        \"\"\"\u89e3\u6790\u670d\u52a1\u5b9e\u4f8b.\n\n        \u5728\u8bf7\u6c42\u4e0a\u4e0b\u6587\u4e2d\u4f7f\u7528\u4f5c\u7528\u57df\u5bb9\u5668\uff0c\u5426\u5219\u4f7f\u7528\u6839\u5bb9\u5668\u3002\n\n        Args:\n            service_type: \u8981\u89e3\u6790\u7684\u670d\u52a1\u7c7b\u578b\n\n        Returns:\n            T: \u670d\u52a1\u5b9e\u4f8b\n\n        Raises:\n            RuntimeError: \u5982\u679c\u4e0d\u5728\u8bf7\u6c42\u4e0a\u4e0b\u6587\u4e2d\u4e14\u670d\u52a1\u662f SCOPED\n            ServiceNotFoundError: \u5982\u679c\u670d\u52a1\u672a\u6ce8\u518c\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; user_service = flask_container.resolve(UserService)\n        \"\"\"\n        try:\n            from flask import g\n\n            # \u5982\u679c\u8fd8\u6ca1\u6709\u4f5c\u7528\u57df,\u521b\u5efa\u4e00\u4e2a\n            scope = getattr(g, \"container_scope\", None)\n            if scope is None:\n                scope = self.container.create_scope()\n                scope.__enter__()  # \u6fc0\u6d3b\u4f5c\u7528\u57df\n                g.container_scope = scope\n\n            return scope.resolve(service_type)\n        except RuntimeError:\n            # \u4e0d\u5728\u8bf7\u6c42\u4e0a\u4e0b\u6587\u4e2d\n            pass\n\n        return self.container.resolve(service_type)\n\n    def inject(self, func: F) -&gt; F:\n        \"\"\"\u88c5\u9970\u5668: \u81ea\u52a8\u6ce8\u5165\u51fd\u6570\u53c2\u6570.\n\n        \u5206\u6790\u51fd\u6570\u7b7e\u540d\uff0c\u6839\u636e\u7c7b\u578b\u6ce8\u89e3\u81ea\u52a8\u6ce8\u5165\u670d\u52a1\u3002\n\n        Args:\n            func: \u8981\u88c5\u9970\u7684\u51fd\u6570\n\n        Returns:\n            F: \u88c5\u9970\u540e\u7684\u51fd\u6570\n\n        Raises:\n            RuntimeError: \u5982\u679c\u670d\u52a1\u89e3\u6790\u5931\u8d25\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; @flask_container.inject\n            ... def view(user_service: UserService, email_service: EmailService):\n            ...     # user_service \u548c email_service \u4f1a\u81ea\u52a8\u6ce8\u5165\n            ...     return user_service.get_all()\n        \"\"\"\n        sig = inspect.signature(func)\n\n        # \u83b7\u53d6\u51fd\u6570\u7684\u7c7b\u578b\u63d0\u793a, \u7528\u4e8e\u89e3\u6790\u5b57\u7b26\u4e32\u6ce8\u89e3\n        try:\n            type_hints = get_type_hints(func)\n        except (NameError, TypeError):\n            # \u5982\u679c\u65e0\u6cd5\u83b7\u53d6\u7c7b\u578b\u63d0\u793a, \u4f7f\u7528\u7a7a\u7684\u5b57\u5178\n            type_hints = {}\n\n        @functools.wraps(func)\n        def wrapper(*args: Any, **kwargs: Any) -&gt; Any:\n            # \u83b7\u53d6\u6240\u6709\u53c2\u6570\u7684\u7ed1\u5b9a\n            bound = sig.bind_partial(*args, **kwargs)\n            bound.apply_defaults()\n\n            # \u6536\u96c6\u9700\u8981\u6ce8\u5165\u7684\u53c2\u6570\n            for param_name, param in sig.parameters.items():\n                # \u8df3\u8fc7\u5df2\u63d0\u4f9b\u7684\u53c2\u6570\n                if param_name in bound.arguments:\n                    continue\n\n                # \u68c0\u67e5\u662f\u5426\u6709\u7c7b\u578b\u6ce8\u89e3\n                if param.annotation == inspect.Parameter.empty:\n                    continue\n\n                # \u89e3\u6790\u6ce8\u89e3\u7c7b\u578b\n                annotation = type_hints.get(param_name, param.annotation)\n                if annotation == inspect.Parameter.empty:\n                    continue\n\n                # \u5c1d\u8bd5\u89e3\u6790\u670d\u52a1\n                try:\n                    service = self.resolve(annotation)\n                    bound.arguments[param_name] = service\n                except Exception as e:\n                    # \u65e0\u6cd5\u89e3\u6790, \u53ef\u80fd\u4e0d\u662f\u5bb9\u5668\u7ba1\u7406\u7684\u670d\u52a1\n                    # \u6ce8\u610f: \u5982\u679c\u8fd9\u662f\u5bb9\u5668\u7ba1\u7406\u7684\u670d\u52a1\u4f46\u89e3\u6790\u5931\u8d25, \u5e94\u8be5\u629b\u51fa\u5f02\u5e38\n                    if hasattr(e, '__class__') and \"ServiceNotFoundError\" in e.__class__.__name__:\n                        # \u670d\u52a1\u672a\u627e\u5230, \u53ef\u80fd\u786e\u5b9e\u4e0d\u662f\u5bb9\u5668\u7ba1\u7406\u7684\n                        continue\n                    # \u5176\u4ed6\u5f02\u5e38\u5e94\u8be5\u91cd\u65b0\u629b\u51fa\n                    raise\n\n            # \u8c03\u7528\u51fd\u6570, \u4f7f\u7528\u5b8c\u6574\u7684\u53c2\u6570\u5b57\u5178\n            return func(**bound.arguments)\n\n        return cast(\"F\", wrapper)\n</code></pre>"},{"location":"zh/guaids/integrations-flask-container/#symphra_container.integrations.FlaskContainer.__init__","title":"<code>__init__(app, container)</code>","text":"<p>\u521d\u59cb\u5316 Flask \u5bb9\u5668.</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>app</code> <code>Flask</code> <p>Flask \u5e94\u7528\u5b9e\u4f8b</p> \u5fc5\u9700 <code>container</code> <code>Container</code> <p>\u5bb9\u5668\u5b9e\u4f8b</p> \u5fc5\u9700 <p>\u5f15\u53d1\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>ImportError</code> <p>\u5982\u679c\u672a\u5b89\u88c5 Flask</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/integrations/flask.py</code> <pre><code>def __init__(self, app: Flask, container: Container) -&gt; None:\n    \"\"\"\u521d\u59cb\u5316 Flask \u5bb9\u5668.\n\n    Args:\n        app: Flask \u5e94\u7528\u5b9e\u4f8b\n        container: \u5bb9\u5668\u5b9e\u4f8b\n\n    Raises:\n        ImportError: \u5982\u679c\u672a\u5b89\u88c5 Flask\n    \"\"\"\n    try:\n        from flask import Flask, g\n    except ImportError as e:\n        raise ImportError(\"Flask is not installed. Install it with: pip install symphra-container[flask]\") from e\n\n    self.app = app\n    self.container = container\n    self._flask_g = g\n\n    # \u6ce8\u518c\u5e94\u7528\u4e0a\u4e0b\u6587\u94a9\u5b50\u6765\u7ba1\u7406\u4f5c\u7528\u57df\n    @app.teardown_appcontext\n    def teardown_context(exception: Exception | None = None) -&gt; None:\n        \"\"\"\u5728\u5e94\u7528\u4e0a\u4e0b\u6587\u7ed3\u675f\u65f6\u6e05\u7406\u4f5c\u7528\u57df.\"\"\"\n        scope = getattr(g, \"container_scope\", None)\n        if scope:\n            scope.__exit__(None, None, None)  # \u6b63\u786e\u9000\u51fa\u4f5c\u7528\u57df\n</code></pre>"},{"location":"zh/guaids/integrations-flask-container/#symphra_container.integrations.FlaskContainer.inject","title":"<code>inject(func)</code>","text":"<p>\u88c5\u9970\u5668: \u81ea\u52a8\u6ce8\u5165\u51fd\u6570\u53c2\u6570.</p> <p>\u5206\u6790\u51fd\u6570\u7b7e\u540d\uff0c\u6839\u636e\u7c7b\u578b\u6ce8\u89e3\u81ea\u52a8\u6ce8\u5165\u670d\u52a1\u3002</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>func</code> <code>F</code> <p>\u8981\u88c5\u9970\u7684\u51fd\u6570</p> \u5fc5\u9700 <p>\u8fd4\u56de\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 <code>F</code> <code>F</code> <p>\u88c5\u9970\u540e\u7684\u51fd\u6570</p> <p>\u5f15\u53d1\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>RuntimeError</code> <p>\u5982\u679c\u670d\u52a1\u89e3\u6790\u5931\u8d25</p> \u793a\u4f8b <p>@flask_container.inject ... def view(user_service: UserService, email_service: EmailService): ...     # user_service \u548c email_service \u4f1a\u81ea\u52a8\u6ce8\u5165 ...     return user_service.get_all()</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/integrations/flask.py</code> <pre><code>def inject(self, func: F) -&gt; F:\n    \"\"\"\u88c5\u9970\u5668: \u81ea\u52a8\u6ce8\u5165\u51fd\u6570\u53c2\u6570.\n\n    \u5206\u6790\u51fd\u6570\u7b7e\u540d\uff0c\u6839\u636e\u7c7b\u578b\u6ce8\u89e3\u81ea\u52a8\u6ce8\u5165\u670d\u52a1\u3002\n\n    Args:\n        func: \u8981\u88c5\u9970\u7684\u51fd\u6570\n\n    Returns:\n        F: \u88c5\u9970\u540e\u7684\u51fd\u6570\n\n    Raises:\n        RuntimeError: \u5982\u679c\u670d\u52a1\u89e3\u6790\u5931\u8d25\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; @flask_container.inject\n        ... def view(user_service: UserService, email_service: EmailService):\n        ...     # user_service \u548c email_service \u4f1a\u81ea\u52a8\u6ce8\u5165\n        ...     return user_service.get_all()\n    \"\"\"\n    sig = inspect.signature(func)\n\n    # \u83b7\u53d6\u51fd\u6570\u7684\u7c7b\u578b\u63d0\u793a, \u7528\u4e8e\u89e3\u6790\u5b57\u7b26\u4e32\u6ce8\u89e3\n    try:\n        type_hints = get_type_hints(func)\n    except (NameError, TypeError):\n        # \u5982\u679c\u65e0\u6cd5\u83b7\u53d6\u7c7b\u578b\u63d0\u793a, \u4f7f\u7528\u7a7a\u7684\u5b57\u5178\n        type_hints = {}\n\n    @functools.wraps(func)\n    def wrapper(*args: Any, **kwargs: Any) -&gt; Any:\n        # \u83b7\u53d6\u6240\u6709\u53c2\u6570\u7684\u7ed1\u5b9a\n        bound = sig.bind_partial(*args, **kwargs)\n        bound.apply_defaults()\n\n        # \u6536\u96c6\u9700\u8981\u6ce8\u5165\u7684\u53c2\u6570\n        for param_name, param in sig.parameters.items():\n            # \u8df3\u8fc7\u5df2\u63d0\u4f9b\u7684\u53c2\u6570\n            if param_name in bound.arguments:\n                continue\n\n            # \u68c0\u67e5\u662f\u5426\u6709\u7c7b\u578b\u6ce8\u89e3\n            if param.annotation == inspect.Parameter.empty:\n                continue\n\n            # \u89e3\u6790\u6ce8\u89e3\u7c7b\u578b\n            annotation = type_hints.get(param_name, param.annotation)\n            if annotation == inspect.Parameter.empty:\n                continue\n\n            # \u5c1d\u8bd5\u89e3\u6790\u670d\u52a1\n            try:\n                service = self.resolve(annotation)\n                bound.arguments[param_name] = service\n            except Exception as e:\n                # \u65e0\u6cd5\u89e3\u6790, \u53ef\u80fd\u4e0d\u662f\u5bb9\u5668\u7ba1\u7406\u7684\u670d\u52a1\n                # \u6ce8\u610f: \u5982\u679c\u8fd9\u662f\u5bb9\u5668\u7ba1\u7406\u7684\u670d\u52a1\u4f46\u89e3\u6790\u5931\u8d25, \u5e94\u8be5\u629b\u51fa\u5f02\u5e38\n                if hasattr(e, '__class__') and \"ServiceNotFoundError\" in e.__class__.__name__:\n                    # \u670d\u52a1\u672a\u627e\u5230, \u53ef\u80fd\u786e\u5b9e\u4e0d\u662f\u5bb9\u5668\u7ba1\u7406\u7684\n                    continue\n                # \u5176\u4ed6\u5f02\u5e38\u5e94\u8be5\u91cd\u65b0\u629b\u51fa\n                raise\n\n        # \u8c03\u7528\u51fd\u6570, \u4f7f\u7528\u5b8c\u6574\u7684\u53c2\u6570\u5b57\u5178\n        return func(**bound.arguments)\n\n    return cast(\"F\", wrapper)\n</code></pre>"},{"location":"zh/guaids/integrations-flask-container/#symphra_container.integrations.FlaskContainer.resolve","title":"<code>resolve(service_type)</code>","text":"<p>\u89e3\u6790\u670d\u52a1\u5b9e\u4f8b.</p> <p>\u5728\u8bf7\u6c42\u4e0a\u4e0b\u6587\u4e2d\u4f7f\u7528\u4f5c\u7528\u57df\u5bb9\u5668\uff0c\u5426\u5219\u4f7f\u7528\u6839\u5bb9\u5668\u3002</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>service_type</code> <code>type[T]</code> <p>\u8981\u89e3\u6790\u7684\u670d\u52a1\u7c7b\u578b</p> \u5fc5\u9700 <p>\u8fd4\u56de\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 <code>T</code> <code>T</code> <p>\u670d\u52a1\u5b9e\u4f8b</p> <p>\u5f15\u53d1\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>RuntimeError</code> <p>\u5982\u679c\u4e0d\u5728\u8bf7\u6c42\u4e0a\u4e0b\u6587\u4e2d\u4e14\u670d\u52a1\u662f SCOPED</p> <code>ServiceNotFoundError</code> <p>\u5982\u679c\u670d\u52a1\u672a\u6ce8\u518c</p> \u793a\u4f8b <p>user_service = flask_container.resolve(UserService)</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/integrations/flask.py</code> <pre><code>def resolve(self, service_type: type[T]) -&gt; T:\n    \"\"\"\u89e3\u6790\u670d\u52a1\u5b9e\u4f8b.\n\n    \u5728\u8bf7\u6c42\u4e0a\u4e0b\u6587\u4e2d\u4f7f\u7528\u4f5c\u7528\u57df\u5bb9\u5668\uff0c\u5426\u5219\u4f7f\u7528\u6839\u5bb9\u5668\u3002\n\n    Args:\n        service_type: \u8981\u89e3\u6790\u7684\u670d\u52a1\u7c7b\u578b\n\n    Returns:\n        T: \u670d\u52a1\u5b9e\u4f8b\n\n    Raises:\n        RuntimeError: \u5982\u679c\u4e0d\u5728\u8bf7\u6c42\u4e0a\u4e0b\u6587\u4e2d\u4e14\u670d\u52a1\u662f SCOPED\n        ServiceNotFoundError: \u5982\u679c\u670d\u52a1\u672a\u6ce8\u518c\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; user_service = flask_container.resolve(UserService)\n    \"\"\"\n    try:\n        from flask import g\n\n        # \u5982\u679c\u8fd8\u6ca1\u6709\u4f5c\u7528\u57df,\u521b\u5efa\u4e00\u4e2a\n        scope = getattr(g, \"container_scope\", None)\n        if scope is None:\n            scope = self.container.create_scope()\n            scope.__enter__()  # \u6fc0\u6d3b\u4f5c\u7528\u57df\n            g.container_scope = scope\n\n        return scope.resolve(service_type)\n    except RuntimeError:\n        # \u4e0d\u5728\u8bf7\u6c42\u4e0a\u4e0b\u6587\u4e2d\n        pass\n\n    return self.container.resolve(service_type)\n</code></pre>"},{"location":"zh/guaids/integrations-setup-fastapi/","title":"FastAPI \u8bbe\u7f6e\uff08setup_fastapi\uff09","text":""},{"location":"zh/guaids/integrations-setup-fastapi/#symphra_container.integrations.setup_fastapi","title":"<code>symphra_container.integrations.setup_fastapi(app, container)</code>","text":"<p>\u5c06\u5bb9\u5668\u7ed1\u5b9a\u5230 FastAPI \u5e94\u7528.</p> <p>\u6b64\u51fd\u6570\u4f1a: 1. \u5c06\u5bb9\u5668\u5b58\u50a8\u5230\u5168\u5c40\u53d8\u91cf\u4e2d\u4f9b inject() \u4f7f\u7528 2. \u914d\u7f6e\u751f\u547d\u5468\u671f\u7ba1\u7406(\u81ea\u52a8\u5904\u7406 SCOPED \u670d\u52a1)</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>app</code> <code>FastAPI</code> <p>FastAPI \u5e94\u7528\u5b9e\u4f8b</p> \u5fc5\u9700 <code>container</code> <code>Container</code> <p>\u5bb9\u5668\u5b9e\u4f8b</p> \u5fc5\u9700 <p>\u5f15\u53d1\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>ImportError</code> <p>\u5982\u679c\u672a\u5b89\u88c5 FastAPI</p> \u793a\u4f8b <p>from fastapi import FastAPI app = FastAPI() container = Container() setup_container(app, container)</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/integrations/fastapi.py</code> <pre><code>def setup_container(app: FastAPI, container: Container) -&gt; None:\n    \"\"\"\u5c06\u5bb9\u5668\u7ed1\u5b9a\u5230 FastAPI \u5e94\u7528.\n\n    \u6b64\u51fd\u6570\u4f1a:\n    1. \u5c06\u5bb9\u5668\u5b58\u50a8\u5230\u5168\u5c40\u53d8\u91cf\u4e2d\u4f9b inject() \u4f7f\u7528\n    2. \u914d\u7f6e\u751f\u547d\u5468\u671f\u7ba1\u7406(\u81ea\u52a8\u5904\u7406 SCOPED \u670d\u52a1)\n\n    Args:\n        app: FastAPI \u5e94\u7528\u5b9e\u4f8b\n        container: \u5bb9\u5668\u5b9e\u4f8b\n\n    Raises:\n        ImportError: \u5982\u679c\u672a\u5b89\u88c5 FastAPI\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; from fastapi import FastAPI\n        &gt;&gt;&gt; app = FastAPI()\n        &gt;&gt;&gt; container = Container()\n        &gt;&gt;&gt; setup_container(app, container)\n    \"\"\"\n    try:\n        from fastapi import FastAPI\n    except ImportError as e:\n        raise ImportError(\"FastAPI is not installed. Install it with: pip install symphra-container[fastapi]\") from e\n\n    global _container, _lifespan_managed\n    _container = container\n\n    # \u6ce8\u518c\u751f\u547d\u5468\u671f\u94a9\u5b50\u7ba1\u7406 SCOPED \u4f5c\u7528\u57df\n    if not _lifespan_managed:\n        original_lifespan = app.router.lifespan_context\n\n        async def managed_lifespan(app_instance: FastAPI):\n            \"\"\"\u7ba1\u7406\u8bf7\u6c42\u4f5c\u7528\u57df\u751f\u547d\u5468\u671f.\"\"\"\n            async with container:  # \u8fdb\u5165\u5bb9\u5668\u4e0a\u4e0b\u6587\n                if original_lifespan:\n                    async with original_lifespan(app_instance):\n                        yield\n                else:\n                    yield\n\n        app.router.lifespan_context = managed_lifespan\n        _lifespan_managed = True\n</code></pre>"},{"location":"zh/guaids/types-injected/","title":"\u6ce8\u5165\u6807\u8bb0\uff08Injected\uff09","text":""},{"location":"zh/guaids/types-injected/#symphra_container.types.Injected","title":"<code>symphra_container.types.Injected = InjectionMarker()</code>  <code>module-attribute</code>","text":""},{"location":"zh/guaids/types-injection-marker/","title":"\u6ce8\u5165\u6807\u8bb0\uff08InjectionMarker\uff09","text":""},{"location":"zh/guaids/types-injection-marker/#symphra_container.types.InjectionMarker","title":"<code>symphra_container.types.InjectionMarker</code>","text":"<p>\u6ce8\u5165\u6807\u8bb0\u7c7b.</p> <p>\u7528\u4e8e\u6807\u8bb0\u51fd\u6570\u53c2\u6570\u5e94\u8be5\u88ab\u5bb9\u5668\u6ce8\u5165.</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>&gt;&gt;&gt; from symphra_container import Container, Injected\n&gt;&gt;&gt; container = Container()\n&gt;&gt;&gt; def my_function(service: UserService = Injected):\n...     # service \u4f1a\u88ab\u5bb9\u5668\u81ea\u52a8\u6ce8\u5165\n...     pass\n</code></pre> Source code in <code>src/symphra_container/types.py</code> <pre><code>class InjectionMarker:\n    \"\"\"\u6ce8\u5165\u6807\u8bb0\u7c7b.\n\n    \u7528\u4e8e\u6807\u8bb0\u51fd\u6570\u53c2\u6570\u5e94\u8be5\u88ab\u5bb9\u5668\u6ce8\u5165.\n\n    Examples:\n        &gt;&gt;&gt; from symphra_container import Container, Injected\n        &gt;&gt;&gt; container = Container()\n        &gt;&gt;&gt; def my_function(service: UserService = Injected):\n        ...     # service \u4f1a\u88ab\u5bb9\u5668\u81ea\u52a8\u6ce8\u5165\n        ...     pass\n    \"\"\"\n\n    def __init__(self) -&gt; None:\n        \"\"\"\u521d\u59cb\u5316\u6ce8\u5165\u6807\u8bb0.\"\"\"\n\n    def __repr__(self) -&gt; str:\n        \"\"\"\u8fd4\u56de\u5b57\u7b26\u4e32\u8868\u793a.\"\"\"\n        return \"Injected\"\n</code></pre>"},{"location":"zh/guaids/types-injection-marker/#symphra_container.types.InjectionMarker.__init__","title":"<code>__init__()</code>","text":"<p>\u521d\u59cb\u5316\u6ce8\u5165\u6807\u8bb0.</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/types.py</code> <pre><code>def __init__(self) -&gt; None:\n    \"\"\"\u521d\u59cb\u5316\u6ce8\u5165\u6807\u8bb0.\"\"\"\n</code></pre>"},{"location":"zh/guaids/types-injection-marker/#symphra_container.types.InjectionMarker.__repr__","title":"<code>__repr__()</code>","text":"<p>\u8fd4\u56de\u5b57\u7b26\u4e32\u8868\u793a.</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/types.py</code> <pre><code>def __repr__(self) -&gt; str:\n    \"\"\"\u8fd4\u56de\u5b57\u7b26\u4e32\u8868\u793a.\"\"\"\n    return \"Injected\"\n</code></pre>"},{"location":"zh/guaids/types-lifetime/","title":"\u751f\u547d\u5468\u671f\uff08Lifetime\uff09","text":""},{"location":"zh/guaids/types-lifetime/#symphra_container.types.Lifetime","title":"<code>symphra_container.types.Lifetime</code>","text":"<p>               Bases: <code>Enum</code></p> <p>\u670d\u52a1\u751f\u547d\u5468\u671f\u7c7b\u578b\u679a\u4e3e.</p> <p>\u5b9a\u4e49\u4e86\u670d\u52a1\u5b9e\u4f8b\u5728\u5bb9\u5668\u4e2d\u7684\u751f\u547d\u5468\u671f\u7ba1\u7406\u7b56\u7565:</p> <p>\u5c5e\u6027\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 <code>SINGLETON</code> <p>\u5168\u5c40\u5355\u4f8b,\u5bb9\u5668\u4e2d\u53ea\u6709\u4e00\u4e2a\u5b9e\u4f8b</p> <code>TRANSIENT</code> <p>\u77ac\u65f6\u6a21\u5f0f,\u6bcf\u6b21\u89e3\u6790\u90fd\u521b\u5efa\u65b0\u5b9e\u4f8b</p> <code>SCOPED</code> <p>\u4f5c\u7528\u57df\u6a21\u5f0f,\u540c\u4e00\u4f5c\u7528\u57df\u5185\u5171\u4eab\u5b9e\u4f8b</p> <code>FACTORY</code> <p>\u5de5\u5382\u6a21\u5f0f,\u4f7f\u7528\u5de5\u5382\u51fd\u6570\u521b\u5efa\u5b9e\u4f8b</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>&gt;&gt;&gt; container.register(UserService, lifetime=Lifetime.SINGLETON)\n&gt;&gt;&gt; service1 = container.resolve(UserService)\n&gt;&gt;&gt; service2 = container.resolve(UserService)\n&gt;&gt;&gt; assert service1 is service2  # \u540c\u4e00\u5b9e\u4f8b\n</code></pre> Source code in <code>src/symphra_container/types.py</code> <pre><code>class Lifetime(Enum):\n    \"\"\"\u670d\u52a1\u751f\u547d\u5468\u671f\u7c7b\u578b\u679a\u4e3e.\n\n    \u5b9a\u4e49\u4e86\u670d\u52a1\u5b9e\u4f8b\u5728\u5bb9\u5668\u4e2d\u7684\u751f\u547d\u5468\u671f\u7ba1\u7406\u7b56\u7565:\n\n    Attributes:\n        SINGLETON: \u5168\u5c40\u5355\u4f8b,\u5bb9\u5668\u4e2d\u53ea\u6709\u4e00\u4e2a\u5b9e\u4f8b\n        TRANSIENT: \u77ac\u65f6\u6a21\u5f0f,\u6bcf\u6b21\u89e3\u6790\u90fd\u521b\u5efa\u65b0\u5b9e\u4f8b\n        SCOPED: \u4f5c\u7528\u57df\u6a21\u5f0f,\u540c\u4e00\u4f5c\u7528\u57df\u5185\u5171\u4eab\u5b9e\u4f8b\n        FACTORY: \u5de5\u5382\u6a21\u5f0f,\u4f7f\u7528\u5de5\u5382\u51fd\u6570\u521b\u5efa\u5b9e\u4f8b\n\n    Examples:\n        &gt;&gt;&gt; container.register(UserService, lifetime=Lifetime.SINGLETON)\n        &gt;&gt;&gt; service1 = container.resolve(UserService)\n        &gt;&gt;&gt; service2 = container.resolve(UserService)\n        &gt;&gt;&gt; assert service1 is service2  # \u540c\u4e00\u5b9e\u4f8b\n    \"\"\"\n\n    # \u5355\u4f8b\u751f\u547d\u5468\u671f - \u5168\u5c40\u552f\u4e00\n    SINGLETON = auto()\n\n    # \u77ac\u65f6\u751f\u547d\u5468\u671f - \u6bcf\u6b21\u65b0\u5efa\n    TRANSIENT = auto()\n\n    # \u4f5c\u7528\u57df\u751f\u547d\u5468\u671f - \u4f5c\u7528\u57df\u5185\u5171\u4eab\n    SCOPED = auto()\n\n    # \u5de5\u5382\u751f\u547d\u5468\u671f - \u5de5\u5382\u51fd\u6570\u521b\u5efa\n    FACTORY = auto()\n</code></pre>"},{"location":"zh/guaids/types-service-key/","title":"\u670d\u52a1\u952e\uff08ServiceKey\uff09","text":""},{"location":"zh/guaids/types-service-key/#symphra_container.types.ServiceKey","title":"<code>symphra_container.types.ServiceKey = type | str</code>  <code>module-attribute</code>","text":""},{"location":"zh/guaids/visualization-container-diagnostic/","title":"\u5bb9\u5668\u8bca\u65ad\uff08ContainerDiagnostic\uff09","text":""},{"location":"zh/guaids/visualization-container-diagnostic/#symphra_container.visualization.ContainerDiagnostic","title":"<code>symphra_container.visualization.ContainerDiagnostic</code>  <code>dataclass</code>","text":"<p>\u5bb9\u5668\u8bca\u65ad\u62a5\u544a.</p> <p>\u5c5e\u6027\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 <code>total_services</code> <code>int</code> <p>\u603b\u670d\u52a1\u6570</p> <code>singleton_count</code> <code>int</code> <p>\u5355\u4f8b\u670d\u52a1\u6570</p> <code>transient_count</code> <code>int</code> <p>\u77ac\u6001\u670d\u52a1\u6570</p> <code>scoped_count</code> <code>int</code> <p>\u4f5c\u7528\u57df\u670d\u52a1\u6570</p> <code>circular_dependencies</code> <code>list[tuple[Any, Any]]</code> <p>\u5faa\u73af\u4f9d\u8d56\u5217\u8868</p> <code>unresolvable_services</code> <code>list[Any]</code> <p>\u65e0\u6cd5\u89e3\u6790\u7684\u670d\u52a1\u5217\u8868</p> <code>warnings</code> <code>list[str]</code> <p>\u8b66\u544a\u4fe1\u606f\u5217\u8868</p> <code>health_score</code> <code>float</code> <p>\u5065\u5eb7\u8bc4\u5206 (0-100)</p> Source code in <code>src/symphra_container/visualization.py</code> <pre><code>@dataclass\nclass ContainerDiagnostic:\n    \"\"\"\u5bb9\u5668\u8bca\u65ad\u62a5\u544a.\n\n    Attributes:\n        total_services: \u603b\u670d\u52a1\u6570\n        singleton_count: \u5355\u4f8b\u670d\u52a1\u6570\n        transient_count: \u77ac\u6001\u670d\u52a1\u6570\n        scoped_count: \u4f5c\u7528\u57df\u670d\u52a1\u6570\n        circular_dependencies: \u5faa\u73af\u4f9d\u8d56\u5217\u8868\n        unresolvable_services: \u65e0\u6cd5\u89e3\u6790\u7684\u670d\u52a1\u5217\u8868\n        warnings: \u8b66\u544a\u4fe1\u606f\u5217\u8868\n        health_score: \u5065\u5eb7\u8bc4\u5206 (0-100)\n    \"\"\"\n\n    total_services: int\n    singleton_count: int\n    transient_count: int\n    scoped_count: int\n    circular_dependencies: list[tuple[Any, Any]]\n    unresolvable_services: list[Any]\n    warnings: list[str]\n    health_score: float\n</code></pre>"},{"location":"zh/guaids/visualization-debug-resolution/","title":"\u89e3\u6790\u8c03\u8bd5\uff08debug_resolution\uff09","text":""},{"location":"zh/guaids/visualization-debug-resolution/#symphra_container.visualization.debug_resolution","title":"<code>symphra_container.visualization.debug_resolution(container, key)</code>","text":"<p>\u8c03\u8bd5\u670d\u52a1\u89e3\u6790\u8fc7\u7a0b.</p> <p>\u6253\u5370\u8be6\u7ec6\u7684\u89e3\u6790\u6b65\u9aa4\u548c\u4f9d\u8d56\u4fe1\u606f, \u5e2e\u52a9\u8bca\u65ad\u95ee\u9898\u3002</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>container</code> <code>Container</code> <p>\u5bb9\u5668\u5b9e\u4f8b</p> \u5fc5\u9700 <code>key</code> <code>Any</code> <p>\u8981\u8c03\u8bd5\u7684\u670d\u52a1\u952e</p> \u5fc5\u9700 Example <p>debug_resolution(container, UserService) \ud83d\udd0d Resolving: UserService \u2705 Registration found: UserService (Singleton) \ud83d\udce6 Dependencies:   - UserRepository (registered: \u2705)   - Logger (registered: \u2705) \ud83c\udfaf Resolution order:   1. Logger   2. UserRepository   3. UserService \u2705 Resolution successful</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/visualization.py</code> <pre><code>def debug_resolution(container: Container, key: Any) -&gt; None:\n    \"\"\"\u8c03\u8bd5\u670d\u52a1\u89e3\u6790\u8fc7\u7a0b.\n\n    \u6253\u5370\u8be6\u7ec6\u7684\u89e3\u6790\u6b65\u9aa4\u548c\u4f9d\u8d56\u4fe1\u606f, \u5e2e\u52a9\u8bca\u65ad\u95ee\u9898\u3002\n\n    Args:\n        container: \u5bb9\u5668\u5b9e\u4f8b\n        key: \u8981\u8c03\u8bd5\u7684\u670d\u52a1\u952e\n\n    Example:\n        &gt;&gt;&gt; debug_resolution(container, UserService)\n        \ud83d\udd0d Resolving: UserService\n        \u2705 Registration found: UserService (Singleton)\n        \ud83d\udce6 Dependencies:\n          - UserRepository (registered: \u2705)\n          - Logger (registered: \u2705)\n        \ud83c\udfaf Resolution order:\n          1. Logger\n          2. UserRepository\n          3. UserService\n        \u2705 Resolution successful\n    \"\"\"\n    print(f\"\ud83d\udd0d Resolving: {_format_key(key)}\")\n\n    registration = container._registrations.get(key)\n    if not registration:\n        print(f\"\u274c Service not registered: {_format_key(key)}\")\n        return\n\n    lifetime = registration.lifetime.name\n    print(f\"\u2705 Registration found: {_format_key(key)} ({lifetime})\")\n\n    if registration.factory:\n        dependencies = _extract_dependencies(registration.factory)\n        if dependencies:\n            print(\"\ud83d\udce6 Dependencies:\")\n            for dep in dependencies:\n                is_registered = dep in container._registrations\n                status = \"\u2705\" if is_registered else \"\u274c\"\n                print(f\"  {status} {_format_key(dep)}\")\n\n            print(\"\\n\ud83c\udfaf Resolution order:\")\n            order = _resolve_order(container, key)\n            for i, service in enumerate(order, 1):\n                print(f\"  {i}. {_format_key(service)}\")\n        else:\n            print(\"\ud83d\udce6 No dependencies\")\n    else:\n        print(\"\ud83d\udce6 No factory (instance registration)\")\n\n    # \u5c1d\u8bd5\u5b9e\u9645\u89e3\u6790\n    try:\n        instance = container.resolve(key)\n        print(f\"\\n\u2705 Resolution successful: {type(instance).__name__}\")\n    except Exception as e:\n        print(f\"\\n\u274c Resolution failed: {e}\")\n</code></pre>"},{"location":"zh/guaids/visualization-diagnose-container/","title":"\u5bb9\u5668\u8bca\u65ad\uff08diagnose_container\uff09","text":""},{"location":"zh/guaids/visualization-diagnose-container/#symphra_container.visualization.diagnose_container","title":"<code>symphra_container.visualization.diagnose_container(container)</code>","text":"<p>\u8bca\u65ad\u5bb9\u5668\u5065\u5eb7\u72b6\u6001.</p> <p>\u68c0\u67e5\u5faa\u73af\u4f9d\u8d56\u3001\u65e0\u6cd5\u89e3\u6790\u7684\u670d\u52a1\u7b49\u95ee\u9898\u3002</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>container</code> <code>Container</code> <p>\u5bb9\u5668\u5b9e\u4f8b</p> \u5fc5\u9700 <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>ContainerDiagnostic</code> <p>\u8bca\u65ad\u62a5\u544a</p> Example <p>report = diagnose_container(container) print(f\"Health Score: {report.health_score}/100\") if report.circular_dependencies: ...     print(\"Circular dependencies found!\") if report.warnings: ...     for warning in report.warnings: ...         print(f\"\u26a0\ufe0f  {warning}\")</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/visualization.py</code> <pre><code>def diagnose_container(container: Container) -&gt; ContainerDiagnostic:\n    \"\"\"\u8bca\u65ad\u5bb9\u5668\u5065\u5eb7\u72b6\u6001.\n\n    \u68c0\u67e5\u5faa\u73af\u4f9d\u8d56\u3001\u65e0\u6cd5\u89e3\u6790\u7684\u670d\u52a1\u7b49\u95ee\u9898\u3002\n\n    Args:\n        container: \u5bb9\u5668\u5b9e\u4f8b\n\n    Returns:\n        \u8bca\u65ad\u62a5\u544a\n\n    Example:\n        &gt;&gt;&gt; report = diagnose_container(container)\n        &gt;&gt;&gt; print(f\"Health Score: {report.health_score}/100\")\n        &gt;&gt;&gt; if report.circular_dependencies:\n        ...     print(\"Circular dependencies found!\")\n        &gt;&gt;&gt; if report.warnings:\n        ...     for warning in report.warnings:\n        ...         print(f\"\u26a0\ufe0f  {warning}\")\n    \"\"\"\n    from .types import Lifetime\n\n    registrations = container._registrations\n    total = len(registrations)\n\n    # \u7edf\u8ba1\u751f\u547d\u5468\u671f\n    singleton_count = 0\n    transient_count = 0\n    scoped_count = 0\n\n    for registration in registrations.values():\n        # lifetime \u662f Lifetime \u679a\u4e3e\n        if registration.lifetime == Lifetime.SINGLETON:\n            singleton_count += 1\n        elif registration.lifetime == Lifetime.TRANSIENT:\n            transient_count += 1\n        elif registration.lifetime == Lifetime.SCOPED:\n            scoped_count += 1\n\n    # \u68c0\u67e5\u5faa\u73af\u4f9d\u8d56\n    circular = _detect_circular_dependencies(container)\n\n    # \u68c0\u67e5\u65e0\u6cd5\u89e3\u6790\u7684\u670d\u52a1\n    unresolvable = []\n    warnings = []\n\n    for key in registrations:\n        try:\n            container.resolve(key)\n        except Exception as e:\n            unresolvable.append(key)\n            warnings.append(f\"{_format_key(key)}: {e}\")\n\n    # \u8ba1\u7b97\u5065\u5eb7\u8bc4\u5206\n    health_score = 100.0\n    if circular:\n        health_score -= len(circular) * 20\n    if unresolvable:\n        health_score -= len(unresolvable) * 10\n    health_score = max(0, health_score)\n\n    return ContainerDiagnostic(\n        total_services=total,\n        singleton_count=singleton_count,\n        transient_count=transient_count,\n        scoped_count=scoped_count,\n        circular_dependencies=circular,\n        unresolvable_services=unresolvable,\n        warnings=warnings,\n        health_score=health_score,\n    )\n</code></pre>"},{"location":"zh/guaids/visualization-print-dependency-graph/","title":"\u6253\u5370\u4f9d\u8d56\u56fe\uff08print_dependency_graph\uff09","text":""},{"location":"zh/guaids/visualization-print-dependency-graph/#symphra_container.visualization.print_dependency_graph","title":"<code>symphra_container.visualization.print_dependency_graph(container, key=None, indent=0)</code>","text":"<p>\u6253\u5370\u4f9d\u8d56\u5173\u7cfb\u6811.</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>container</code> <code>Container</code> <p>\u5bb9\u5668\u5b9e\u4f8b</p> \u5fc5\u9700 <code>key</code> <code>Any</code> <p>\u670d\u52a1\u952e (None \u8868\u793a\u6253\u5370\u6240\u6709\u670d\u52a1)</p> <code>None</code> <code>indent</code> <code>int</code> <p>\u7f29\u8fdb\u7ea7\u522b (\u5185\u90e8\u4f7f\u7528)</p> <code>0</code> Example <p>print_dependency_graph(container) UserService (Singleton)   \u251c\u2500 UserRepository (Scoped)   \u2502  \u2514\u2500 DatabaseContext (Singleton)   \u2514\u2500 Logger (Singleton)</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/visualization.py</code> <pre><code>def print_dependency_graph(container: Container, key: Any = None, indent: int = 0) -&gt; None:\n    \"\"\"\u6253\u5370\u4f9d\u8d56\u5173\u7cfb\u6811.\n\n    Args:\n        container: \u5bb9\u5668\u5b9e\u4f8b\n        key: \u670d\u52a1\u952e (None \u8868\u793a\u6253\u5370\u6240\u6709\u670d\u52a1)\n        indent: \u7f29\u8fdb\u7ea7\u522b (\u5185\u90e8\u4f7f\u7528)\n\n    Example:\n        &gt;&gt;&gt; print_dependency_graph(container)\n        UserService (Singleton)\n          \u251c\u2500 UserRepository (Scoped)\n          \u2502  \u2514\u2500 DatabaseContext (Singleton)\n          \u2514\u2500 Logger (Singleton)\n\n        &gt;&gt;&gt; # \u6253\u5370\u7279\u5b9a\u670d\u52a1\u7684\u4f9d\u8d56\u6811\n        &gt;&gt;&gt; print_dependency_graph(container, UserService)\n    \"\"\"\n    if key is None:\n        # \u6253\u5370\u6240\u6709\u9876\u5c42\u670d\u52a1\n        for service_key in container._registrations:\n            print_dependency_graph(container, service_key, 0)\n            print()\n        return\n\n    registration = container._registrations.get(key)\n    if not registration:\n        print(f\"{'  ' * indent}\u274c {_format_key(key)} (Not registered)\")\n        return\n\n    # \u4f7f\u7528\u679a\u4e3e\u7684 name \u5c5e\u6027\u800c\u4e0d\u662f\u7c7b\u540d\n    lifetime = registration.lifetime.name\n    key_name = _format_key(key)\n\n    print(f\"{'  ' * indent}{key_name} ({lifetime})\")\n\n    if registration.factory:\n        dependencies = _extract_dependencies(registration.factory)\n        for i, dep in enumerate(dependencies):\n            is_last = i == len(dependencies) - 1\n            prefix = \"\u2514\u2500\" if is_last else \"\u251c\u2500\"\n            print(f\"{'  ' * indent}{prefix} \", end=\"\")\n            print_dependency_graph(container, dep, indent + 1)\n</code></pre>"},{"location":"zh/guaids/visualization-print-dependency-graph/#symphra_container.visualization.print_dependency_graph--_1","title":"\u6253\u5370\u7279\u5b9a\u670d\u52a1\u7684\u4f9d\u8d56\u6811","text":"<p>print_dependency_graph(container, UserService)</p>"},{"location":"zh/guaids/visualization-visualize-container/","title":"\u5bb9\u5668\u53ef\u89c6\u5316\uff08visualize_container\uff09","text":""},{"location":"zh/guaids/visualization-visualize-container/#symphra_container.visualization.visualize_container","title":"<code>symphra_container.visualization.visualize_container(container, format='dot')</code>","text":"<p>\u751f\u6210\u5bb9\u5668\u670d\u52a1\u4f9d\u8d56\u5173\u7cfb\u7684\u53ef\u89c6\u5316\u56fe.</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>container</code> <code>Container</code> <p>\u5bb9\u5668\u5b9e\u4f8b</p> \u5fc5\u9700 <code>format</code> <code>str</code> <p>\u8f93\u51fa\u683c\u5f0f, \u652f\u6301 'dot' (Graphviz) \u6216 'mermaid'</p> <code>'dot'</code> <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>str</code> <p>\u53ef\u89c6\u5316\u56fe\u7684\u5b57\u7b26\u4e32\u8868\u793a</p> Example <p>dot = visualize_container(container, format='dot')</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/symphra_container/visualization.py</code> <pre><code>def visualize_container(container: Container, format: str = \"dot\") -&gt; str:\n    \"\"\"\u751f\u6210\u5bb9\u5668\u670d\u52a1\u4f9d\u8d56\u5173\u7cfb\u7684\u53ef\u89c6\u5316\u56fe.\n\n    Args:\n        container: \u5bb9\u5668\u5b9e\u4f8b\n        format: \u8f93\u51fa\u683c\u5f0f, \u652f\u6301 'dot' (Graphviz) \u6216 'mermaid'\n\n    Returns:\n        \u53ef\u89c6\u5316\u56fe\u7684\u5b57\u7b26\u4e32\u8868\u793a\n\n    Example:\n        &gt;&gt;&gt; dot = visualize_container(container, format='dot')\n        &gt;&gt;&gt; # \u4fdd\u5b58\u4e3a\u6587\u4ef6\u4f9b Graphviz \u6e32\u67d3\n        &gt;&gt;&gt; with open('container.dot', 'w') as f:\n        ...     f.write(dot)\n        &gt;&gt;&gt;\n        &gt;&gt;&gt; # \u6216\u8005\u4f7f\u7528 Mermaid\n        &gt;&gt;&gt; mermaid = visualize_container(container, format='mermaid')\n    \"\"\"\n    if format == \"dot\":\n        return _generate_dot(container)\n    if format == \"mermaid\":\n        return _generate_mermaid(container)\n    msg = f\"Unsupported format: {format}\"\n    raise ValueError(msg)\n</code></pre>"},{"location":"zh/guaids/visualization-visualize-container/#symphra_container.visualization.visualize_container--graphviz","title":"\u4fdd\u5b58\u4e3a\u6587\u4ef6\u4f9b Graphviz \u6e32\u67d3","text":"<p>with open('container.dot', 'w') as f: ...     f.write(dot)</p>"},{"location":"zh/guaids/visualization-visualize-container/#symphra_container.visualization.visualize_container--mermaid","title":"\u6216\u8005\u4f7f\u7528 Mermaid","text":"<p>mermaid = visualize_container(container, format='mermaid')</p>"},{"location":"zh/guides/","title":"Symphra Container","text":"<p>\u4f01\u4e1a\u7ea7 Python \u4f9d\u8d56\u6ce8\u5165\u5bb9\u5668\u5e93\uff0c\u652f\u6301\u540c\u6b65\u548c\u5f02\u6b65\u670d\u52a1\u3002</p>"},{"location":"zh/guides/#_1","title":"\u7279\u6027","text":"<ul> <li>\ud83c\udfaf 4 \u79cd\u751f\u547d\u5468\u671f\u652f\u6301 (Singleton, Transient, Scoped, Factory)</li> <li>\ud83d\udcaa \u5b8c\u6574\u7684\u7c7b\u578b\u63d0\u793a\u652f\u6301</li> <li>\u26a1 \u9ad8\u6027\u80fd\u5b9e\u73b0</li> <li>\ud83d\udd04 \u5faa\u73af\u4f9d\u8d56\u68c0\u6d4b\u4e0e\u89e3\u51b3</li> <li>\ud83c\udfaa \u62e6\u622a\u5668\u7cfb\u7edf</li> <li>\ud83c\udf0d \u7edf\u4e00\u5f02\u6b65/\u540c\u6b65\u652f\u6301</li> <li>\ud83d\udd0c \u53ef\u9009\u7684\u6846\u67b6\u96c6\u6210 (FastAPI, Flask, Django)</li> </ul>"},{"location":"zh/guides/#_2","title":"\u5b89\u88c5","text":"<pre><code># \u57fa\u7840\u5b89\u88c5\npip install symphra-container\n\n# \u5b89\u88c5 FastAPI \u96c6\u6210\npip install symphra-container[fastapi]\n\n# \u5b89\u88c5 Flask \u96c6\u6210\npip install symphra-container[flask]\n\n# \u5b89\u88c5 Django \u96c6\u6210\npip install symphra-container[django]\n\n# \u5b89\u88c5\u6240\u6709\u96c6\u6210\npip install symphra-container[all]\n</code></pre>"},{"location":"zh/guides/#_3","title":"\u5feb\u901f\u5f00\u59cb","text":""},{"location":"zh/guides/#_4","title":"\u57fa\u672c\u7528\u6cd5","text":"<pre><code>from symphra_container import Container, Lifetime\n\n# \u521b\u5efa\u5bb9\u5668\ncontainer = Container()\n\n# \u6ce8\u518c\u670d\u52a1\nclass UserService:\n    def get_user(self, user_id: int):\n        return {\"id\": user_id, \"name\": \"User\"}\n\ncontainer.register(UserService, lifetime=Lifetime.SINGLETON)\n\n# \u89e3\u6790\u670d\u52a1\nservice = container.resolve(UserService)\nuser = service.get_user(123)\n</code></pre>"},{"location":"zh/guides/#_5","title":"\u5f02\u6b65\u670d\u52a1","text":"<pre><code>import asyncio\n\nclass AsyncUserService:\n    async def get_user(self, user_id: int):\n        await asyncio.sleep(0.1)\n        return {\"id\": user_id, \"name\": \"Async User\"}\n\n# \u6ce8\u518c\u5f02\u6b65\u670d\u52a1(\u81ea\u52a8\u68c0\u6d4b)\ncontainer.register(AsyncUserService, lifetime=Lifetime.SINGLETON)\n\n# \u4f7f\u7528 resolve_async \u89e3\u6790\nasync def main():\n    service = await container.resolve_async(AsyncUserService)\n    user = await service.get_user(456)\n    print(user)\n\nasyncio.run(main())\n</code></pre>"},{"location":"zh/guides/#_6","title":"\u6846\u67b6\u96c6\u6210 (\u53ef\u9009)","text":""},{"location":"zh/guides/#fastapi","title":"FastAPI","text":"<pre><code>from fastapi import FastAPI, Depends\nfrom symphra_container.integrations import fastapi_inject, setup_fastapi\n\napp = FastAPI()\nsetup_fastapi(app, container)\n\n@app.get(\"/users/{user_id}\")\nasync def get_user(\n    user_id: int,\n    user_service: UserService = Depends(fastapi_inject(UserService))\n):\n    return await user_service.get_user(user_id)\n</code></pre>"},{"location":"zh/guides/#flask","title":"Flask","text":"<pre><code>from flask import Flask\nfrom symphra_container.integrations import FlaskContainer\n\napp = Flask(__name__)\nflask_container = FlaskContainer(app, container)\n\n@app.route(\"/users/&lt;int:user_id&gt;\")\n@flask_container.inject\ndef get_user(user_id: int, user_service: UserService):\n    return user_service.get_user(user_id)\n</code></pre>"},{"location":"zh/guides/#django","title":"Django","text":"<pre><code># settings.py\nfrom symphra_container.integrations import DjangoContainer\n\nCONTAINER = Container()\nDjangoContainer.setup(CONTAINER)\n\nMIDDLEWARE = [\n    'symphra_container.integrations.django.ContainerMiddleware',\n    # ...\n]\n\n# views.py\n@DjangoContainer.inject\ndef user_view(request, user_id: int, user_service: UserService):\n    return JsonResponse(user_service.get_user(user_id))\n</code></pre>"},{"location":"zh/guides/#_7","title":"\u6587\u6863","text":"<ul> <li>\u5feb\u901f\u5165\u95e8\u6307\u5357</li> <li>API \u6587\u6863</li> <li>\u6846\u67b6\u96c6\u6210\u6307\u5357</li> <li>\u6d4b\u8bd5\u6307\u5357</li> </ul>"},{"location":"zh/guides/#_8","title":"\u6027\u80fd","text":"<ul> <li>\u670d\u52a1\u89e3\u6790: ~0.05ms</li> <li>\u5355\u4f8b\u7f13\u5b58: ~0.01ms</li> <li>\u5185\u5b58\u5360\u7528: &lt; 1MB (1000 \u670d\u52a1)</li> </ul>"},{"location":"zh/guides/#_9","title":"\u8bb8\u53ef","text":"<p>MIT</p>"},{"location":"zh/guides/QUICK_START_UV/","title":"Symphra Container - \u4f7f\u7528 uv \u7684\u5feb\u901f\u542f\u52a8\u6307\u5357","text":""},{"location":"zh/guides/QUICK_START_UV/#5","title":"\ud83d\ude80 5 \u5206\u949f\u5feb\u901f\u542f\u52a8","text":""},{"location":"zh/guides/QUICK_START_UV/#_1","title":"\u524d\u63d0\u6761\u4ef6","text":"<ul> <li>Python 3.11+ \u5df2\u5b89\u88c5</li> <li>uv \u5df2\u5b89\u88c5\uff08\u5b89\u88c5 uv\uff09</li> </ul>"},{"location":"zh/guides/QUICK_START_UV/#1","title":"\u6b65\u9aa4 1: \u8fdb\u5165\u9879\u76ee\u76ee\u5f55","text":"<pre><code>cd /opt/data/www/yfb/packages/symphra-container\n</code></pre>"},{"location":"zh/guides/QUICK_START_UV/#2","title":"\u6b65\u9aa4 2: \u521b\u5efa\u865a\u62df\u73af\u5883\u5e76\u5b89\u88c5\u4f9d\u8d56\uff08\u4e00\u884c\u547d\u4ee4\uff09","text":"<pre><code>uv sync --extra dev --extra frameworks\n</code></pre>"},{"location":"zh/guides/QUICK_START_UV/#3","title":"\u6b65\u9aa4 3: \u6fc0\u6d3b\u865a\u62df\u73af\u5883","text":"<pre><code>source .venv/bin/activate  # macOS/Linux\n# \u6216\n.venv\\Scripts\\activate     # Windows\n</code></pre>"},{"location":"zh/guides/QUICK_START_UV/#4","title":"\u6b65\u9aa4 4: \u9a8c\u8bc1\u5b89\u88c5","text":"<pre><code>python --version           # \u5e94\u8be5\u662f 3.11+\nuv run pytest tests/ -v    # \u8fd0\u884c\u6d4b\u8bd5\u9a8c\u8bc1\n</code></pre> <p>\u5b8c\u6210\uff01 \u2705 \u73b0\u5728\u53ef\u4ee5\u5f00\u59cb\u5f00\u53d1\u4e86\u3002</p>"},{"location":"zh/guides/QUICK_START_UV/#_2","title":"\ud83d\udd27 \u5e38\u7528\u547d\u4ee4\u901f\u67e5\u8868","text":""},{"location":"zh/guides/QUICK_START_UV/#_3","title":"\u5f00\u53d1\u5de5\u4f5c\u6d41","text":"<pre><code># \u6fc0\u6d3b\u865a\u62df\u73af\u5883\uff08\u6bcf\u6b21\u4f7f\u7528\u524d\uff09\nsource .venv/bin/activate\n\n# \u4e00\u6b21\u6027\u8fd0\u884c\u6240\u6709\u68c0\u67e5\nmake check\n\n# \u6216\u5206\u522b\u8fd0\u884c\nmake format  # \u4ee3\u7801\u683c\u5f0f\u5316\nmake lint    # \u4ee3\u7801\u68c0\u67e5\nmake type    # \u7c7b\u578b\u68c0\u67e5\nmake test    # \u8fd0\u884c\u6d4b\u8bd5\n\n# \u751f\u6210\u8986\u76d6\u7387\u62a5\u544a\nmake coverage\n</code></pre>"},{"location":"zh/guides/QUICK_START_UV/#_4","title":"\u4f9d\u8d56\u7ba1\u7406","text":"<pre><code># \u540c\u6b65\u4f9d\u8d56\nuv sync\n\n# \u5b89\u88c5\u989d\u5916\u4f9d\u8d56\nuv sync --extra dev --extra frameworks\n\n# \u6dfb\u52a0\u65b0\u5305\nuv pip install package-name\n\n# \u5217\u51fa\u5df2\u5b89\u88c5\u7684\u5305\nuv pip list\n</code></pre>"},{"location":"zh/guides/QUICK_START_UV/#_5","title":"\u4ee3\u7801\u8d28\u91cf","text":"<pre><code># \u683c\u5f0f\u5316\u4ee3\u7801\nuv run ruff format src/ tests/\n\n# \u68c0\u67e5\u4ee3\u7801\u95ee\u9898\nuv run ruff check src/ tests/\n\n# \u81ea\u52a8\u4fee\u590d\u95ee\u9898\nuv run ruff check src/ tests/ --fix\n\n# \u7c7b\u578b\u68c0\u67e5\nuv run mypy src/symphra_container --strict\n\n# \u8fd0\u884c\u6d4b\u8bd5\nuv run pytest tests/ -v --cov\n</code></pre>"},{"location":"zh/guides/QUICK_START_UV/#_6","title":"\ud83d\udcca \u9879\u76ee\u7edf\u8ba1","text":"\u9879\u76ee \u8be6\u60c5 Python \u7248\u672c 3.11+ \u5305\u7ba1\u7406\u5668 uv\uff08\u8d85\u5feb\u901f\uff09 \u4ee3\u7801\u68c0\u67e5 ruff\uff0850+ \u89c4\u5219\u96c6\uff09 \u7c7b\u578b\u68c0\u67e5 mypy\uff08\u4e25\u683c\u6a21\u5f0f\uff09 \u6d4b\u8bd5\u6846\u67b6 pytest\uff08\u76ee\u6807 90%+ \u8986\u76d6\uff09 \u6d4b\u8bd5\u8986\u76d6 &gt;= 90% CI/CD GitHub Actions"},{"location":"zh/guides/QUICK_START_UV/#_7","title":"\u2705 \u4ee3\u7801\u8d28\u91cf\u6807\u51c6","text":"<p>\u5728\u63d0\u4ea4\u524d\uff0c\u786e\u4fdd\uff1a - \u2705 <code>make format</code> \u65e0\u9519\u8bef\uff08\u4ee3\u7801\u683c\u5f0f\u5316\uff09 - \u2705 <code>make lint</code> \u65e0\u8b66\u544a\uff08\u4ee3\u7801\u68c0\u67e5\uff09 - \u2705 <code>make type</code> \u65e0\u9519\u8bef\uff08\u7c7b\u578b\u68c0\u67e5\uff09 - \u2705 <code>make test</code> \u901a\u8fc7\uff08\u6d4b\u8bd5\u901a\u8fc7\uff0c\u8986\u76d6\u7387 &gt;= 90%\uff09</p> <p>\u4e00\u884c\u547d\u4ee4\u68c0\u67e5\u6240\u6709\u9879: <pre><code>make check\n</code></pre></p>"},{"location":"zh/guides/QUICK_START_UV/#troubleshooting","title":"\ud83d\udc1b troubleshooting","text":""},{"location":"zh/guides/QUICK_START_UV/#q-uv","title":"Q: \u627e\u4e0d\u5230 uv \u547d\u4ee4\uff1f","text":"<pre><code># \u91cd\u65b0\u5b89\u88c5 uv\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n# \u6216\nbrew install uv\n</code></pre>"},{"location":"zh/guides/QUICK_START_UV/#q","title":"Q: \u865a\u62df\u73af\u5883\u672a\u6fc0\u6d3b\uff1f","text":"<pre><code># macOS/Linux\nsource .venv/bin/activate\n\n# Windows\n.venv\\Scripts\\activate\n</code></pre>"},{"location":"zh/guides/QUICK_START_UV/#q-python","title":"Q: Python \u7248\u672c\u4e0d\u5bf9\uff1f","text":"<pre><code>python --version  # \u5e94\u8be5\u662f 3.11+\nuv python install 3.11  # \u4e0b\u8f7d Python 3.11\n</code></pre>"},{"location":"zh/guides/QUICK_START_UV/#q_1","title":"Q: \u4f9d\u8d56\u51b2\u7a81\uff1f","text":"<pre><code>uv sync  # \u91cd\u65b0\u540c\u6b65\u6240\u6709\u4f9d\u8d56\n</code></pre>"},{"location":"zh/guides/QUICK_START_UV/#_8","title":"\ud83d\udcda \u67e5\u770b\u66f4\u591a","text":"<ul> <li>\u5b8c\u6574\u5f00\u53d1\u6307\u5357: \u67e5\u770b <code>DEVELOPMENT_SETUP.md</code></li> <li>\u9879\u76ee\u89c4\u5212: \u67e5\u770b <code>INTEGRATED_ROADMAP.md</code></li> <li>API \u53c2\u8003: \u67e5\u770b <code>API_DESIGN.md</code></li> <li>\u6240\u6709\u6587\u6863: \u67e5\u770b <code>INDEX.md</code></li> </ul> <p>\u73b0\u5728\u5c31\u5f00\u59cb\u5427\uff01 \ud83c\udf89</p> <pre><code>uv sync --extra dev --extra frameworks\nsource .venv/bin/activate\nmake check\n</code></pre>"},{"location":"zh/integrations/django/","title":"Django \u96c6\u6210","text":""},{"location":"zh/integrations/django/#_1","title":"\u5b89\u88c5","text":"<pre><code>pip install symphra-container[django]\n</code></pre>"},{"location":"zh/integrations/django/#_2","title":"\u4f7f\u7528\u793a\u4f8b","text":"<p>\u5728 <code>settings.py</code> \u4e2d\u914d\u7f6e\uff1a <pre><code>from symphra_container import Container, Lifetime\nfrom symphra_container.integrations import DjangoContainer\n\nCONTAINER = Container()\nCONTAINER.register(SomeService, lifetime=Lifetime.SCOPED)\n</code></pre></p> <p>\u5728\u89c6\u56fe\u4e2d\u4f7f\u7528\uff1a <pre><code>from symphra_container.integrations import DjangoContainer\n\ndef user_view(request, user_id):\n    svc = DjangoContainer.resolve(SomeService)\n    return JsonResponse(svc.get(user_id))\n\n@DjangoContainer.inject\ndef email_view(request, email_service: EmailService):\n    email_service.send(\"test@example.com\", \"Hello\")\n    return JsonResponse({\"status\": \"sent\"})\n</code></pre></p>"},{"location":"zh/integrations/fastapi/","title":"FastAPI \u96c6\u6210","text":""},{"location":"zh/integrations/fastapi/#_1","title":"\u5b89\u88c5","text":"<pre><code>pip install symphra-container[fastapi]\n</code></pre>"},{"location":"zh/integrations/fastapi/#_2","title":"\u4f7f\u7528\u793a\u4f8b","text":"<pre><code>from symphra_container import Container, Lifetime\nfrom symphra_container.integrations import fastapi_inject, setup_fastapi\nfrom fastapi import FastAPI, Depends\n\nclass UserService:\n    async def get_user(self, user_id: int):\n        return {\"id\": user_id, \"name\": \"Alice\"}\n\ncontainer = Container()\ncontainer.register(UserService, lifetime=Lifetime.SCOPED)\n\napp = FastAPI()\nsetup_fastapi(app, container)\n\n@app.get(\"/users/{user_id}\")\nasync def get_user(user_id: int, svc: UserService = Depends(fastapi_inject(UserService))):\n    return await svc.get_user(user_id)\n</code></pre>"},{"location":"zh/integrations/flask/","title":"Flask \u96c6\u6210","text":""},{"location":"zh/integrations/flask/#_1","title":"\u5b89\u88c5","text":"<pre><code>pip install symphra-container[flask]\n</code></pre>"},{"location":"zh/integrations/flask/#_2","title":"\u4f7f\u7528\u793a\u4f8b","text":"<pre><code>from symphra_container import Container, Lifetime\nfrom symphra_container.integrations import FlaskContainer\nfrom flask import Flask\n\nclass EmailService:\n    def send(self, to: str, text: str):\n        print(\"send\", to, text)\n\ncontainer = Container()\ncontainer.register(EmailService, lifetime=Lifetime.SCOPED)\n\napp = Flask(__name__)\nflask_container = FlaskContainer(app, container)\n\n@app.route(\"/send/&lt;email&gt;\")\n@flask_container.inject\ndef send(email: str, email_service: EmailService):\n    email_service.send(email, \"Hello\")\n    return {\"status\": \"ok\"}\n</code></pre>"},{"location":"zh/reference/ADVANCED_FEATURES_IMPLEMENTATION/","title":"\u9ad8\u7ea7\u7279\u6027\u5b9e\u73b0\u603b\u7ed3","text":""},{"location":"zh/reference/ADVANCED_FEATURES_IMPLEMENTATION/#_2","title":"\u5b9e\u73b0\u5b8c\u6210","text":"<p>\u672c\u6b21\u66f4\u65b0\u5b9e\u73b0\u4e86\u4e24\u4e2a\u91cd\u8981\u7684\u9ad8\u7ea7\u7279\u6027\uff1a</p>"},{"location":"zh/reference/ADVANCED_FEATURES_IMPLEMENTATION/#1-generic-type-parameters","title":"1. \u2705 \u6cdb\u578b\u7c7b\u578b\u53c2\u6570\u533a\u5206 (Generic Type Parameters)","text":"<p>\u5141\u8bb8\u533a\u5206\u4e0d\u540c\u7c7b\u578b\u53c2\u6570\u7684\u6cdb\u578b\u670d\u52a1\uff0c\u5982 <code>Repository[User]</code> \u548c <code>Repository[Order]</code> \u88ab\u89c6\u4e3a\u4e0d\u540c\u7684\u670d\u52a1\u3002</p> <p>\u6838\u5fc3\u6587\u4ef6: - <code>src/symphra_container/generics.py</code> - \u6cdb\u578b\u652f\u6301\u5b9e\u73b0 - <code>tests/unit/test_generics.py</code> - \u6cdb\u578b\u6d4b\u8bd5 (13 \u4e2a\u6d4b\u8bd5\u5168\u90e8\u901a\u8fc7)</p> <p>\u4e3b\u8981\u529f\u80fd:</p> <ol> <li>GenericKey \u7c7b</li> <li>\u8868\u793a\u6cdb\u578b\u7c7b\u578b\u7684\u552f\u4e00\u952e</li> <li>\u652f\u6301 <code>__eq__</code> \u548c <code>__hash__</code> \u7528\u4e8e\u5b57\u5178\u67e5\u627e</li> <li> <p>\u53ef\u8bfb\u7684 <code>__repr__</code> \u8868\u793a</p> </li> <li> <p>register_generic() \u51fd\u6570</p> </li> <li>\u6ce8\u518c\u6cdb\u578b\u670d\u52a1</li> <li>\u652f\u6301\u5b9e\u73b0\u7c7b\u6216\u5de5\u5382\u51fd\u6570</li> <li> <p>\u652f\u6301\u6307\u5b9a\u751f\u547d\u5468\u671f</p> </li> <li> <p>resolve_generic() \u51fd\u6570</p> </li> <li>\u89e3\u6790\u6cdb\u578b\u670d\u52a1</li> <li> <p>\u81ea\u52a8\u4f9d\u8d56\u6ce8\u5165</p> </li> <li> <p>is_generic_type() \u51fd\u6570</p> </li> <li>\u68c0\u67e5\u7c7b\u578b\u662f\u5426\u4e3a\u6cdb\u578b\u7c7b\u578b</li> </ol> <p>\u4f7f\u7528\u793a\u4f8b: <pre><code>from typing import Generic, TypeVar\nfrom symphra_container import Container, Lifetime\nfrom symphra_container.generics import register_generic, resolve_generic\n\nT = TypeVar('T')\n\nclass Repository(Generic[T]):\n    def get(self, id: int) -&gt; T:\n        ...\n\nclass UserRepository(Repository[User]):\n    def get(self, id: int) -&gt; User:\n        return User(f\"User {id}\")\n\n# \u6ce8\u518c\ncontainer = Container()\nregister_generic(container, Repository[User], UserRepository)\nregister_generic(container, Repository[Order], OrderRepository)\n\n# \u89e3\u6790\nuser_repo = resolve_generic(container, Repository[User])\norder_repo = resolve_generic(container, Repository[Order])\n</code></pre></p> <p>\u6d4b\u8bd5\u8986\u76d6: 93.55% (46 \u8bed\u53e5, 2 \u672a\u8986\u76d6)</p>"},{"location":"zh/reference/ADVANCED_FEATURES_IMPLEMENTATION/#2-visualization-debugging-tools","title":"2. \u2705 \u53ef\u89c6\u5316\u548c\u8c03\u8bd5\u5de5\u5177 (Visualization &amp; Debugging Tools)","text":"<p>\u63d0\u4f9b\u5f3a\u5927\u7684\u5bb9\u5668\u53ef\u89c6\u5316\u548c\u8bca\u65ad\u529f\u80fd\uff0c\u5e2e\u52a9\u5f00\u53d1\u8005\u7406\u89e3\u4f9d\u8d56\u5173\u7cfb\u548c\u8c03\u8bd5\u95ee\u9898\u3002</p> <p>\u6838\u5fc3\u6587\u4ef6: - <code>src/symphra_container/visualization.py</code> - \u53ef\u89c6\u5316\u5de5\u5177\u5b9e\u73b0 - <code>tests/unit/test_visualization.py</code> - \u53ef\u89c6\u5316\u6d4b\u8bd5 (16 \u4e2a\u6d4b\u8bd5\u5168\u90e8\u901a\u8fc7)</p> <p>\u4e3b\u8981\u529f\u80fd:</p> <ol> <li>visualize_container()</li> <li>\u751f\u6210 DOT \u683c\u5f0f (Graphviz)</li> <li>\u751f\u6210 Mermaid \u683c\u5f0f</li> <li>\u652f\u6301\u751f\u547d\u5468\u671f\u7740\u8272</li> <li> <p>\u663e\u793a\u4f9d\u8d56\u5173\u7cfb\u7bad\u5934</p> </li> <li> <p>print_dependency_graph()</p> </li> <li>\u6253\u5370\u6587\u672c\u683c\u5f0f\u7684\u4f9d\u8d56\u6811</li> <li>\u652f\u6301\u6253\u5370\u6240\u6709\u670d\u52a1\u6216\u7279\u5b9a\u670d\u52a1</li> <li> <p>\u6811\u5f62\u7ed3\u6784\u663e\u793a</p> </li> <li> <p>debug_resolution()</p> </li> <li>\u663e\u793a\u670d\u52a1\u89e3\u6790\u7684\u8be6\u7ec6\u6b65\u9aa4</li> <li>\u5217\u51fa\u6240\u6709\u4f9d\u8d56\u53ca\u5176\u6ce8\u518c\u72b6\u6001</li> <li>\u663e\u793a\u89e3\u6790\u987a\u5e8f</li> <li> <p>\u663e\u793a\u89e3\u6790\u7ed3\u679c\u6216\u9519\u8bef</p> </li> <li> <p>diagnose_container()</p> </li> <li>\u5bb9\u5668\u5065\u5eb7\u8bca\u65ad</li> <li>\u7edf\u8ba1\u5404\u751f\u547d\u5468\u671f\u670d\u52a1\u6570\u91cf</li> <li>\u68c0\u6d4b\u5faa\u73af\u4f9d\u8d56</li> <li>\u68c0\u6d4b\u65e0\u6cd5\u89e3\u6790\u7684\u670d\u52a1</li> <li> <p>\u8ba1\u7b97\u5065\u5eb7\u8bc4\u5206 (0-100)</p> </li> <li> <p>ContainerDiagnostic \u6570\u636e\u7c7b</p> </li> <li>\u8bca\u65ad\u62a5\u544a\u7684\u7ed3\u6784\u5316\u6570\u636e</li> </ol> <p>\u4f7f\u7528\u793a\u4f8b: <pre><code>from symphra_container.visualization import (\n    visualize_container,\n    print_dependency_graph,\n    debug_resolution,\n    diagnose_container\n)\n\n# \u751f\u6210\u53ef\u89c6\u5316\u56fe\ndot = visualize_container(container, format='dot')\nmermaid = visualize_container(container, format='mermaid')\n\n# \u6253\u5370\u4f9d\u8d56\u6811\nprint_dependency_graph(container)\n\n# \u8c03\u8bd5\u7279\u5b9a\u670d\u52a1\ndebug_resolution(container, UserService)\n\n# \u5065\u5eb7\u8bca\u65ad\nreport = diagnose_container(container)\nprint(f\"\u5065\u5eb7\u8bc4\u5206: {report.health_score}/100\")\n</code></pre></p> <p>\u6d4b\u8bd5\u8986\u76d6: 91.16% (175 \u8bed\u53e5, 11 \u672a\u8986\u76d6)</p>"},{"location":"zh/reference/ADVANCED_FEATURES_IMPLEMENTATION/#_3","title":"\u66f4\u65b0\u5185\u5bb9","text":""},{"location":"zh/reference/ADVANCED_FEATURES_IMPLEMENTATION/#_4","title":"\u65b0\u589e\u6587\u4ef6","text":"<ul> <li><code>src/symphra_container/generics.py</code> (46 \u884c\u4ee3\u7801)</li> <li><code>src/symphra_container/visualization.py</code> (175 \u884c\u4ee3\u7801)</li> <li><code>tests/unit/test_generics.py</code> (236 \u884c\u6d4b\u8bd5)</li> <li><code>tests/unit/test_visualization.py</code> (275 \u884c\u6d4b\u8bd5)</li> <li><code>docs/advanced-features.md</code> (\u5b8c\u6574\u6587\u6863)</li> <li><code>examples/advanced_features_demo.py</code> (\u6f14\u793a\u811a\u672c)</li> </ul>"},{"location":"zh/reference/ADVANCED_FEATURES_IMPLEMENTATION/#_5","title":"\u66f4\u65b0\u6587\u4ef6","text":"<ul> <li><code>src/symphra_container/__init__.py</code> - \u5bfc\u51fa\u65b0\u6a21\u5757\u7684\u6240\u6709\u516c\u5171 API</li> </ul>"},{"location":"zh/reference/ADVANCED_FEATURES_IMPLEMENTATION/#_6","title":"\u6d4b\u8bd5\u7ed3\u679c","text":"<pre><code>tests/unit/test_generics.py: 13 \u4e2a\u6d4b\u8bd5 \u2705 \u5168\u90e8\u901a\u8fc7\ntests/unit/test_visualization.py: 16 \u4e2a\u6d4b\u8bd5 \u2705 \u5168\u90e8\u901a\u8fc7\n\n\u603b\u8ba1: 29 \u4e2a\u6d4b\u8bd5\u5168\u90e8\u901a\u8fc7 \ud83c\udf89\n</code></pre>"},{"location":"zh/reference/ADVANCED_FEATURES_IMPLEMENTATION/#_7","title":"\u4ee3\u7801\u8986\u76d6\u7387","text":"<ul> <li><code>generics.py</code>: 93.55%</li> <li><code>visualization.py</code>: 91.16%</li> </ul>"},{"location":"zh/reference/ADVANCED_FEATURES_IMPLEMENTATION/#_8","title":"\u529f\u80fd\u7279\u70b9","text":""},{"location":"zh/reference/ADVANCED_FEATURES_IMPLEMENTATION/#_9","title":"\u6cdb\u578b\u652f\u6301\u7279\u70b9","text":"<p>\u2705 \u5b8c\u6574\u7684\u7c7b\u578b\u53c2\u6570\u533a\u5206 \u2705 \u652f\u6301\u591a\u7c7b\u578b\u53c2\u6570\u6cdb\u578b (\u5982 <code>Mapper[T1, T2]</code>) \u2705 \u81ea\u52a8\u4f9d\u8d56\u6ce8\u5165 \u2705 \u5de5\u5382\u51fd\u6570\u548c\u5b9e\u73b0\u7c7b\u4e24\u79cd\u6ce8\u518c\u65b9\u5f0f \u2705 \u7075\u6d3b\u7684\u751f\u547d\u5468\u671f\u914d\u7f6e \u2705 \u7c7b\u578b\u68c0\u67e5\u8f85\u52a9\u51fd\u6570  </p>"},{"location":"zh/reference/ADVANCED_FEATURES_IMPLEMENTATION/#_10","title":"\u53ef\u89c6\u5316\u5de5\u5177\u7279\u70b9","text":"<p>\u2705 \u591a\u79cd\u8f93\u51fa\u683c\u5f0f (DOT, Mermaid) \u2705 \u751f\u547d\u5468\u671f\u989c\u8272\u7f16\u7801 \u2705 \u4f9d\u8d56\u5173\u7cfb\u53ef\u89c6\u5316 \u2705 \u8be6\u7ec6\u7684\u89e3\u6790\u6b65\u9aa4\u8ddf\u8e2a \u2705 \u5bb9\u5668\u5065\u5eb7\u8bc4\u5206\u7cfb\u7edf \u2705 \u5faa\u73af\u4f9d\u8d56\u68c0\u6d4b \u2705 \u6587\u672c\u6811\u5f62\u7ed3\u6784\u663e\u793a  </p>"},{"location":"zh/reference/ADVANCED_FEATURES_IMPLEMENTATION/#_11","title":"\u6587\u6863","text":""},{"location":"zh/reference/ADVANCED_FEATURES_IMPLEMENTATION/#api","title":"API \u6587\u6863","text":"<p>\u5b8c\u6574\u7684 API \u53c2\u8003\u6587\u6863\u5df2\u6dfb\u52a0\u5230 <code>docs/advanced-features.md</code>: - \u6cdb\u578b\u652f\u6301 API - \u53ef\u89c6\u5316\u5de5\u5177 API - \u4f7f\u7528\u793a\u4f8b - \u6700\u4f73\u5b9e\u8df5</p>"},{"location":"zh/reference/ADVANCED_FEATURES_IMPLEMENTATION/#_12","title":"\u793a\u4f8b\u4ee3\u7801","text":"<p><code>examples/advanced_features_demo.py</code> \u63d0\u4f9b\u4e86\u5b8c\u6574\u7684\u4f7f\u7528\u6f14\u793a: - \u6cdb\u578b\u7c7b\u578b\u6ce8\u518c\u548c\u89e3\u6790 - \u4f9d\u8d56\u5173\u7cfb\u53ef\u89c6\u5316 - \u5bb9\u5668\u5065\u5eb7\u8bca\u65ad - \u8c03\u8bd5\u5de5\u5177\u4f7f\u7528</p>"},{"location":"zh/reference/ADVANCED_FEATURES_IMPLEMENTATION/#_13","title":"\u96c6\u6210","text":"<p>\u8fd9\u4e24\u4e2a\u65b0\u7279\u6027\u5df2\u5b8c\u5168\u96c6\u6210\u5230\u4e3b API \u4e2d\uff1a</p> <pre><code>from symphra_container import (\n    # \u6cdb\u578b\u652f\u6301\n    GenericKey,\n    register_generic,\n    resolve_generic,\n    is_generic_type,\n\n    # \u53ef\u89c6\u5316\u5de5\u5177\n    ContainerDiagnostic,\n    visualize_container,\n    print_dependency_graph,\n    debug_resolution,\n    diagnose_container,\n)\n</code></pre>"},{"location":"zh/reference/ADVANCED_FEATURES_IMPLEMENTATION/#_14","title":"\u4f7f\u7528\u573a\u666f","text":""},{"location":"zh/reference/ADVANCED_FEATURES_IMPLEMENTATION/#_15","title":"\u6cdb\u578b\u652f\u6301\u9002\u7528\u4e8e:","text":"<ul> <li>\u901a\u7528\u4ed3\u50a8\u6a21\u5f0f (Generic Repository Pattern)</li> <li>\u6570\u636e\u8bbf\u95ee\u5c42\u62bd\u8c61</li> <li>\u670d\u52a1\u9002\u914d\u5668\u6a21\u5f0f</li> <li>\u547d\u4ee4/\u67e5\u8be2\u5904\u7406\u5668</li> </ul>"},{"location":"zh/reference/ADVANCED_FEATURES_IMPLEMENTATION/#_16","title":"\u53ef\u89c6\u5316\u5de5\u5177\u9002\u7528\u4e8e:","text":"<ul> <li>\u5f00\u53d1\u9636\u6bb5\u4f9d\u8d56\u5173\u7cfb\u7406\u89e3</li> <li>\u751f\u4ea7\u73af\u5883\u5065\u5eb7\u76d1\u63a7</li> <li>CI/CD \u6d41\u7a0b\u9a8c\u8bc1</li> <li>\u6587\u6863\u81ea\u52a8\u751f\u6210</li> <li>\u95ee\u9898\u8bca\u65ad\u548c\u8c03\u8bd5</li> </ul>"},{"location":"zh/reference/ADVANCED_FEATURES_IMPLEMENTATION/#_17","title":"\u540e\u7eed\u4f18\u5316\u5efa\u8bae","text":""},{"location":"zh/reference/ADVANCED_FEATURES_IMPLEMENTATION/#_18","title":"\u6cdb\u578b\u652f\u6301","text":"<ol> <li>\u652f\u6301\u6cdb\u578b\u7ea6\u675f (Generic Constraints)</li> <li>\u652f\u6301\u534f\u53d8\u548c\u9006\u53d8 (Covariance &amp; Contravariance)</li> <li>\u66f4\u597d\u7684\u9519\u8bef\u6d88\u606f</li> </ol>"},{"location":"zh/reference/ADVANCED_FEATURES_IMPLEMENTATION/#_19","title":"\u53ef\u89c6\u5316\u5de5\u5177","text":"<ol> <li>\u4ea4\u4e92\u5f0f Web UI</li> <li>\u5b9e\u65f6\u76d1\u63a7\u4eea\u8868\u677f</li> <li>\u6027\u80fd\u5206\u6790\u96c6\u6210</li> <li>\u5bfc\u51fa\u4e3a\u56fe\u7247\u683c\u5f0f (PNG, SVG)</li> </ol>"},{"location":"zh/reference/ADVANCED_FEATURES_IMPLEMENTATION/#_20","title":"\u603b\u7ed3","text":"<p>\u2705 \u6cdb\u578b\u7c7b\u578b\u53c2\u6570\u533a\u5206 - \u5b8c\u6574\u5b9e\u73b0\uff0c13 \u4e2a\u6d4b\u8bd5\u901a\u8fc7\uff0c93.55% \u8986\u76d6\u7387 \u2705 \u53ef\u89c6\u5316\u548c\u8c03\u8bd5\u5de5\u5177 - \u5b8c\u6574\u5b9e\u73b0\uff0c16 \u4e2a\u6d4b\u8bd5\u901a\u8fc7\uff0c91.16% \u8986\u76d6\u7387 \u2705 \u5b8c\u6574\u6587\u6863 - API \u53c2\u8003 + \u4f7f\u7528\u793a\u4f8b + \u6f14\u793a\u4ee3\u7801 \u2705 \u751f\u4ea7\u5c31\u7eea - \u9ad8\u6d4b\u8bd5\u8986\u76d6\u7387\uff0c\u5b8c\u5584\u7684\u9519\u8bef\u5904\u7406  </p> <p>\u8fd9\u4e24\u4e2a\u9ad8\u7ea7\u7279\u6027\u5927\u5927\u589e\u5f3a\u4e86 <code>symphra-container</code> \u7684\u5f00\u53d1\u4f53\u9a8c\u548c\u53ef\u7ef4\u62a4\u6027\uff01\ud83d\ude80</p>"},{"location":"zh/reference/API_DESIGN/","title":"Symphra Container \u5b8c\u6574 API \u8bbe\u8ba1\u6587\u6863","text":""},{"location":"zh/reference/API_DESIGN/#1","title":"1. \u7c7b\u578b\u7cfb\u7edf\u8bbe\u8ba1","text":""},{"location":"zh/reference/API_DESIGN/#11","title":"1.1 \u6838\u5fc3\u7c7b\u578b\u5b9a\u4e49","text":"<pre><code># src/symphra_container/types.py\n\nfrom typing import TypeVar, Generic, Protocol, Union, Optional, Callable, Any, Dict, Type\nfrom typing_extensions import TypedDict, Literal, overload\nfrom enum import Enum\n\n# ============ \u57fa\u7840\u7c7b\u578b ============\n\nT = TypeVar(\"T\")\nT_co = TypeVar(\"T_co\", covariant=True)\nServiceKey = Union[Type[T], str]\n\nclass Lifetime(str, Enum):\n    \"\"\"\u670d\u52a1\u751f\u547d\u5468\u671f\u679a\u4e3e\"\"\"\n    SINGLETON = \"singleton\"      # \u5168\u5c40\u552f\u4e00\n    TRANSIENT = \"transient\"      # \u6bcf\u6b21\u521b\u5efa\u65b0\u5b9e\u4f8b\n    SCOPED = \"scoped\"            # \u4f5c\u7528\u57df\u5185\u5171\u4eab\n    FACTORY = \"factory\"          # \u5de5\u5382\u6a21\u5f0f\n\nclass ProviderType(str, Enum):\n    \"\"\"\u63d0\u4f9b\u8005\u7c7b\u578b\"\"\"\n    CLASS = \"class\"              # \u7c7b\u6784\u9020\u51fd\u6570\n    FACTORY = \"factory\"          # \u5de5\u5382\u51fd\u6570\n    INSTANCE = \"instance\"        # \u76f4\u63a5\u5b9e\u4f8b\n    VALUE = \"value\"              # \u914d\u7f6e\u503c\n\n# ============ \u670d\u52a1\u63cf\u8ff0\u7b26 ============\n\nclass ServiceDescriptor(Generic[T]):\n    \"\"\"\u670d\u52a1\u63cf\u8ff0\u7b26 - \u5b58\u50a8\u670d\u52a1\u7684\u5b8c\u6574\u6ce8\u518c\u4fe1\u606f\"\"\"\n    service_type: Type[T] | str\n    impl_type: Optional[Type[T]]\n    factory: Optional[Callable[..., T]]\n    instance: Optional[T]\n    lifetime: Lifetime\n    provider_type: ProviderType\n    is_singleton: bool\n    metadata: Dict[str, Any]\n\n# ============ \u9519\u8bef\u7c7b\u578b ============\n\nclass ServiceNotFoundError(Exception):\n    \"\"\"\u670d\u52a1\u672a\u627e\u5230\u5f02\u5e38\"\"\"\n    pass\n\nclass CircularDependencyError(Exception):\n    \"\"\"\u5faa\u73af\u4f9d\u8d56\u5f02\u5e38\"\"\"\n    pass\n\nclass InvalidServiceError(Exception):\n    \"\"\"\u65e0\u6548\u7684\u670d\u52a1\u5b9a\u4e49\"\"\"\n    pass\n\nclass RegistrationError(Exception):\n    \"\"\"\u6ce8\u518c\u9519\u8bef\"\"\"\n    pass\n\n# ============ \u534f\u8bae\u5b9a\u4e49 ============\n\nclass Provider(Protocol[T_co]):\n    \"\"\"\u670d\u52a1\u63d0\u4f9b\u8005\u534f\u8bae\"\"\"\n    def provide(self) -&gt; T_co: ...\n\nclass Resolver(Protocol):\n    \"\"\"\u4f9d\u8d56\u89e3\u6790\u5668\u534f\u8bae\"\"\"\n    def resolve(self, service_type: Type[T], container: \"Container\") -&gt; T: ...\n\nclass LifetimeManager(Protocol):\n    \"\"\"\u751f\u547d\u5468\u671f\u7ba1\u7406\u5668\u534f\u8bae\"\"\"\n    def get_instance(self, factory: Callable) -&gt; Any: ...\n    def dispose(self) -&gt; None: ...\n</code></pre>"},{"location":"zh/reference/API_DESIGN/#12","title":"1.2 \u5b57\u7b26\u4e32\u952e\u7c7b\u578b\u63d0\u793a\u65b9\u6848","text":"<pre><code># src/symphra_container/registry.py\n\nfrom typing_extensions import TypedDict, Literal, overload\n\nclass ServiceRegistry(TypedDict, total=False):\n    \"\"\"\n    \u670d\u52a1\u6ce8\u518c\u8868\u7c7b\u578b\u5b9a\u4e49 - \u7528\u4e8eIDE\u7c7b\u578b\u63d0\u793a\n\n    \u4f7f\u7528\u65b9\u5f0f:\n    registry: ServiceRegistry = {\n        \"database\": DatabaseImpl(),\n        \"cache\": CacheImpl(),\n        \"logger\": LoggerImpl(),\n    }\n\n    # IDE \u4f1a\u63a8\u65ad registry[\"database\"] \u7684\u7c7b\u578b\n    \"\"\"\n    # \u57fa\u7840\u670d\u52a1\n    database: Any\n    cache: Any\n    logger: Any\n    config: Any\n    # ... \u66f4\u591a\u670d\u52a1\u5b9a\u4e49\n\n    # \u8fd9\u6837\u5b9a\u4e49\u540e\uff0c\u4f7f\u7528\u5b57\u7b26\u4e32\u952e\u65f6 IDE \u80fd\u63d0\u4f9b\u81ea\u52a8\u8865\u5168\n\n# ============ \u66f4\u4f18\u96c5\u7684\u65b9\u6848\uff1a\u4f7f\u7528 Literal + overload ============\n\n@overload\ndef get(self, key: Literal[\"database\"]) -&gt; Database: ...\n\n@overload\ndef get(self, key: Literal[\"cache\"]) -&gt; Cache: ...\n\n@overload\ndef get(self, key: Literal[\"logger\"]) -&gt; Logger: ...\n\n@overload\ndef get(self, key: str, service_type: Type[T]) -&gt; T: ...\n\ndef get(self, key: str, service_type: Type[T] | None = None) -&gt; T:\n    \"\"\"\u83b7\u53d6\u670d\u52a1\"\"\"\n    ...\n\n# \u4f7f\u7528\u793a\u4f8b\ndb = container.get(\"database\")  # IDE \u63a8\u65ad\u4e3a Database \u7c7b\u578b\ncache = container.get(\"cache\")  # IDE \u63a8\u65ad\u4e3a Cache \u7c7b\u578b\nlogger = container.get(\"logger\")  # IDE \u63a8\u65ad\u4e3a Logger \u7c7b\u578b\n\n# \u672a\u77e5\u670d\u52a1\u65f6\u9700\u6307\u5b9a\u7c7b\u578b\nservice = container.get(\"custom_service\", CustomService)\n</code></pre>"},{"location":"zh/reference/API_DESIGN/#2-api","title":"2. \u5b8c\u6574 API \u8bbe\u8ba1","text":""},{"location":"zh/reference/API_DESIGN/#21","title":"2.1 \u5bb9\u5668\u521d\u59cb\u5316","text":"<pre><code>from symphra_container import Container, Lifetime, inject\n\n# ============ \u521d\u59cb\u5316\u5bb9\u5668 ============\n\n# \u65b9\u5f0f 1: \u521b\u5efa\u65b0\u5bb9\u5668\ncontainer = Container()\n\n# \u65b9\u5f0f 2: \u521b\u5efa\u5b50\u5bb9\u5668\uff08\u7ee7\u627f\u7236\u5bb9\u5668\u914d\u7f6e\uff09\nchild_container = container.create_child()\n\n# \u65b9\u5f0f 3: \u521b\u5efa\u5e26\u540d\u79f0\u7684\u5bb9\u5668\uff08\u4fbf\u4e8e\u8c03\u8bd5\uff09\ncontainer = Container(name=\"MyApp\")\n\n# \u65b9\u5f0f 4: \u4ece\u914d\u7f6e\u6587\u4ef6\u521b\u5efa\ncontainer = Container.from_config(\"config.yaml\")\n</code></pre>"},{"location":"zh/reference/API_DESIGN/#22","title":"2.2 \u6ce8\u518c\u670d\u52a1","text":""},{"location":"zh/reference/API_DESIGN/#221","title":"2.2.1 \u57fa\u7840\u6ce8\u518c\uff08\u7c7b\u578b\u952e\uff09","text":"<pre><code># ============ \u7c7b\u578b\u952e\u6ce8\u518c ============\n\n# \u6ce8\u518c 1: \u81ea\u52a8\u88c5\u914d\uff08\u4f7f\u7528\u5b9e\u73b0\u7c7b\u672c\u8eab\uff09\ncontainer.register(UserService)\n# \u7b49\u4ef7\u4e8e: container.register(UserService, UserService)\n\n# \u6ce8\u518c 2: \u6307\u5b9a\u5b9e\u73b0\u7c7b\nclass IUserService(Protocol):\n    def get_user(self, id: int) -&gt; User: ...\n\ncontainer.register(IUserService, UserService)\n\n# \u6ce8\u518c 3: \u6307\u5b9a\u751f\u547d\u5468\u671f\uff08\u9ed8\u8ba4 SINGLETON\uff09\ncontainer.register(\n    UserService,\n    lifetime=Lifetime.TRANSIENT\n)\n\n# \u6ce8\u518c 4: \u5e26\u8986\u76d6\u53c2\u6570\ncontainer.register(\n    IUserService,\n    UserServiceV1,\n    lifetime=Lifetime.SINGLETON,\n    override=False  # \u9ed8\u8ba4 False\uff0c\u5ffd\u7565\u91cd\u590d\u6ce8\u518c\n)\n\n# \u66f4\u65b0\u4e3a V2\uff08\u4f7f\u7528 override=True\uff09\ncontainer.register(\n    IUserService,\n    UserServiceV2,\n    override=True  # \u8986\u76d6\u4e4b\u524d\u7684\u6ce8\u518c\n)\n\n# ============ \u7c7b\u578b\u952e\u83b7\u53d6 ============\n\n# \u83b7\u53d6 1: \u57fa\u7840\u89e3\u6790\nuser_service = container.resolve(UserService)  # \u8fd4\u56de UserService \u5b9e\u4f8b\n\n# \u83b7\u53d6 2: \u89e3\u6790\u63a5\u53e3\uff08\u81ea\u52a8\u63a8\u65ad\u4e3a\u5b9e\u73b0\u7c7b\uff09\nservice = container.resolve(IUserService)  # \u8fd4\u56de UserService \u5b9e\u4f8b\n\n# \u83b7\u53d6 3: \u5c1d\u8bd5\u89e3\u6790\uff08\u8fd4\u56de Optional\uff09\nservice = container.try_resolve(NonExistentService)  # \u8fd4\u56de None\n</code></pre>"},{"location":"zh/reference/API_DESIGN/#222","title":"2.2.2 \u5b57\u7b26\u4e32\u952e\u6ce8\u518c","text":"<pre><code># ============ \u5b57\u7b26\u4e32\u952e\u6ce8\u518c ============\n\n# \u6ce8\u518c 1: \u7c7b\u5b9e\u73b0\ncontainer.register(\n    \"user_service\",\n    UserService,\n    lifetime=Lifetime.SINGLETON\n)\n\n# \u6ce8\u518c 2: \u5de5\u5382\u51fd\u6570\ndef create_database():\n    return Database(\n        host=\"localhost\",\n        port=5432\n    )\n\ncontainer.register_factory(\n    \"database\",\n    create_database,\n    lifetime=Lifetime.SINGLETON\n)\n\n# \u6ce8\u518c 3: \u76f4\u63a5\u5b9e\u4f8b\nconfig = Config.from_file(\"config.yaml\")\ncontainer.register_instance(\"config\", config)\n\n# \u6ce8\u518c 4: \u914d\u7f6e\u503c\ncontainer.register_value(\"api_key\", \"sk_live_xxxxx\")\ncontainer.register_value(\"max_connections\", 100)\ncontainer.register_value(\"debug_mode\", True)\n\n# ============ \u5b57\u7b26\u4e32\u952e\u83b7\u53d6 ============\n\n# \u83b7\u53d6 1: \u57fa\u7840\u83b7\u53d6\uff08\u9700\u8981\u7c7b\u578b\u6ce8\u89e3\u8f85\u52a9\uff09\ndb: Database = container.get(\"database\")  # IDE \u63a8\u65ad\u4e3a Database\n\n# \u83b7\u53d6 2: \u663e\u5f0f\u6307\u5b9a\u7c7b\u578b\ndb = container.get(\"database\", Database)\n\n# \u83b7\u53d6 3: \u83b7\u53d6\u914d\u7f6e\u503c\napi_key = container.get(\"api_key\")  # \u8fd4\u56de str\nmax_conn = container.get(\"max_connections\")  # \u8fd4\u56de int\n\n# \u83b7\u53d6 4: \u5c1d\u8bd5\u83b7\u53d6\ndb = container.try_get(\"optional_service\")  # \u8fd4\u56de None if not found\n</code></pre>"},{"location":"zh/reference/API_DESIGN/#223","title":"2.2.3 \u5de5\u5382\u51fd\u6570\u6ce8\u518c","text":"<pre><code># ============ \u5de5\u5382\u51fd\u6570\uff08\u540c\u6b65\uff09 ============\n\n# \u65b9\u5f0f 1: \u7b80\u5355\u5de5\u5382\ndef create_logger():\n    return Logger(\"myapp.log\")\n\ncontainer.register_factory(\n    \"logger\",\n    create_logger,\n    lifetime=Lifetime.SINGLETON\n)\n\n# \u65b9\u5f0f 2: \u5de5\u5382\u4f9d\u8d56\u5bb9\u5668\ndef create_db_connection(container: Container):\n    config = container.resolve(Config)\n    return Database(**config.database)\n\ncontainer.register_factory(\n    \"db_conn\",\n    create_db_connection,\n    lifetime=Lifetime.SINGLETON\n)\n\n# \u65b9\u5f0f 3: \u5de5\u5382\u4f9d\u8d56\u5176\u4ed6\u670d\u52a1\ndef create_user_service(db: Database, logger: Logger):\n    return UserService(db, logger)\n\n# \u5bb9\u5668\u4f1a\u81ea\u52a8\u89e3\u6790 db \u548c logger \u53c2\u6570\ncontainer.register_factory(\n    \"user_service\",\n    create_user_service,\n    lifetime=Lifetime.TRANSIENT\n)\n\n# ============ \u5de5\u5382\u51fd\u6570\uff08\u5f02\u6b65\uff09 ============\n\nasync def create_async_db():\n    return await Database.connect(\"postgresql://...\")\n\ncontainer.register_async_factory(\n    \"async_db\",\n    create_async_db,\n    lifetime=Lifetime.SINGLETON\n)\n\n# \u5f02\u6b65\u89e3\u6790\ndb = await container.resolve_async(\"async_db\")\n</code></pre>"},{"location":"zh/reference/API_DESIGN/#224","title":"2.2.4 \u9ad8\u7ea7\u6ce8\u518c\u6a21\u5f0f","text":"<pre><code># ============ \u6761\u4ef6\u6ce8\u518c ============\n\n# \u6839\u636e\u914d\u7f6e\u6761\u4ef6\u6ce8\u518c\nif config.use_postgres:\n    container.register(IDatabase, PostgresDatabase)\nelse:\n    container.register(IDatabase, SQLiteDatabase)\n\n# ============ \u6279\u91cf\u6ce8\u518c ============\n\n# \u540c\u65f6\u6ce8\u518c\u591a\u4e2a\u5b9e\u73b0\u4e3a\u540c\u4e00\u63a5\u53e3\nimplementations = [\n    UserServiceImpl,\n    OrderServiceImpl,\n    PaymentServiceImpl,\n]\n\nfor impl in implementations:\n    # \u4f7f\u7528\u6a21\u5757\u540d + \u7c7b\u540d\u4f5c\u4e3a key\n    key = f\"{impl.__module__}.{impl.__name__}\"\n    container.register(key, impl)\n\n# ============ \u88c5\u9970\u5668\u6ce8\u518c\uff08\u81ea\u52a8\u626b\u63cf\uff09============\n\n@injectable(lifetime=Lifetime.SINGLETON)\nclass UserRepository:\n    pass\n\n@injectable.transient\nclass OrderService:\n    pass\n\n@injectable.factory\ndef create_cache():\n    return Redis()\n\n# \u81ea\u52a8\u6ce8\u518c\u6240\u6709\u6807\u8bb0\u7684\u7c7b\ncontainer.scan(\"myapp.services\")\n\n# ============ \u6a21\u5757\u5316\u6ce8\u518c ============\n\nclass DatabaseModule(ContainerModule):\n    def configure(self, container: Container):\n        container.register(\"db\", DatabaseImpl)\n        container.register(\"connection_pool\", ConnectionPool)\n\ncontainer.register_module(DatabaseModule())\n</code></pre>"},{"location":"zh/reference/API_DESIGN/#23","title":"2.3 \u83b7\u53d6\u670d\u52a1","text":"<pre><code># ============ \u7c7b\u578b\u952e\u83b7\u53d6 ============\n\n# \u57fa\u7840\u89e3\u6790 - \u63a8\u8350\u7528\u4e8e\u6709\u7c7b\u578b\u7684\u60c5\u51b5\nservice: UserService = container.resolve(UserService)\n\n# \u89e3\u6790\u63a5\u53e3\nservice: IUserService = container.resolve(IUserService)\n\n# \u5c1d\u8bd5\u89e3\u6790 - \u8fd4\u56de Optional\nservice = container.try_resolve(UserService)  # Optional[UserService]\n\n# ============ \u5b57\u7b26\u4e32\u952e\u83b7\u53d6 ============\n\n# \u65b9\u5f0f 1: \u5e26\u7c7b\u578b\u6ce8\u89e3\uff08\u63a8\u8350\uff09\ndb: Database = container.get(\"database\")\n\n# \u65b9\u5f0f 2: \u663e\u5f0f\u6307\u5b9a\u7c7b\u578b\ndb = container.get(\"database\", Database)\n\n# \u65b9\u5f0f 3: \u5c1d\u8bd5\u83b7\u53d6\ndb = container.try_get(\"database\")  # Optional[Database]\n\n# \u65b9\u5f0f 4: \u83b7\u53d6\u6240\u6709\u6ce8\u518c\u7684\u67d0\u7c7b\u578b\u670d\u52a1\nloggers = container.get_all(Logger)  # List[Logger]\nloggers = container.get_all(\"logger*\")  # \u4f7f\u7528 glob \u6a21\u5f0f\u5339\u914d\n\n# ============ \u83b7\u53d6\u670d\u52a1\u4fe1\u606f ============\n\n# \u68c0\u67e5\u670d\u52a1\u662f\u5426\u5df2\u6ce8\u518c\nexists = container.has(\"database\")  # bool\nexists = container.has(UserService)  # bool\n\n# \u83b7\u53d6\u670d\u52a1\u5143\u6570\u636e\ndescriptor = container.get_descriptor(UserService)\nprint(descriptor.lifetime)  # Lifetime.SINGLETON\nprint(descriptor.lifetime_manager)  # SingletonManager instance\n\n# ============ \u5f02\u6b65\u83b7\u53d6 ============\n\n# \u5f02\u6b65\u89e3\u6790\u670d\u52a1\ndb = await container.resolve_async(Database)\n\n# \u5f02\u6b65\u83b7\u53d6\u5b57\u7b26\u4e32\u952e\nservice = await container.get_async(\"async_service\")\n</code></pre>"},{"location":"zh/reference/API_DESIGN/#24","title":"2.4 \u5220\u9664\u548c\u8986\u76d6","text":"<pre><code># ============ \u5220\u9664\u670d\u52a1 ============\n\n# \u5220\u9664 1: \u6309\u7c7b\u578b\u5220\u9664\ncontainer.unregister(UserService)\n\n# \u5220\u9664 2: \u6309\u5b57\u7b26\u4e32\u952e\u5220\u9664\ncontainer.unregister(\"database\")\n\n# \u5220\u9664 3: \u5220\u9664\u6240\u6709\u5b9e\u73b0\u67d0\u63a5\u53e3\u7684\u670d\u52a1\ncontainer.unregister(IUserService, all=True)\n\n# \u5220\u9664 4: \u5b89\u5168\u5220\u9664\uff08\u4e0d\u5b58\u5728\u4e5f\u4e0d\u62a5\u9519\uff09\ncontainer.try_unregister(\"optional_service\")\n\n# ============ \u6e05\u7a7a\u5bb9\u5668 ============\n\n# \u6e05\u7a7a\u6240\u6709\u670d\u52a1\uff08\u8c28\u614e\u4f7f\u7528\uff09\ncontainer.clear()\n\n# \u6e05\u7a7a\u7279\u5b9a\u751f\u547d\u5468\u671f\u7684\u670d\u52a1\ncontainer.clear(lifetime=Lifetime.TRANSIENT)\n\n# ============ \u8986\u76d6\u670d\u52a1 ============\n\n# \u65b9\u5f0f 1: \u4f7f\u7528 override \u53c2\u6570\uff08\u6ce8\u518c\u65f6\uff09\ncontainer.register(UserService, NewUserService, override=True)\n\n# \u65b9\u5f0f 2: \u5148\u5220\u9664\u540e\u6ce8\u518c\ncontainer.unregister(UserService)\ncontainer.register(UserService, NewUserService)\n\n# \u65b9\u5f0f 3: \u76f4\u63a5\u66ff\u6362\uff08\u65b0\u589e\u65b9\u6cd5\uff09\ncontainer.replace(UserService, NewUserService)\n</code></pre>"},{"location":"zh/reference/API_DESIGN/#25","title":"2.5 \u4f5c\u7528\u57df\u7ba1\u7406","text":"<pre><code># ============ \u521b\u5efa\u4f5c\u7528\u57df ============\n\n# \u65b9\u5f0f 1: Context Manager\uff08\u63a8\u8350\uff09\nwith container.create_scope() as scope:\n    service = scope.resolve(UserService)\n    # \u5728\u4f5c\u7528\u57df\u5185\uff0cScoped \u751f\u547d\u5468\u671f\u7684\u670d\u52a1\u5171\u4eab\u5b9e\u4f8b\n    # \u4f5c\u7528\u57df\u7ed3\u675f\u65f6\u81ea\u52a8\u6e05\u7406\u8d44\u6e90\n\n# \u65b9\u5f0f 2: \u624b\u52a8\u7ba1\u7406\nscope = container.create_scope()\ntry:\n    service = scope.resolve(UserService)\nfinally:\n    scope.dispose()\n\n# ============ \u5f02\u6b65\u4f5c\u7528\u57df ============\n\nasync with container.create_async_scope() as scope:\n    service = await scope.resolve_async(UserService)\n\n# ============ \u4f5c\u7528\u57df\u7279\u6027 ============\n\n# \u7ee7\u627f\u7236\u5bb9\u5668\u7684 Singleton \u548c Transient\n# \u4e3a Scoped \u751f\u547d\u5468\u671f\u7684\u670d\u52a1\u63d0\u4f9b\u9694\u79bb\u73af\u5883\n\nwith container.create_scope() as scope1:\n    user_service1 = scope1.resolve(UserService)  # Scoped\n\nwith container.create_scope() as scope2:\n    user_service2 = scope2.resolve(UserService)  # \u4e0d\u540c\u5b9e\u4f8b\n\n# Singleton \u5728\u5168\u5c40\u5171\u4eab\ndb = container.resolve(Database)  # \u5168\u5c40\u5355\u4f8b\n</code></pre>"},{"location":"zh/reference/API_DESIGN/#26","title":"2.6 \u4f9d\u8d56\u6ce8\u5165\uff08\u6784\u9020\u51fd\u6570\uff09","text":"<pre><code># ============ \u81ea\u52a8\u88c5\u914d\uff08\u6784\u9020\u51fd\u6570\uff09 ============\n\nclass UserRepository:\n    def __init__(self, db: Database):  # \u7c7b\u578b\u6ce8\u89e3\n        self.db = db\n\nclass UserService:\n    def __init__(self, repo: UserRepository, logger: Logger):\n        self.repo = repo\n        self.logger = logger\n\n# \u6ce8\u518c\ncontainer.register(Database, PostgresDatabase)\ncontainer.register(UserRepository)\ncontainer.register(UserService)\n\n# \u81ea\u52a8\u89e3\u6790\u5b8c\u6574\u4f9d\u8d56\u94fe\nservice = container.resolve(UserService)\n# \u5bb9\u5668\u81ea\u52a8\u89e3\u6790\uff1aUserService -&gt; UserRepository -&gt; Database\n\n# ============ \u53ef\u9009\u4f9d\u8d56\uff08\u6709\u9ed8\u8ba4\u503c\uff09 ============\n\nclass ConfigService:\n    def __init__(\n        self,\n        db: Database,  # \u5fc5\u987b\u4ece\u5bb9\u5668\u89e3\u6790\n        timeout: int = 30,  # \u4f18\u5148\u5bb9\u5668\u89e3\u6790\uff0c\u65e0\u5219\u7528\u9ed8\u8ba4\u503c\n        max_retries: int = 3\n    ):\n        self.db = db\n        self.timeout = timeout\n        self.max_retries = max_retries\n\n# \u4f7f\u7528\u65b9\u5f0f\ncontainer.register(Database, PostgresDatabase)\ncontainer.register(\"timeout\", 60)  # \u53ef\u9009\uff1a\u8986\u76d6\u9ed8\u8ba4\u503c\n\nservice = container.resolve(ConfigService)\n# service.db -&gt; Database \u5b9e\u4f8b\n# service.timeout -&gt; 60\uff08\u6765\u81ea\u5bb9\u5668\uff09\u6216 30\uff08\u9ed8\u8ba4\u503c\uff09\n# service.max_retries -&gt; 3\uff08\u9ed8\u8ba4\u503c\uff0c\u5bb9\u5668\u65e0\u6b64\u6ce8\u518c\uff09\n\n# ============ \u5faa\u73af\u4f9d\u8d56\u5904\u7406 ============\n\nclass UserService:\n    def __init__(self, order_service: \"OrderService\"):  # \u524d\u5411\u5f15\u7528\n        self.order_service = order_service\n\nclass OrderService:\n    def __init__(self, user_service: UserService):  # \u5faa\u73af\u4f9d\u8d56\uff01\n        self.user_service = user_service\n\n# \u65b9\u5f0f 1: \u4f7f\u7528 Lazy \u5305\u88c5\uff08\u63a8\u8350\uff09\nfrom symphra_container import Lazy\n\nclass UserService:\n    def __init__(self, order_service: Lazy[OrderService]):  # \u5ef6\u8fdf\u6ce8\u5165\n        self.order_service = order_service  # \u9996\u6b21\u8bbf\u95ee\u65f6\u624d\u89e3\u6790\n\nclass OrderService:\n    def __init__(self, user_service: UserService):\n        self.user_service = user_service\n\ncontainer.register(UserService)\ncontainer.register(OrderService)\nservice = container.resolve(UserService)  # \u6210\u529f\uff01\n\n# \u65b9\u5f0f 2: \u5c5e\u6027\u6ce8\u5165\nclass UserService:\n    def __init__(self):\n        self.order_service: Optional[OrderService] = None\n\n    def set_order_service(self, os: OrderService):\n        self.order_service = os\n\ncontainer.register(UserService)\ncontainer.register(OrderService)\ncontainer.register_initializer(UserService, lambda us, os: us.set_order_service(os), [OrderService])\n</code></pre>"},{"location":"zh/reference/API_DESIGN/#27","title":"2.7 \u88c5\u9970\u5668\u4f7f\u7528","text":"<pre><code>from symphra_container import inject, injectable, Injected, Lazy\n\n# ============ \u7c7b\u88c5\u9970\u5668 ============\n\n@injectable\nclass UserService:\n    \"\"\"\u9ed8\u8ba4 Lifetime.SINGLETON\"\"\"\n    pass\n\n@injectable(lifetime=Lifetime.TRANSIENT)\nclass RequestHandler:\n    pass\n\n@injectable.singleton\nclass Cache:\n    pass\n\n@injectable.transient\nclass Logger:\n    pass\n\n@injectable.scoped\nclass UnitOfWork:\n    pass\n\n@injectable.factory\ndef create_config():\n    return Config.load()\n\n# \u81ea\u52a8\u6ce8\u518c\u5230\u9ed8\u8ba4\u5bb9\u5668\n# container.scan(\"myapp.services\")\n\n# ============ \u65b9\u6cd5/\u51fd\u6570\u88c5\u9970\u5668 ============\n\n# \u65b9\u5f0f 1: \u53c2\u6570\u6807\u8bb0\n@inject\ndef process_order(\n    order: Order,\n    payment_service: PaymentService = Injected,  # \u4ece\u5bb9\u5668\u6ce8\u5165\n    notification: NotificationService = Injected\n):\n    return payment_service.process(order)\n\n# \u8c03\u7528\u65f6\norder = Order(id=1)\nresult = process_order(order)  # \u81ea\u52a8\u6ce8\u5165\u5176\u4ed6\u53c2\u6570\n\n# \u65b9\u5f0f 2: \u663e\u5f0f\u53c2\u6570\u540d\n@inject({\"payment_service\": PaymentService})\ndef process_order(order, payment_service):\n    return payment_service.process(order)\n\n# \u65b9\u5f0f 3: \u4f7f\u7528\u5bb9\u5668\u5b9e\u4f8b\n@inject(container=my_container)\ndef setup_database(db: Database = Injected):\n    db.init()\n\n# ============ \u5c5e\u6027\u6ce8\u5165 ============\n\nfrom typing import ClassVar\n\nclass UserService:\n    container: ClassVar[Container]\n\n    db: Database = inject()  # \u4f7f\u7528\u63cf\u8ff0\u7b26\u6ce8\u5165\n    cache: Cache = inject(\"cache_service\")  # \u6ce8\u5165\u6307\u5b9a\u540d\u79f0\u670d\u52a1\n\n    def __init__(self):\n        pass  # db \u548c cache \u4f1a\u81ea\u52a8\u6ce8\u5165\n\n# \u9700\u8981\u914d\u7f6e\u5bb9\u5668\nUserService.container = container\n</code></pre>"},{"location":"zh/reference/API_DESIGN/#28-fastapi","title":"2.8 FastAPI \u96c6\u6210","text":"<pre><code>from symphra_container.integrations.fastapi import DIMiddleware, inject_dependencies\n\n# ============ \u4e2d\u95f4\u4ef6\u65b9\u5f0f ============\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\ncontainer = Container()\n\n# \u6ce8\u518c\u670d\u52a1\ncontainer.register(UserService)\ncontainer.register(Database)\n\n# \u6dfb\u52a0 DI \u4e2d\u95f4\u4ef6\napp.add_middleware(DIMiddleware, container=container)\n\n# \u8def\u7531\u81ea\u52a8\u6ce8\u5165\n@app.get(\"/users/{user_id}\")\ndef get_user(\n    user_id: int,\n    user_service: UserService = Injected  # \u81ea\u52a8\u4ece\u5bb9\u5668\u6ce8\u5165\n):\n    return user_service.get_user(user_id)\n\n# ============ \u88c5\u9970\u5668\u65b9\u5f0f ============\n\n@app.get(\"/orders/{order_id}\")\n@inject_dependencies(container)\ndef get_order(\n    order_id: int,\n    order_service: OrderService = Injected,\n    logger: Logger = Injected\n):\n    logger.info(f\"Getting order {order_id}\")\n    return order_service.get_order(order_id)\n\n# ============ \u5f02\u6b65\u652f\u6301 ============\n\n@app.get(\"/async-users/{user_id}\")\nasync def get_async_user(\n    user_id: int,\n    user_service: UserService = Injected\n):\n    return await user_service.get_user_async(user_id)\n\n# ============ \u8bf7\u6c42\u4f5c\u7528\u57df ============\n\nclass RequestService:\n    \"\"\"\u6bcf\u4e2a\u8bf7\u6c42\u521b\u5efa\u4e00\u4e2a\u5b9e\u4f8b\"\"\"\n    def __init__(self):\n        self.id = uuid4()\n\ncontainer.register(\n    RequestService,\n    lifetime=Lifetime.SCOPED\n)\n\n@app.get(\"/request-info\")\ndef get_request_info(service: RequestService = Injected):\n    return {\"request_id\": str(service.id)}\n\n# \u6bcf\u4e2a\u8bf7\u6c42\u7684 service.id \u90fd\u4e0d\u540c\n</code></pre>"},{"location":"zh/reference/API_DESIGN/#29-flask","title":"2.9 Flask \u96c6\u6210","text":"<pre><code>from symphra_container.integrations.flask import FlaskContainer\n\n# ============ Flask \u6269\u5c55\u65b9\u5f0f ============\n\nfrom flask import Flask\n\napp = Flask(__name__)\ncontainer = FlaskContainer(app)\n\n# \u6ce8\u518c\u670d\u52a1\ncontainer.register(UserService)\ncontainer.register(Database)\n\n@app.route(\"/users/&lt;user_id&gt;\")\n@container.inject\ndef get_user(user_id, user_service: UserService = Injected):\n    return user_service.get_user(user_id)\n\n# ============ \u5e94\u7528\u4e0a\u4e0b\u6587\u96c6\u6210 ============\n\n# \u81ea\u52a8\u521b\u5efa\u8bf7\u6c42\u4f5c\u7528\u57df\nwith app.app_context():\n    service = container.resolve(RequestService)  # Scoped \u5b9e\u4f8b\n\nwith app.test_request_context():\n    service = container.resolve(RequestService)  # \u65b0\u7684 Scoped \u5b9e\u4f8b\n</code></pre>"},{"location":"zh/reference/API_DESIGN/#3","title":"3. \u5b8c\u6574\u4f7f\u7528\u793a\u4f8b","text":""},{"location":"zh/reference/API_DESIGN/#31","title":"3.1 \u7b80\u5355\u5e94\u7528","text":"<pre><code>from symphra_container import Container, Lifetime\n\n# \u521d\u59cb\u5316\u5bb9\u5668\ncontainer = Container()\n\n# \u5b9a\u4e49\u670d\u52a1\nclass Database:\n    def __init__(self):\n        print(\"Database initialized\")\n\nclass UserRepository:\n    def __init__(self, db: Database):\n        self.db = db\n\nclass UserService:\n    def __init__(self, repo: UserRepository):\n        self.repo = repo\n\n    def get_user(self, id: int):\n        return f\"User {id}\"\n\n# \u6ce8\u518c\u670d\u52a1\ncontainer.register(Database, lifetime=Lifetime.SINGLETON)\ncontainer.register(UserRepository)\ncontainer.register(UserService)\n\n# \u4f7f\u7528\nservice = container.resolve(UserService)\nuser = service.get_user(1)\nprint(user)  # User 1\n</code></pre>"},{"location":"zh/reference/API_DESIGN/#32","title":"3.2 \u590d\u6742\u5e94\u7528","text":"<pre><code>from symphra_container import Container, Lifetime, inject, injectable\n\n# \u88c5\u9970\u5668\u6ce8\u518c\n@injectable.singleton\nclass Config:\n    def __init__(self):\n        self.debug = True\n        self.db_url = \"postgresql://...\"\n\n@injectable.singleton\nclass Database:\n    def __init__(self, config: Config):\n        self.config = config\n\n@injectable\nclass Cache:\n    pass\n\n@injectable.transient\nclass RequestContext:\n    def __init__(self, cache: Cache):\n        self.cache = cache\n\n@injectable.factory\ndef create_logger(config: Config):\n    import logging\n    return logging.getLogger(\"app\")\n\n# \u5bb9\u5668\u914d\u7f6e\ncontainer = Container()\ncontainer.scan(\"myapp\")  # \u81ea\u52a8\u626b\u63cf\u5e76\u6ce8\u518c\n\n# \u4f7f\u7528\nwith container.create_scope() as scope:\n    db = scope.resolve(Database)\n    ctx = scope.resolve(RequestContext)\n    logger = scope.resolve(Logger)\n\n    # \u5728\u4f5c\u7528\u57df\u5185\u5de5\u4f5c\n    ...\n</code></pre>"},{"location":"zh/reference/API_DESIGN/#33","title":"3.3 \u5b57\u7b26\u4e32\u952e\u6df7\u5408\u4f7f\u7528","text":"<pre><code>from symphra_container import Container\n\ncontainer = Container()\n\n# \u7c7b\u578b\u952e\u6ce8\u518c\ncontainer.register(UserService)\ncontainer.register(Database)\n\n# \u5b57\u7b26\u4e32\u952e\u6ce8\u518c\ncontainer.register(\"api_key\", \"sk_live_xxxxx\")\ncontainer.register(\"max_connections\", 100)\ncontainer.register_instance(\"config\", load_config())\n\n# \u7c7b\u578b\u952e\u89e3\u6790\nuser_service = container.resolve(UserService)\n\n# \u5b57\u7b26\u4e32\u952e\u89e3\u6790\napi_key: str = container.get(\"api_key\")\nmax_conn: int = container.get(\"max_connections\")\nconfig: Config = container.get(\"config\")\n\n# \u6df7\u5408\u4f7f\u7528\nclass PaymentService:\n    def __init__(self, api_key: str):\n        self.api_key = api_key\n\ndef create_payment_service(container: Container):\n    api_key = container.get(\"api_key\")\n    return PaymentService(api_key)\n\ncontainer.register_factory(PaymentService, create_payment_service)\n</code></pre>"},{"location":"zh/reference/API_DESIGN/#4","title":"4. \u7c7b\u578b\u63d0\u793a\u5b8c\u6574\u5bf9\u5e94\u8868","text":"\u6ce8\u518c\u65b9\u5f0f \u83b7\u53d6\u65b9\u5f0f \u7c7b\u578b\u63d0\u793a IDE \u81ea\u52a8\u8865\u5168 <code>register(UserService)</code> <code>resolve(UserService)</code> \u2705 \u5b8c\u7f8e \u2705 \u5b8c\u7f8e <code>register(IService, Impl)</code> <code>resolve(IService)</code> \u2705 \u5b8c\u7f8e \u2705 \u5b8c\u7f8e <code>register(\"db\", Database)</code> <code>get(\"db\", Database)</code> \u2705 \u5b8c\u7f8e \u2705 \u53ef\u4ee5 <code>register(\"db\", Database)</code> <code>db: Database = get(\"db\")</code> \u2705 \u5b8c\u7f8e \u2705 \u53ef\u4ee5 <code>register_factory(\"logger\", fn)</code> <code>get(\"logger\", Logger)</code> \u2705 \u5b8c\u7f8e \u2705 \u53ef\u4ee5 <code>@injectable class Service</code> <code>resolve(Service)</code> \u2705 \u5b8c\u7f8e \u2705 \u5b8c\u7f8e <code>@inject decorator</code> \u81ea\u52a8\u6ce8\u5165\u53c2\u6570 \u2705 \u5b8c\u7f8e \u2705 \u5b8c\u7f8e"},{"location":"zh/reference/API_DESIGN/#5","title":"5. \u9519\u8bef\u5904\u7406","text":"<pre><code>from symphra_container import (\n    Container,\n    ServiceNotFoundError,\n    CircularDependencyError,\n    InvalidServiceError,\n    RegistrationError\n)\n\ntry:\n    # \u670d\u52a1\u672a\u6ce8\u518c\n    service = container.resolve(NonExistentService)\nexcept ServiceNotFoundError as e:\n    print(f\"Error: {e}\")  # Service NonExistentService not found\n\ntry:\n    # \u5faa\u73af\u4f9d\u8d56\n    service = container.resolve(CircularServiceA)\nexcept CircularDependencyError as e:\n    print(f\"Error: {e}\")  # Circular dependency detected: A -&gt; B -&gt; A\n\ntry:\n    # \u65e0\u6548\u6ce8\u518c\n    container.register(None, \"invalid\")\nexcept InvalidServiceError as e:\n    print(f\"Error: {e}\")\n\ntry:\n    # \u91cd\u590d\u6ce8\u518c\uff08override=False\uff09\n    container.register(Service, impl1)\n    container.register(Service, impl2)  # override=False (default)\nexcept RegistrationError as e:\n    print(f\"Error: {e}\")  # Service already registered, use override=True\n</code></pre>"},{"location":"zh/reference/API_DESIGN/#6-api","title":"6. API \u603b\u7ed3\u901f\u67e5\u8868","text":""},{"location":"zh/reference/API_DESIGN/#_1","title":"\u6ce8\u518c\u76f8\u5173","text":"<ul> <li><code>register(service_type, impl=None, lifetime=SINGLETON, override=False)</code> - \u57fa\u7840\u6ce8\u518c</li> <li><code>register_factory(name, factory, lifetime=SINGLETON)</code> - \u5de5\u5382\u6ce8\u518c</li> <li><code>register_instance(name, instance)</code> - \u5b9e\u4f8b\u6ce8\u518c</li> <li><code>register_value(name, value)</code> - \u503c\u6ce8\u518c</li> <li><code>register_async_factory(name, async_factory)</code> - \u5f02\u6b65\u5de5\u5382</li> <li><code>register_module(module)</code> - \u6a21\u5757\u6ce8\u518c</li> <li><code>scan(package)</code> - \u81ea\u52a8\u626b\u63cf\u6ce8\u518c</li> </ul>"},{"location":"zh/reference/API_DESIGN/#_2","title":"\u83b7\u53d6\u76f8\u5173","text":"<ul> <li><code>resolve(service_type)</code> - \u89e3\u6790\u7c7b\u578b</li> <li><code>resolve_async(service_type)</code> - \u5f02\u6b65\u89e3\u6790</li> <li><code>get(key, service_type=None)</code> - \u83b7\u53d6\uff08\u652f\u6301\u5b57\u7b26\u4e32\u548c\u7c7b\u578b\u952e\uff09</li> <li><code>get_async(key)</code> - \u5f02\u6b65\u83b7\u53d6</li> <li><code>try_resolve(service_type)</code> - \u5c1d\u8bd5\u89e3\u6790\uff0c\u8fd4\u56de Optional</li> <li><code>try_get(key)</code> - \u5c1d\u8bd5\u83b7\u53d6</li> <li><code>get_all(service_type or pattern)</code> - \u83b7\u53d6\u6240\u6709</li> </ul>"},{"location":"zh/reference/API_DESIGN/#_3","title":"\u68c0\u67e5\u76f8\u5173","text":"<ul> <li><code>has(key)</code> - \u68c0\u67e5\u670d\u52a1\u662f\u5426\u5b58\u5728</li> <li><code>get_descriptor(key)</code> - \u83b7\u53d6\u670d\u52a1\u63cf\u8ff0\u7b26</li> </ul>"},{"location":"zh/reference/API_DESIGN/#_4","title":"\u5220\u9664\u76f8\u5173","text":"<ul> <li><code>unregister(key, all=False)</code> - \u5220\u9664\u670d\u52a1</li> <li><code>try_unregister(key)</code> - \u5c1d\u8bd5\u5220\u9664</li> <li><code>clear(lifetime=None)</code> - \u6e05\u7a7a\u5bb9\u5668</li> <li><code>replace(old_key, new_impl)</code> - \u66ff\u6362\u670d\u52a1</li> </ul>"},{"location":"zh/reference/API_DESIGN/#_5","title":"\u4f5c\u7528\u57df\u76f8\u5173","text":"<ul> <li><code>create_scope()</code> - \u521b\u5efa\u4f5c\u7528\u57df</li> <li><code>create_child()</code> - \u521b\u5efa\u5b50\u5bb9\u5668</li> <li><code>create_async_scope()</code> - \u521b\u5efa\u5f02\u6b65\u4f5c\u7528\u57df</li> </ul>"},{"location":"zh/reference/API_DESIGN/#_6","title":"\u88c5\u9970\u5668\u76f8\u5173","text":"<ul> <li><code>@injectable</code> - \u6807\u8bb0\u53ef\u6ce8\u5165\u7c7b</li> <li><code>@injectable.singleton</code> - \u5355\u4f8b\u6807\u8bb0</li> <li><code>@injectable.transient</code> - \u77ac\u6001\u6807\u8bb0</li> <li><code>@injectable.scoped</code> - \u4f5c\u7528\u57df\u6807\u8bb0</li> <li><code>@inject</code> - \u65b9\u6cd5\u6ce8\u5165\u88c5\u9970\u5668</li> <li><code>Injected</code> - \u53c2\u6570\u6ce8\u5165\u6807\u8bb0</li> <li><code>Lazy[T]</code> - \u5ef6\u8fdf\u6ce8\u5165\u5305\u88c5</li> </ul>"},{"location":"zh/reference/TECHNICAL_SPEC/","title":"Symphra Container \u6280\u672f\u89c4\u8303\u6587\u6863","text":""},{"location":"zh/reference/TECHNICAL_SPEC/#_1","title":"\u9879\u76ee\u6982\u8ff0","text":"<p>\u9879\u76ee\u540d\u79f0: Symphra Container \u7c7b\u578b: Python \u4f9d\u8d56\u6ce8\u5165\u5bb9\u5668\u5e93 \u76ee\u6807: \u63d0\u4f9b\u9ad8\u6027\u80fd\u3001\u7c7b\u578b\u5b89\u5168\u3001\u6613\u4e8e\u4f7f\u7528\u7684 DI \u5bb9\u5668\uff0c\u652f\u6301\u591a\u79cd\u751f\u547d\u5468\u671f\u3001\u5faa\u73af\u4f9d\u8d56\u5904\u7406\u548c\u6846\u67b6\u96c6\u6210</p>"},{"location":"zh/reference/TECHNICAL_SPEC/#_2","title":"\u8bbe\u8ba1\u51b3\u7b56\u786e\u8ba4\u8868","text":"\u51b3\u7b56\u9879 \u9009\u62e9\u65b9\u6848 \u8bf4\u660e \u670d\u52a1\u952e\u6a21\u5f0f \u6df7\u5408\u6a21\u5f0f \u540c\u65f6\u652f\u6301\u7c7b\u578b\u952e\u548c\u5b57\u7b26\u4e32\u952e \u5b57\u7b26\u4e32\u952e\u7c7b\u578b\u63d0\u793a TypedDict + Literal \u901a\u8fc7\u91cd\u8f7d\u548c\u7c7b\u578b\u63d0\u793a\u4fdd\u8bc1 IDE \u81ea\u52a8\u8865\u5168 API \u98ce\u683c \u6df7\u5408\u98ce\u683c \u540c\u65f6\u63d0\u4f9b <code>resolve()</code> \u548c <code>get()</code> \u65b9\u6cd5 \u94fe\u5f0f\u8c03\u7528 \u4e0d\u652f\u6301 \u6bcf\u4e2a\u64cd\u4f5c\u72ec\u7acb\uff0c\u8fd4\u56de None \u751f\u547d\u5468\u671f\u7c7b\u578b 4 \u79cd Singleton, Transient, Scoped, Factory \u670d\u52a1\u8986\u76d6 override \u53c2\u6570 \u9ed8\u8ba4 False\uff08\u5ffd\u7565\u91cd\u590d\uff09\uff0cTrue \u65f6\u66ff\u6362 \u53ef\u9009\u4f9d\u8d56 \u4f18\u5148\u5bb9\u5668\u89e3\u6790 \u6709\u9ed8\u8ba4\u503c\u4e5f\u4f18\u5148\u4ece\u5bb9\u5668\u89e3\u6790\uff0c\u65e0\u5219\u4f7f\u7528\u9ed8\u8ba4\u503c \u89e3\u6790\u5931\u8d25 \u629b\u5f02\u5e38 \u65e0\u6cd5\u89e3\u6790\u65f6\u7acb\u5373\u629b\u51fa\u8be6\u7ec6\u5f02\u5e38"},{"location":"zh/reference/TECHNICAL_SPEC/#api","title":"\u6838\u5fc3 API \u5feb\u901f\u53c2\u8003","text":""},{"location":"zh/reference/TECHNICAL_SPEC/#api_1","title":"\u6ce8\u518c API","text":"<pre><code># \u7c7b\u578b\u952e\u6ce8\u518c\ncontainer.register(UserService)  # \u81ea\u52a8\u88c5\u914d\ncontainer.register(IService, ServiceImpl)  # \u6307\u5b9a\u5b9e\u73b0\ncontainer.register(Service, lifetime=Lifetime.TRANSIENT)  # \u751f\u547d\u5468\u671f\ncontainer.register(Service, NewImpl, override=True)  # \u8986\u76d6\n\n# \u5b57\u7b26\u4e32\u952e\u6ce8\u518c\ncontainer.register(\"db\", Database)\ncontainer.register_factory(\"logger\", create_logger)\ncontainer.register_instance(\"config\", config_obj)\ncontainer.register_value(\"api_key\", \"sk_...\")\n\n# \u5f02\u6b65\u5de5\u5382\ncontainer.register_async_factory(\"async_db\", async_create_db)\n\n# \u6279\u91cf\u6ce8\u518c\ncontainer.scan(\"myapp.services\")  # \u81ea\u52a8\u626b\u63cf @injectable \u7c7b\ncontainer.register_module(DatabaseModule())  # \u6a21\u5757\u5316\u6ce8\u518c\n</code></pre>"},{"location":"zh/reference/TECHNICAL_SPEC/#api_2","title":"\u83b7\u53d6 API","text":"<pre><code># \u7c7b\u578b\u952e\u83b7\u53d6\nservice: UserService = container.resolve(UserService)  # \u63a8\u8350\nservice = container.try_resolve(UserService)  # Optional[UserService]\n\n# \u5b57\u7b26\u4e32\u952e\u83b7\u53d6\ndb: Database = container.get(\"database\")  # \u7c7b\u578b\u6ce8\u89e3\u8f85\u52a9\ndb = container.get(\"database\", Database)  # \u663e\u5f0f\u6307\u5b9a\u7c7b\u578b\ndb = container.try_get(\"database\")  # Optional[Database]\n\n# \u5f02\u6b65\u83b7\u53d6\nservice = await container.resolve_async(Service)\nservice = await container.get_async(\"service_key\")\n\n# \u68c0\u67e5\u548c\u5143\u6570\u636e\nexists = container.has(\"database\")  # bool\ndescriptor = container.get_descriptor(UserService)  # \u670d\u52a1\u63cf\u8ff0\u7b26\nall_loggers = container.get_all(Logger)  # \u83b7\u53d6\u6240\u6709\u540c\u7c7b\u578b\u670d\u52a1\n</code></pre>"},{"location":"zh/reference/TECHNICAL_SPEC/#api_3","title":"\u5220\u9664\u548c\u8986\u76d6 API","text":"<pre><code># \u5220\u9664\ncontainer.unregister(UserService)  # \u6309\u7c7b\u578b\u5220\u9664\ncontainer.unregister(\"database\")  # \u6309\u952e\u5220\u9664\ncontainer.try_unregister(\"optional\")  # \u5b89\u5168\u5220\u9664\ncontainer.unregister(IService, all=True)  # \u5220\u9664\u6240\u6709\u5b9e\u73b0\n\n# \u8986\u76d6\ncontainer.replace(OldService, NewService)  # \u76f4\u63a5\u66ff\u6362\ncontainer.unregister(Service)  # \u6216\u5148\u5220\u540e\u6ce8\u518c\ncontainer.register(Service, NewImpl, override=True)\n\n# \u6e05\u7a7a\ncontainer.clear()  # \u6e05\u7a7a\u6240\u6709\u670d\u52a1\ncontainer.clear(lifetime=Lifetime.TRANSIENT)  # \u6e05\u7a7a\u7279\u5b9a\u751f\u547d\u5468\u671f\n</code></pre>"},{"location":"zh/reference/TECHNICAL_SPEC/#api_4","title":"\u4f5c\u7528\u57df API","text":"<pre><code># \u521b\u5efa\u4f5c\u7528\u57df\nwith container.create_scope() as scope:\n    service = scope.resolve(UserService)\n\n# \u5f02\u6b65\u4f5c\u7528\u57df\nasync with container.create_async_scope() as scope:\n    service = await scope.resolve_async(UserService)\n\n# \u5b50\u5bb9\u5668\uff08\u7ee7\u627f\u7236\u5bb9\u5668\uff09\nchild = container.create_child()\n</code></pre>"},{"location":"zh/reference/TECHNICAL_SPEC/#api_5","title":"\u88c5\u9970\u5668 API","text":"<pre><code># \u7c7b\u88c5\u9970\u5668\n@injectable\nclass Service: pass  # \u9ed8\u8ba4 Singleton\n\n@injectable.transient\nclass Service: pass\n\n@injectable.factory\ndef create_service(): pass\n\n# \u65b9\u6cd5\u88c5\u9970\u5668\n@inject\ndef process(service: UserService = Injected):\n    pass\n\n# \u5c5e\u6027\u6ce8\u5165\nclass Service:\n    db: Database = inject()\n    cache: Cache = inject(\"cache_service\")\n</code></pre>"},{"location":"zh/reference/TECHNICAL_SPEC/#_3","title":"\u7c7b\u578b\u7cfb\u7edf\u67b6\u6784","text":""},{"location":"zh/reference/TECHNICAL_SPEC/#1","title":"1. \u6838\u5fc3\u7c7b\u578b\u5c42\u6b21","text":"<pre><code>ServiceKey (Union[Type[T], str])\n    \u251c\u2500\u2500 Type[T] - \u7c7b\u578b\u952e\uff08\u63a8\u8350\uff09\n    \u2514\u2500\u2500 str - \u5b57\u7b26\u4e32\u952e\n\nLifetime (Enum)\n    \u251c\u2500\u2500 SINGLETON - \u5168\u5c40\u552f\u4e00\n    \u251c\u2500\u2500 TRANSIENT - \u6bcf\u6b21\u521b\u5efa\n    \u251c\u2500\u2500 SCOPED - \u4f5c\u7528\u57df\u5171\u4eab\n    \u2514\u2500\u2500 FACTORY - \u5de5\u5382\u6a21\u5f0f\n\nProviderType (Enum)\n    \u251c\u2500\u2500 CLASS - \u7c7b\u6784\u9020\n    \u251c\u2500\u2500 FACTORY - \u5de5\u5382\u51fd\u6570\n    \u251c\u2500\u2500 INSTANCE - \u76f4\u63a5\u5b9e\u4f8b\n    \u2514\u2500\u2500 VALUE - \u914d\u7f6e\u503c\n</code></pre>"},{"location":"zh/reference/TECHNICAL_SPEC/#2","title":"2. \u7c7b\u578b\u63d0\u793a\u4fdd\u8bc1","text":""},{"location":"zh/reference/TECHNICAL_SPEC/#a-100-ide","title":"\u65b9\u6848 A: \u7c7b\u578b\u952e\uff08100% IDE \u652f\u6301\uff09","text":"<pre><code>class UserService:\n    pass\n\ncontainer.register(UserService)\nservice: UserService = container.resolve(UserService)  # \u2705 IDE \u5b8c\u7f8e\u63a8\u65ad\n</code></pre>"},{"location":"zh/reference/TECHNICAL_SPEC/#b","title":"\u65b9\u6848 B: \u5b57\u7b26\u4e32\u952e + \u7c7b\u578b\u6ce8\u89e3","text":"<pre><code># \u4f7f\u7528\u7c7b\u578b\u6ce8\u89e3\u4f5c\u4e3a\u7c7b\u578b\u63d0\u793a\u6765\u6e90\ndb: Database = container.get(\"database\")  # \u2705 IDE \u4ece\u6ce8\u89e3\u63a8\u65ad\n\n# \u6216\u663e\u5f0f\u6307\u5b9a\u7c7b\u578b\ndb = container.get(\"database\", Database)  # \u2705 IDE \u63a8\u65ad\u4e3a Database\n</code></pre>"},{"location":"zh/reference/TECHNICAL_SPEC/#c-literal-overload","title":"\u65b9\u6848 C: Literal + Overload\uff08\u6700\u4f18\uff09","text":"<pre><code>from typing_extensions import Literal, overload\n\nclass Container:\n    @overload\n    def get(self, key: Literal[\"database\"]) -&gt; Database: ...\n\n    @overload\n    def get(self, key: Literal[\"cache\"]) -&gt; Cache: ...\n\n    @overload\n    def get(self, key: str, service_type: Type[T]) -&gt; T: ...\n\n# \u4f7f\u7528\u65f6 IDE \u81ea\u52a8\u5b8c\u6210\ndb = container.get(\"database\")  # \u2705 IDE \u77e5\u9053\u8fd4\u56de Database\ncache = container.get(\"cache\")  # \u2705 IDE \u77e5\u9053\u8fd4\u56de Cache\n</code></pre>"},{"location":"zh/reference/TECHNICAL_SPEC/#3-typeddict","title":"3. TypedDict \u65b9\u6848\uff08\u53ef\u9009\u589e\u5f3a\uff09","text":"<pre><code>from typing_extensions import TypedDict\n\nclass ServiceRegistry(TypedDict, total=False):\n    database: Database\n    cache: Cache\n    logger: Logger\n\n# \u7528\u4e8e IDE \u7c7b\u578b\u63d0\u793a\u548c\u4ee3\u7801\u751f\u6210\nregistry: ServiceRegistry = {\n    \"database\": PostgresDB(),\n    \"cache\": RedisCache(),\n    \"logger\": FileLogger(),\n}\n\n# IDE \u53ef\u4ee5\u6839\u636e registry \u7684\u5b9a\u4e49\u63d0\u4f9b\u81ea\u52a8\u8865\u5168\n</code></pre>"},{"location":"zh/reference/TECHNICAL_SPEC/#_4","title":"\u5faa\u73af\u4f9d\u8d56\u5904\u7406\u673a\u5236","text":""},{"location":"zh/reference/TECHNICAL_SPEC/#_5","title":"\u95ee\u9898\u573a\u666f","text":"<pre><code># \u573a\u666f 1: \u76f4\u63a5\u5faa\u73af\nclass A:\n    def __init__(self, b: B):\n        self.b = b\n\nclass B:\n    def __init__(self, a: A):\n        self.a = a\n\n# \u573a\u666f 2: \u95f4\u63a5\u5faa\u73af\nclass A:\n    def __init__(self, b: B): pass\n\nclass B:\n    def __init__(self, c: C): pass\n\nclass C:\n    def __init__(self, a: A): pass\n</code></pre>"},{"location":"zh/reference/TECHNICAL_SPEC/#_6","title":"\u89e3\u51b3\u65b9\u6848","text":""},{"location":"zh/reference/TECHNICAL_SPEC/#1-lazy","title":"\u65b9\u6848 1: Lazy \u5305\u88c5\uff08\u63a8\u8350\uff09\u2705","text":"<pre><code>from symphra_container import Lazy\n\nclass A:\n    def __init__(self, b: Lazy[B]):\n        self.b = b  # \u9996\u6b21\u8bbf\u95ee self.b \u65f6\u624d\u89e3\u6790 B\n\nclass B:\n    def __init__(self, a: A):\n        self.a = a\n\n# \u5b8c\u5168\u907f\u514d\u5faa\u73af\u4f9d\u8d56\uff01\ncontainer.register(A)\ncontainer.register(B)\na = container.resolve(A)  # \u2705 \u6210\u529f\n</code></pre>"},{"location":"zh/reference/TECHNICAL_SPEC/#2_1","title":"\u65b9\u6848 2: \u5c5e\u6027/\u65b9\u6cd5\u6ce8\u5165","text":"<pre><code>class A:\n    def __init__(self):\n        self.b: Optional[B] = None\n\nclass B:\n    def __init__(self, a: A):\n        self.a = a\n\n# \u624b\u52a8\u521d\u59cb\u5316\u5668\ndef init_a(a: A, b: B):\n    a.b = b\n\ncontainer.register(A)\ncontainer.register(B)\ncontainer.register_initializer(A, init_a, [B])\n</code></pre>"},{"location":"zh/reference/TECHNICAL_SPEC/#3","title":"\u65b9\u6848 3: \u5de5\u5382\u51fd\u6570\u5ef6\u8fdf","text":"<pre><code>def create_a(b: Lazy[B]):\n    return A(b)\n\ncontainer.register_factory(A, create_a)\ncontainer.register(B)\n</code></pre>"},{"location":"zh/reference/TECHNICAL_SPEC/#_7","title":"\u68c0\u6d4b\u673a\u5236","text":"<pre><code>\u89e3\u6790\u6808: [A]\n  \u251c\u2500 \u89e3\u6790 A \u7684\u4f9d\u8d56\n  \u251c\u2500 \u9700\u8981 B\uff0c\u6808: [A, B]\n  \u2502  \u251c\u2500 \u89e3\u6790 B \u7684\u4f9d\u8d56\n  \u2502  \u251c\u2500 \u9700\u8981 A\uff0c\u6808: [A, B, A]\n  \u2502  \u251c\u2500 \u68c0\u6d4b\u5230\u5faa\u73af\uff01A \u5df2\u5728\u6808\u4e2d\n  \u2502  \u2514\u2500 \u629b\u51fa CircularDependencyError\n  \u2502     \u8be6\u7ec6\u4fe1\u606f: A -&gt; B -&gt; A\n</code></pre>"},{"location":"zh/reference/TECHNICAL_SPEC/#_8","title":"\u751f\u547d\u5468\u671f\u7ba1\u7406\u8be6\u89e3","text":""},{"location":"zh/reference/TECHNICAL_SPEC/#1-singleton","title":"1. Singleton\uff08\u5355\u4f8b\uff09","text":"<pre><code># \u5168\u5c40\u552f\u4e00\u5b9e\u4f8b\ncontainer.register(Database, lifetime=Lifetime.SINGLETON)\n\ndb1 = container.resolve(Database)\ndb2 = container.resolve(Database)\nassert db1 is db2  # \u2705 \u540c\u4e00\u5b9e\u4f8b\n\n# \u5b50\u5bb9\u5668\u4e5f\u5171\u4eab\nchild = container.create_child()\ndb3 = child.resolve(Database)\nassert db3 is db1  # \u2705 \u5168\u5c40\u5171\u4eab\n</code></pre> <p>\u7279\u6027: - \u7ebf\u7a0b\u5b89\u5168\u7684\u5355\u4f8b\u521b\u5efa\uff08\u53cc\u91cd\u68c0\u67e5\u9501\uff09 - \u5e94\u7528\u542f\u52a8\u65f6\u6216\u9996\u6b21\u8bf7\u6c42\u65f6\u521d\u59cb\u5316 - \u9002\u7528\u4e8e\u65e0\u72b6\u6001\u670d\u52a1\uff08\u6570\u636e\u5e93\u3001\u7f13\u5b58\u3001\u65e5\u5fd7\uff09</p>"},{"location":"zh/reference/TECHNICAL_SPEC/#2-transient","title":"2. Transient\uff08\u77ac\u6001\uff09","text":"<pre><code># \u6bcf\u6b21\u521b\u5efa\u65b0\u5b9e\u4f8b\ncontainer.register(RequestHandler, lifetime=Lifetime.TRANSIENT)\n\nhandler1 = container.resolve(RequestHandler)\nhandler2 = container.resolve(RequestHandler)\nassert handler1 is not handler2  # \u2705 \u4e0d\u540c\u5b9e\u4f8b\n</code></pre> <p>\u7279\u6027: - \u6bcf\u6b21\u8bf7\u6c42\u90fd\u521b\u5efa\u65b0\u5b9e\u4f8b - \u65e0\u5185\u5b58\u6cc4\u6f0f\u98ce\u9669 - \u9002\u7528\u4e8e\u6709\u72b6\u6001\u670d\u52a1\u3001\u8bf7\u6c42\u5904\u7406\u5668</p>"},{"location":"zh/reference/TECHNICAL_SPEC/#3-scoped","title":"3. Scoped\uff08\u4f5c\u7528\u57df\uff09","text":"<pre><code># \u4f5c\u7528\u57df\u5185\u552f\u4e00\ncontainer.register(UnitOfWork, lifetime=Lifetime.SCOPED)\n\nwith container.create_scope() as scope1:\n    uow1a = scope1.resolve(UnitOfWork)\n    uow1b = scope1.resolve(UnitOfWork)\n    assert uow1a is uow1b  # \u2705 \u4f5c\u7528\u57df\u5185\u5171\u4eab\n\nwith container.create_scope() as scope2:\n    uow2 = scope2.resolve(UnitOfWork)\n    assert uow2 is not uow1a  # \u2705 \u4e0d\u540c\u4f5c\u7528\u57df\u9694\u79bb\n</code></pre> <p>\u7279\u6027: - \u4f7f\u7528 <code>contextvars</code> \u5b9e\u73b0\u7ebf\u7a0b\u5b89\u5168 - \u4f5c\u7528\u57df\u9500\u6bc1\u65f6\u81ea\u52a8\u6e05\u7406\u8d44\u6e90 - \u9002\u7528\u4e8e Web \u8bf7\u6c42\u3001\u6570\u636e\u5e93\u4e8b\u52a1</p>"},{"location":"zh/reference/TECHNICAL_SPEC/#4-factory","title":"4. Factory\uff08\u5de5\u5382\uff09","text":"<pre><code># \u4f7f\u7528\u5de5\u5382\u51fd\u6570\u521b\u5efa\ndef create_db(config: Config):\n    return Database(config.db_url)\n\ncontainer.register_factory(\"database\", create_db, lifetime=Lifetime.SINGLETON)\n\n# \u5de5\u5382\u53ef\u4ee5\u6709\u4f9d\u8d56\uff0c\u7531\u5bb9\u5668\u81ea\u52a8\u6ce8\u5165\ndb = container.get(\"database\")\n</code></pre> <p>\u7279\u6027: - \u7075\u6d3b\u7684\u521b\u5efa\u903b\u8f91 - \u652f\u6301\u5f02\u6b65\u5de5\u5382 - \u53ef\u4ee5\u4f9d\u8d56\u5176\u4ed6\u670d\u52a1</p>"},{"location":"zh/reference/TECHNICAL_SPEC/#_9","title":"\u4f9d\u8d56\u6ce8\u5165\u6a21\u5f0f","text":""},{"location":"zh/reference/TECHNICAL_SPEC/#1_1","title":"1. \u6784\u9020\u51fd\u6570\u6ce8\u5165\uff08\u4f18\u5148\uff09","text":"<pre><code>class UserService:\n    def __init__(self, db: Database, logger: Logger):\n        self.db = db\n        self.logger = logger\n\n# \u5bb9\u5668\u81ea\u52a8\u6ce8\u5165\nservice = container.resolve(UserService)\nassert service.db is not None\nassert service.logger is not None\n</code></pre> <p>\u4f18\u52bf: - \u2705 \u7c7b\u578b\u5b89\u5168 - \u2705 IDE \u652f\u6301 - \u2705 \u4e0d\u53ef\u53d8\u5bf9\u8c61\u53cb\u597d - \u2705 \u4f9d\u8d56\u6e05\u6670</p>"},{"location":"zh/reference/TECHNICAL_SPEC/#2_2","title":"2. \u5c5e\u6027\u6ce8\u5165\uff08\u7279\u6b8a\u60c5\u51b5\uff09","text":"<pre><code>class Service:\n    db: Database = inject()  # \u4f7f\u7528\u63cf\u8ff0\u7b26\n    logger: Logger = inject(\"logger_service\")\n\n# \u521d\u59cb\u5316\nservice = Service()  # db \u548c logger \u81ea\u52a8\u6ce8\u5165\n</code></pre> <p>\u7528\u9014: - \u53ef\u9009\u4f9d\u8d56 - \u5faa\u73af\u4f9d\u8d56 - \u9057\u7559\u4ee3\u7801\u517c\u5bb9</p>"},{"location":"zh/reference/TECHNICAL_SPEC/#3_1","title":"3. \u65b9\u6cd5\u6ce8\u5165\uff08\u521d\u59cb\u5316\uff09","text":"<pre><code>class Service:\n    def setup(self, db: Database, cache: Cache):\n        self.db = db\n        self.cache = cache\n\n# \u6ce8\u518c\u521d\u59cb\u5316\u5668\ncontainer.register_initializer(\n    Service,\n    lambda svc, db, cache: svc.setup(db, cache),\n    [Database, Cache]\n)\n</code></pre>"},{"location":"zh/reference/TECHNICAL_SPEC/#_10","title":"\u9519\u8bef\u5904\u7406\u89c4\u8303","text":""},{"location":"zh/reference/TECHNICAL_SPEC/#_11","title":"\u5f02\u5e38\u5c42\u6b21","text":"<pre><code>ContainerException (\u57fa\u7c7b)\n\u251c\u2500\u2500 ServiceNotFoundError - \u670d\u52a1\u672a\u6ce8\u518c\n\u2502   \u2514\u2500\u2500 \"Service UserService not found in container\"\n\u2502\n\u251c\u2500\u2500 CircularDependencyError - \u5faa\u73af\u4f9d\u8d56\n\u2502   \u2514\u2500\u2500 \"Circular dependency detected: A -&gt; B -&gt; C -&gt; A\"\n\u2502\n\u251c\u2500\u2500 InvalidServiceError - \u65e0\u6548\u670d\u52a1\u5b9a\u4e49\n\u2502   \u2514\u2500\u2500 \"Service type cannot be None\"\n\u2502\n\u251c\u2500\u2500 RegistrationError - \u6ce8\u518c\u9519\u8bef\n\u2502   \u2514\u2500\u2500 \"Service UserService already registered, use override=True\"\n\u2502\n\u2514\u2500\u2500 ResolutionError - \u89e3\u6790\u9519\u8bef\n    \u2514\u2500\u2500 \"Cannot resolve UserService: missing required dependency 'db'\"\n</code></pre>"},{"location":"zh/reference/TECHNICAL_SPEC/#_12","title":"\u9519\u8bef\u6d88\u606f\u793a\u4f8b","text":"<pre><code>try:\n    container.resolve(NonExistentService)\nexcept ServiceNotFoundError as e:\n    # ServiceNotFoundError: Service NonExistentService not found in container\n    # Available services:\n    #   - UserService (Lifetime.SINGLETON)\n    #   - Database (Lifetime.SINGLETON)\n    #   - Logger (Lifetime.TRANSIENT)\n    pass\n\ntry:\n    container.resolve(ServiceWithCircularDep)\nexcept CircularDependencyError as e:\n    # CircularDependencyError: Circular dependency detected:\n    # ServiceA -&gt; ServiceB -&gt; ServiceC -&gt; ServiceA\n    #\n    # To fix:\n    # 1. Use Lazy[ServiceA] in ServiceC\n    # 2. Use property injection\n    # 3. Restructure your dependencies\n    pass\n</code></pre>"},{"location":"zh/reference/TECHNICAL_SPEC/#_13","title":"\u6027\u80fd\u76ee\u6807","text":"\u64cd\u4f5c \u76ee\u6807 \u8bf4\u660e \u7b80\u5355\u89e3\u6790 &lt; 1 \u03bcs \u5355\u4e2a\u4f9d\u8d56 \u590d\u6742\u89e3\u6790 &lt; 50 \u03bcs 10 \u5c42\u5d4c\u5957\u4f9d\u8d56 \u5355\u4f8b\u7f13\u5b58 &lt; 100 ns \u5df2\u7f13\u5b58\u5b9e\u4f8b\u67e5\u8be2 \u542f\u52a8\u65f6\u95f4 &lt; 100 ms 1000 \u4e2a\u670d\u52a1\u6ce8\u518c \u5185\u5b58\u5360\u7528 &lt; 1 MB 1000 \u4e2a\u670d\u52a1\u5b9a\u4e49"},{"location":"zh/reference/TECHNICAL_SPEC/#_14","title":"\u9879\u76ee\u7ed3\u6784\u89c4\u5212","text":"<pre><code>symphra-container/\n\u251c\u2500\u2500 src/symphra_container/\n\u2502   \u251c\u2500\u2500 __init__.py                 # \u516c\u5171 API \u5bfc\u51fa\n\u2502   \u251c\u2500\u2500 container.py                # \u6838\u5fc3\u5bb9\u5668\u7c7b\n\u2502   \u251c\u2500\u2500 registry.py                 # \u670d\u52a1\u6ce8\u518c\u8868\n\u2502   \u251c\u2500\u2500 resolver.py                 # \u4f9d\u8d56\u89e3\u6790\u5668\n\u2502   \u251c\u2500\u2500 types.py                    # \u7c7b\u578b\u5b9a\u4e49\n\u2502   \u251c\u2500\u2500 enums.py                    # \u679a\u4e3e\u7c7b\u578b\n\u2502   \u251c\u2500\u2500 exceptions.py               # \u5f02\u5e38\u5b9a\u4e49\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 lifetimes/\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 manager.py              # \u751f\u547d\u5468\u671f\u7ba1\u7406\u5668\u57fa\u7c7b\n\u2502   \u2502   \u251c\u2500\u2500 singleton.py            # \u5355\u4f8b\u7ba1\u7406\u5668\n\u2502   \u2502   \u251c\u2500\u2500 transient.py            # \u77ac\u6001\u7ba1\u7406\u5668\n\u2502   \u2502   \u251c\u2500\u2500 scoped.py               # \u4f5c\u7528\u57df\u7ba1\u7406\u5668\n\u2502   \u2502   \u2514\u2500\u2500 factory.py              # \u5de5\u5382\u7ba1\u7406\u5668\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 injection/\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 detector.py             # \u4f9d\u8d56\u68c0\u6d4b\u5668\n\u2502   \u2502   \u251c\u2500\u2500 constructor.py          # \u6784\u9020\u51fd\u6570\u6ce8\u5165\n\u2502   \u2502   \u251c\u2500\u2500 property.py             # \u5c5e\u6027\u6ce8\u5165\n\u2502   \u2502   \u2514\u2500\u2500 method.py               # \u65b9\u6cd5\u6ce8\u5165\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 circular/\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 detector.py             # \u5faa\u73af\u4f9d\u8d56\u68c0\u6d4b\u5668\n\u2502   \u2502   \u2514\u2500\u2500 lazy_proxy.py           # \u5ef6\u8fdf\u4ee3\u7406\u5b9e\u73b0\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 decorators/\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 injectable.py           # @injectable \u88c5\u9970\u5668\n\u2502   \u2502   \u2514\u2500\u2500 inject.py               # @inject \u88c5\u9970\u5668\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 scopes/\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 scope.py                # \u4f5c\u7528\u57df\u5b9e\u73b0\n\u2502   \u2502   \u2514\u2500\u2500 context.py              # \u4f5c\u7528\u57df\u4e0a\u4e0b\u6587\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 integrations/\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 fastapi.py              # FastAPI \u96c6\u6210\n\u2502   \u2502   \u2514\u2500\u2500 flask.py                # Flask \u96c6\u6210\n\u2502   \u2502\n\u2502   \u2514\u2500\u2500 utils/\n\u2502       \u251c\u2500\u2500 __init__.py\n\u2502       \u251c\u2500\u2500 inspection.py            # \u53cd\u5c04\u5de5\u5177\n\u2502       \u2514\u2500\u2500 typing_helpers.py        # \u7c7b\u578b\u5de5\u5177\n\u2502\n\u251c\u2500\u2500 tests/\n\u2502   \u251c\u2500\u2500 unit/\n\u2502   \u2502   \u251c\u2500\u2500 test_container.py\n\u2502   \u2502   \u251c\u2500\u2500 test_lifetimes.py\n\u2502   \u2502   \u251c\u2500\u2500 test_injection.py\n\u2502   \u2502   \u251c\u2500\u2500 test_circular.py\n\u2502   \u2502   \u2514\u2500\u2500 test_resolver.py\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 integration/\n\u2502   \u2502   \u251c\u2500\u2500 test_fastapi.py\n\u2502   \u2502   \u2514\u2500\u2500 test_flask.py\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 performance/\n\u2502   \u2502   \u2514\u2500\u2500 benchmark.py\n\u2502   \u2502\n\u2502   \u2514\u2500\u2500 conftest.py\n\u2502\n\u251c\u2500\u2500 docs/\n\u2502   \u251c\u2500\u2500 index.md\n\u2502   \u251c\u2500\u2500 guide/\n\u2502   \u2502   \u251c\u2500\u2500 quick_start.md\n\u2502   \u2502   \u251c\u2500\u2500 registration.md\n\u2502   \u2502   \u251c\u2500\u2500 resolution.md\n\u2502   \u2502   \u251c\u2500\u2500 lifetimes.md\n\u2502   \u2502   \u2514\u2500\u2500 advanced.md\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 api/\n\u2502   \u2502   \u2514\u2500\u2500 reference.md\n\u2502   \u2502\n\u2502   \u2514\u2500\u2500 examples/\n\u2502       \u251c\u2500\u2500 simple.py\n\u2502       \u251c\u2500\u2500 fastapi_example.py\n\u2502       \u2514\u2500\u2500 flask_example.py\n\u2502\n\u251c\u2500\u2500 pyproject.toml\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 API_DESIGN.md                   # \u5b8c\u6574 API \u6587\u6863\n\u251c\u2500\u2500 TECHNICAL_SPEC.md               # \u672c\u6587\u4ef6\n\u2514\u2500\u2500 CHANGELOG.md\n</code></pre>"},{"location":"zh/reference/TECHNICAL_SPEC/#_15","title":"\u5f00\u53d1\u9636\u6bb5\u5206\u89e3","text":""},{"location":"zh/reference/TECHNICAL_SPEC/#1-3-5","title":"\u9636\u6bb5 1: \u6838\u5fc3\u67b6\u6784\uff083-5 \u5929\uff09","text":"<ul> <li> \u9879\u76ee\u521d\u59cb\u5316\u548c\u5de5\u7a0b\u914d\u7f6e</li> <li> \u6838\u5fc3\u7c7b\u578b\u7cfb\u7edf\u8bbe\u8ba1</li> <li> \u5bb9\u5668\u57fa\u7840\u7c7b\u5b9e\u73b0</li> <li> \u4f9d\u8d56\u89e3\u6790\u5668\u57fa\u7840\u5b9e\u73b0</li> </ul>"},{"location":"zh/reference/TECHNICAL_SPEC/#2-4-6","title":"\u9636\u6bb5 2: \u6ce8\u518c\u4e0e\u89e3\u6790\uff084-6 \u5929\uff09","text":"<ul> <li> \u591a\u79cd\u751f\u547d\u5468\u671f\u7ba1\u7406\u5668</li> <li> \u5de5\u5382\u51fd\u6570\u548c\u5b9e\u4f8b\u6ce8\u518c</li> <li> \u81ea\u52a8\u88c5\u914d\u529f\u80fd</li> <li> \u5c5e\u6027\u548c\u65b9\u6cd5\u6ce8\u5165</li> </ul>"},{"location":"zh/reference/TECHNICAL_SPEC/#3-5-7","title":"\u9636\u6bb5 3: \u9ad8\u7ea7\u7279\u6027\uff085-7 \u5929\uff09","text":"<ul> <li> \u5faa\u73af\u4f9d\u8d56\u68c0\u6d4b</li> <li> Lazy Proxy \u5b9e\u73b0</li> <li> \u4f5c\u7528\u57df\u7ba1\u7406</li> <li> \u5f02\u6b65\u652f\u6301</li> </ul>"},{"location":"zh/reference/TECHNICAL_SPEC/#4-4-5","title":"\u9636\u6bb5 4: \u6846\u67b6\u96c6\u6210\uff084-5 \u5929\uff09","text":"<ul> <li> \u88c5\u9970\u5668\u7cfb\u7edf</li> <li> FastAPI \u96c6\u6210</li> <li> Flask \u96c6\u6210</li> <li> \u914d\u7f6e\u52a0\u8f7d\u5668</li> </ul>"},{"location":"zh/reference/TECHNICAL_SPEC/#5-5-7","title":"\u9636\u6bb5 5: \u6d4b\u8bd5\u4e0e\u4f18\u5316\uff085-7 \u5929\uff09","text":"<ul> <li> \u5355\u5143\u6d4b\u8bd5\u548c\u96c6\u6210\u6d4b\u8bd5</li> <li> \u6027\u80fd\u57fa\u51c6\u6d4b\u8bd5\u548c\u4f18\u5316</li> <li> \u7c7b\u578b\u68c0\u67e5\u5b8c\u5584</li> <li> \u6587\u6863\u7f16\u5199</li> </ul>"},{"location":"zh/reference/TECHNICAL_SPEC/#_16","title":"\u5173\u952e\u8bbe\u8ba1\u539f\u5219","text":""},{"location":"zh/reference/TECHNICAL_SPEC/#1-kiss","title":"1. KISS\uff08\u4fdd\u6301\u7b80\u5355\uff09","text":"<ul> <li>\u7b80\u6d01\u7684 API \u8bbe\u8ba1</li> <li>\u6700\u5c0f\u5316\u7528\u6237\u914d\u7f6e</li> <li>\u6e05\u6670\u7684\u9519\u8bef\u6d88\u606f</li> </ul>"},{"location":"zh/reference/TECHNICAL_SPEC/#2-solid","title":"2. SOLID \u539f\u5219","text":"<ul> <li>S: \u5355\u4e00\u804c\u8d23 - \u6bcf\u4e2a\u7c7b\u53ea\u8d1f\u8d23\u4e00\u4e2a\u65b9\u9762</li> <li>O: \u5f00\u95ed\u539f\u5219 - \u6613\u4e8e\u6269\u5c55\uff0c\u96be\u4ee5\u4fee\u6539</li> <li>L: Liskov \u66ff\u6362 - \u9075\u5faa\u534f\u8bae\u5b9a\u4e49</li> <li>I: \u63a5\u53e3\u9694\u79bb - \u7cbe\u7ec6\u5316\u63a5\u53e3</li> <li>D: \u4f9d\u8d56\u5012\u7f6e - \u4f9d\u8d56\u62bd\u8c61\uff0c\u4e0d\u4f9d\u8d56\u5177\u4f53</li> </ul>"},{"location":"zh/reference/TECHNICAL_SPEC/#3_2","title":"3. \u7c7b\u578b\u5b89\u5168","text":"<ul> <li>\u5b8c\u6574\u7684\u7c7b\u578b\u63d0\u793a</li> <li>MyPy \u4e25\u683c\u6a21\u5f0f\u901a\u8fc7</li> <li>IDE \u81ea\u52a8\u8865\u5168\u652f\u6301</li> </ul>"},{"location":"zh/reference/TECHNICAL_SPEC/#4","title":"4. \u9ad8\u6027\u80fd","text":"<ul> <li>\u89e3\u6790\u6808\u7f13\u5b58</li> <li>\u5355\u4f8b\u5feb\u901f\u67e5\u8be2</li> <li>\u6700\u5c0f\u5316\u53cd\u5c04\u8c03\u7528</li> </ul>"},{"location":"zh/reference/TECHNICAL_SPEC/#_17","title":"\u68c0\u9a8c\u6e05\u5355","text":"<p>\u5b8c\u6210\u540e\u9700\u9a8c\u8bc1\uff1a</p> <ul> <li> \u6240\u6709 4 \u79cd\u751f\u547d\u5468\u671f\u6b63\u786e\u5b9e\u73b0</li> <li> \u5b57\u7b26\u4e32\u952e\u548c\u7c7b\u578b\u952e\u6df7\u5408\u4f7f\u7528</li> <li> IDE \u81ea\u52a8\u8865\u5168\u6b63\u5e38\u5de5\u4f5c</li> <li> \u5faa\u73af\u4f9d\u8d56\u81ea\u52a8\u68c0\u6d4b</li> <li> Lazy Proxy \u6b63\u786e\u5de5\u4f5c</li> <li> \u5f02\u6b65\u5bb9\u5668\u5b8c\u5168\u652f\u6301</li> <li> FastAPI/Flask \u96c6\u6210\u53ef\u7528</li> <li> \u6d4b\u8bd5\u8986\u76d6\u7387 \u2265 90%</li> <li> \u6587\u6863\u5b8c\u6574\u8be6\u7ec6</li> <li> \u6027\u80fd\u6307\u6807\u8fbe\u6807</li> </ul>"}]}